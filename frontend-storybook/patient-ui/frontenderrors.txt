Compiled with problems:
Ã—
ERROR in ./src/App.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
TypeError: Duplicate declaration "Routes"
  19 | import { ErrorBoundary } from './components/common/ErrorBoundary';
  20 | import { errorReportingService } from './services/errorReportingService';
> 21 | import Routes from './routes';
     |        ^^^^^^
  22 | // import CautionCardsPage from './pages/CautionCardsPage';
  23 | // import OCRPage from './pages/OCRPage';
  24 |
    at File.buildCodeFrameError (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\core\lib\transformation\file\file.js:193:12)
    at Scope.checkBlockScopedCollisions (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\scope\index.js:411:27)
    at Scope.registerBinding (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\scope\index.js:510:16)
    at Scope.registerDeclaration (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\scope\index.js:472:14)
    at Object.ImportDeclaration (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\scope\index.js:208:12)
    at NodePath._call (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\path\context.js:49:20)
    at NodePath.call (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\path\context.js:39:18)
    at NodePath.visit (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\path\context.js:88:31)
    at TraversalContext.visitQueue (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\context.js:90:16)
    at TraversalContext.visitMultiple (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\context.js:62:17)
    at TraversalContext.visit (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\context.js:111:19)
    at traverseNode (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\traverse-node.js:22:17)
    at traverse (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\index.js:53:34)
    at NodePath.traverse (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\path\index.js:120:24)
    at Scope.crawl (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\scope\index.js:678:10)
    at Scope.init (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\scope\index.js:641:12)
    at NodePath.setScope (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\path\context.js:126:53)
    at NodePath.setContext (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\path\context.js:138:12)
    at new File (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\core\lib\transformation\file\file.js:88:8)
    at normalizeFile (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\core\lib\transformation\normalize-file.js:98:10)
    at normalizeFile.next (<anonymous>)
    at run (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\core\lib\transformation\index.js:22:50)
    at run.next (<anonymous>)
    at transform (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\core\lib\transform.js:22:33)
    at transform.next (<anonymous>)
    at step (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\gensync\index.js:261:32)
    at I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\gensync\index.js:273:13
    at async.call.result.err.err (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\gensync\index.js:223:11)
    at I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\gensync\index.js:189:28
    at I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\core\lib\gensync-utils\async.js:67:7
    at I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\gensync\index.js:113:33
    at step (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\gensync\index.js:287:14)
    at I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\gensync\index.js:273:13
    at async.call.result.err.err (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\gensync\index.js:223:11)
ERROR
[eslint] Plugin "react" was conflicted between ".eslintrc.json" and "..\..\.eslintrc.json".
ERROR in ./src/App.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
TypeError: Duplicate declaration "Routes"
  19 | import { ErrorBoundary } from './components/common/ErrorBoundary';
  20 | import { errorReportingService } from './services/errorReportingService';
> 21 | import Routes from './routes';
     |        ^^^^^^
  22 | // import CautionCardsPage from './pages/CautionCardsPage';
  23 | // import OCRPage from './pages/OCRPage';
  24 |
    at File.buildCodeFrameError (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\core\lib\transformation\file\file.js:193:12)
    at Scope.checkBlockScopedCollisions (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\scope\index.js:411:27)
    at Scope.registerBinding (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\scope\index.js:510:16)
    at Scope.registerDeclaration (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\scope\index.js:472:14)
    at Object.ImportDeclaration (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\scope\index.js:208:12)
    at NodePath._call (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\path\context.js:49:20)
    at NodePath.call (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\path\context.js:39:18)
    at NodePath.visit (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\path\context.js:88:31)
    at TraversalContext.visitQueue (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\context.js:90:16)
    at TraversalContext.visitMultiple (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\context.js:62:17)
    at TraversalContext.visit (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\context.js:111:19)
    at traverseNode (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\traverse-node.js:22:17)
    at traverse (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\index.js:53:34)
    at NodePath.traverse (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\path\index.js:120:24)
    at Scope.crawl (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\scope\index.js:678:10)
    at Scope.init (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\scope\index.js:641:12)
    at NodePath.setScope (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\path\context.js:126:53)
    at NodePath.setContext (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\traverse\lib\path\context.js:138:12)
    at new File (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\core\lib\transformation\file\file.js:88:8)
    at normalizeFile (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\core\lib\transformation\normalize-file.js:98:10)
    at normalizeFile.next (<anonymous>)
    at run (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\core\lib\transformation\index.js:22:50)
    at run.next (<anonymous>)
    at transform (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\core\lib\transform.js:22:33)
    at transform.next (<anonymous>)
    at step (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\gensync\index.js:261:32)
    at I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\gensync\index.js:273:13
    at async.call.result.err.err (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\gensync\index.js:223:11)
    at I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\gensync\index.js:189:28
    at I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\@babel\core\lib\gensync-utils\async.js:67:7
    at I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\gensync\index.js:113:33
    at step (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\gensync\index.js:287:14)
    at I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\gensync\index.js:273:13
    at async.call.result.err.err (I:\PatientDatabaseV2\frontend-storybook\patient-ui\node_modules\gensync\index.js:223:11)
ERROR
[eslint] Plugin "react" was conflicted between ".eslintrc.json" and "..\..\.eslintrc.json".
ERROR in src/api/cautionCardService.ts:1:10
TS2614: Module '"./client"' has no exported member 'client'. Did you mean to use 'import client from "./client"' instead?
  > 1 | import { client } from './client';
      |          ^^^^^^
    2 | import { CautionCard, PaginatedResponse } from '../types';
    3 | // Define CautionCard type later based on API or ../types
    4 | // import { CautionCard } from '../types/CautionCard';
ERROR in src/api/cautionCardService.ts:2:48
TS2307: Cannot find module '../types' or its corresponding type declarations.
    1 | import { client } from './client';
  > 2 | import { CautionCard, PaginatedResponse } from '../types';
      |                                                ^^^^^^^^^^
    3 | // Define CautionCard type later based on API or ../types
    4 | // import { CautionCard } from '../types/CautionCard';
    5 |
ERROR in src/api/patientService.ts:1:10
TS2614: Module '"./client"' has no exported member 'apiClient'. Did you mean to use 'import apiClient from "./client"' instead?
  > 1 | import { apiClient } from './client';
      |          ^^^^^^^^^
    2 | import type { FilterCriteria } from '../components/search/FilterBar';
    3 | import { Patient } from '../types/Patient'; // Assuming Patient type definition exists
    4 |
ERROR in src/api/reportService.ts:2:43
TS2307: Cannot find module '../types' or its corresponding type declarations.
    1 | import apiClient from './client';
  > 2 | import { Report, PaginatedResponse } from '../types'; // Assuming types exist
      |                                           ^^^^^^^^^^
    3 | // Define Report and ReportAttachment types later based on API or ../types
    4 | // import { Report, ReportAttachment } from '../types/Report';
    5 |
ERROR in src/api/searchService.ts:1:10
TS2614: Module '"./client"' has no exported member 'apiClient'. Did you mean to use 'import apiClient from "./client"' instead?
  > 1 | import { apiClient } from './client';
      |          ^^^^^^^^^
    2 |
    3 | interface SearchResult {
    4 |   id: string | number;
ERROR in src/api/searchService.ts:19:30
TS7006: Parameter 'result' implicitly has an 'any' type.
    17 |
    18 |     // Transform the response data to match our SearchResult interface
  > 19 |     return response.data.map(result => ({
       |                              ^^^^^^
    20 |       ...result,
    21 |       // Ensure the type is one of our allowed types
    22 |       type: result.type as 'patient' | 'report' | 'caution-card',
ERROR in src/api/websocket/event-client.ts:32:42
TS2379: Argument of type '{ reconnection: true; reconnectionAttempts: number | undefined; reconnectionDelay: number | undefined; }' is not assignable to parameter of type 'Partial<ManagerOptions & SocketOptions>' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
  Types of property 'reconnectionAttempts' are incompatible.
    Type 'number | undefined' is not assignable to type 'number'.
      Type 'undefined' is not assignable to type 'number'.
    30 |   public connect(): Promise<void> {
    31 |     return new Promise((resolve, reject) => {
  > 32 |       this.socket = io(this.options.url, {
       |                                          ^
  > 33 |         reconnection: true,
       | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 34 |         reconnectionAttempts: this.options.reconnectAttempts,
       | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 35 |         reconnectionDelay: this.options.reconnectDelay,
       | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 36 |       });
       | ^^^^^^^^
    37 |
    38 |       this.socket.on('connect', () => {
    39 |         console.log('Connected to WebSocket server');
ERROR in src/api/websocket/event-client.ts:188:7
TS18048: 'events' is possibly 'undefined'.
    186 |     for (const type in response.events) {
    187 |       const events = response.events[type];
  > 188 |       events.forEach(event => {
        |       ^^^^^^
    189 |         this.handleEvent(event);
    190 |       });
    191 |     }
ERROR in src/App.tsx:2:35
TS2300: Duplicate identifier 'Routes'.
    1 | import React, { useEffect } from 'react';
  > 2 | import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
      |                                   ^^^^^^
    3 | import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
    4 | import { ThemeProvider } from '@mui/material/styles';
    5 | import CssBaseline from '@mui/material/CssBaseline';
ERROR in src/App.tsx:6:23
TS2307: Cannot find module './theme' or its corresponding type declarations.
    4 | import { ThemeProvider } from '@mui/material/styles';
    5 | import CssBaseline from '@mui/material/CssBaseline';
  > 6 | import { theme } from './theme';
      |                       ^^^^^^^^^
    7 | import Layout from './components/common/Layout';
    8 | import './App.css';
    9 | import PatientsPage from './pages/PatientsPage';
ERROR in src/App.tsx:10:8
TS2613: Module '"I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/pages/PatientDetailPage"' has no default export. Did you mean to use 'import { PatientDetailPage } from "I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/pages/PatientDetailPage"' instead?
     8 | import './App.css';
     9 | import PatientsPage from './pages/PatientsPage';
  > 10 | import PatientDetailPage from './pages/PatientDetailPage';
       |        ^^^^^^^^^^^^^^^^^
    11 | import PatientFormPage from './pages/PatientFormPage';
    12 | import PatientReportsPage from './pages/PatientReportsPage';
    13 | import ReportsPage from './pages/ReportsPage';
ERROR in src/App.tsx:11:8
TS2613: Module '"I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/pages/PatientFormPage"' has no default export. Did you mean to use 'import { PatientFormPage } from "I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/pages/PatientFormPage"' instead?
     9 | import PatientsPage from './pages/PatientsPage';
    10 | import PatientDetailPage from './pages/PatientDetailPage';
  > 11 | import PatientFormPage from './pages/PatientFormPage';
       |        ^^^^^^^^^^^^^^^
    12 | import PatientReportsPage from './pages/PatientReportsPage';
    13 | import ReportsPage from './pages/ReportsPage';
    14 | import { WebSocketProvider } from './context/WebSocketContext';
ERROR in src/App.tsx:13:8
TS2613: Module '"I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/pages/ReportsPage"' has no default export. Did you mean to use 'import { ReportsPage } from "I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/pages/ReportsPage"' instead?
    11 | import PatientFormPage from './pages/PatientFormPage';
    12 | import PatientReportsPage from './pages/PatientReportsPage';
  > 13 | import ReportsPage from './pages/ReportsPage';
       |        ^^^^^^^^^^^
    14 | import { WebSocketProvider } from './context/WebSocketContext';
    15 | import { AuthProvider } from './context/AuthContext';
    16 | import { LoginPage } from './pages/LoginPage';
ERROR in src/App.tsx:21:8
TS2300: Duplicate identifier 'Routes'.
    19 | import { ErrorBoundary } from './components/common/ErrorBoundary';
    20 | import { errorReportingService } from './services/errorReportingService';
  > 21 | import Routes from './routes';
       |        ^^^^^^
    22 | // import CautionCardsPage from './pages/CautionCardsPage';
    23 | // import OCRPage from './pages/OCRPage';
    24 |
ERROR in src/App.tsx:21:20
TS2307: Cannot find module './routes' or its corresponding type declarations.
    19 | import { ErrorBoundary } from './components/common/ErrorBoundary';
    20 | import { errorReportingService } from './services/errorReportingService';
  > 21 | import Routes from './routes';
       |                    ^^^^^^^^^^
    22 | // import CautionCardsPage from './pages/CautionCardsPage';
    23 | // import OCRPage from './pages/OCRPage';
    24 |
ERROR in src/App.tsx:49:28
TS4111: Property 'REACT_APP_VERSION' comes from an index signature, so it must be accessed with ['REACT_APP_VERSION'].
    47 |     errorReportingService.initialize({
    48 |       environment: process.env.NODE_ENV,
  > 49 |       version: process.env.REACT_APP_VERSION || '1.0.0'
       |                            ^^^^^^^^^^^^^^^^^
    50 |     });
    51 |   }, []);
    52 |
ERROR in src/App.tsx:55:7
TS2412: Type 'string | null | undefined' is not assignable to type 'string | undefined' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the type of the target.
    53 |   const handleError = (error: Error, errorInfo: React.ErrorInfo) => {
    54 |     errorReportingService.logError(error, {
  > 55 |       componentStack: errorInfo.componentStack
       |       ^^^^^^^^^^^^^^
    56 |     });
    57 |   };
    58 |
ERROR in src/components/AntibodyDisplay.tsx:14:25
TS2769: No overload matches this call.
  Overload 1 of 2, '(props: { component: ElementType<any, keyof IntrinsicElements>; } & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<...>): Element | null', gave the following error.
    Property 'component' is missing in type '{ children: Element; key: string; item: true; }' but required in type '{ component: ElementType<any, keyof IntrinsicElements>; }'.
  Overload 2 of 2, '(props: DefaultComponentProps<GridTypeMap<{}, "div">>): Element | null', gave the following error.
    Type '{ children: Element; key: string; item: true; }' is not assignable to type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, StandardSystemKeys | ... 1 more ... | keyof GridBaseProps>'.
      Property 'item' does not exist on type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, StandardSystemKeys | ... 1 more ... | keyof GridBaseProps>'.
    12 |                 <Grid container spacing={1}>
    13 |                     {antibodies.map((antibody) => (
  > 14 |                         <Grid key={antibody} item>
       |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
    15 |                             <Typography variant="body2">{antibody}</Typography>
    16 |                         </Grid>
    17 |                     ))}
ERROR in src/components/AntibodyInput.tsx:27:18
TS2375: Type '{ label: string; placeholder: string; id: string; disabled: boolean; fullWidth: boolean; size: "small" | undefined; InputLabelProps: Omit<HTMLAttributes<HTMLLabelElement>, "color">; InputProps: { ...; }; inputProps: InputHTMLAttributes<...> & { ...; }; }' is not assignable to type 'Omit<FilledTextFieldProps | OutlinedTextFieldProps | StandardTextFieldProps, "variant">' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
  Types of property 'size' are incompatible.
    Type '"small" | undefined' is not assignable to type '"small" | "medium"'.
      Type 'undefined' is not assignable to type '"small" | "medium"'.
    25 |             onChange={(_, newValue) => onChange(newValue)}
    26 |             renderInput={(params) => (
  > 27 |                 <TextField
       |                  ^^^^^^^^^
    28 |                     {...params}
    29 |                     label="Antibodies"
    30 |                     placeholder="Select or type antibodies"
ERROR in src/components/caution-cards/CautionCardBatch.tsx:3:10
TS2305: Module '"../../hooks/useCautionCards"' has no exported member 'useMarkAsReviewed'.
    1 | import React from 'react';
    2 | import { Card, Form, Select, Button, Space, Alert, message } from 'antd';
  > 3 | import { useMarkAsReviewed, useLinkToPatient } from '../../hooks/useCautionCards';
      |          ^^^^^^^^^^^^^^^^^
    4 | import type { CautionCard } from '../../types/cautionCard';
    5 |
    6 | interface CautionCardBatchProps {
ERROR in src/components/caution-cards/CautionCardBatch.tsx:3:29
TS2305: Module '"../../hooks/useCautionCards"' has no exported member 'useLinkToPatient'.
    1 | import React from 'react';
    2 | import { Card, Form, Select, Button, Space, Alert, message } from 'antd';
  > 3 | import { useMarkAsReviewed, useLinkToPatient } from '../../hooks/useCautionCards';
      |                             ^^^^^^^^^^^^^^^^
    4 | import type { CautionCard } from '../../types/cautionCard';
    5 |
    6 | interface CautionCardBatchProps {
ERROR in src/components/caution-cards/CautionCardDetails.tsx:28:35
TS2551: Property 'patientId' does not exist on type 'CautionCard'. Did you mean 'patient_id'?
    26 |             </Button>
    27 |           )}
  > 28 |           {onLinkPatient && !card.patientId && (
       |                                   ^^^^^^^^^
    29 |             <Button icon={<LinkOutlined />} onClick={onLinkPatient}>
    30 |               Link to Patient
    31 |             </Button>
ERROR in src/components/caution-cards/CautionCardEdit.tsx:3:10
TS2724: '"../../hooks/useCautionCards"' has no exported member named 'useUpdateCautionCard'. Did you mean 'useCautionCard'?
    1 | import React from 'react';
    2 | import { Form, Input, Select, Button, Card, Space, message } from 'antd';
  > 3 | import { useUpdateCautionCard } from '../../hooks/useCautionCards';
      |          ^^^^^^^^^^^^^^^^^^^^
    4 | import type { CautionCard, CautionCardUpdateData } from '../../types/cautionCard';
    5 |
    6 | interface CautionCardEditProps {
ERROR in src/components/caution-cards/CautionCardEdit.tsx:32:21
TS7006: Parameter 'error' implicitly has an 'any' type.
    30 |             onSuccess?.();
    31 |           },
  > 32 |           onError: (error) => {
       |                     ^^^^^
    33 |             message.error('Failed to update caution card');
    34 |             console.error('Update error:', error);
    35 |           }
ERROR in src/components/caution-cards/CautionCardEdit.tsx:50:27
TS2551: Property 'bloodType' does not exist on type 'CautionCard'. Did you mean 'blood_type'?
    48 |         layout="vertical"
    49 |         initialValues={{
  > 50 |           bloodType: card.bloodType,
       |                           ^^^^^^^^^
    51 |           antibodies: card.antibodies,
    52 |           transfusionRequirements: card.transfusionRequirements,
    53 |           notes: card.notes
ERROR in src/components/caution-cards/CautionCardEdit.tsx:52:41
TS2551: Property 'transfusionRequirements' does not exist on type 'CautionCard'. Did you mean 'transfusion_requirements'?
    50 |           bloodType: card.bloodType,
    51 |           antibodies: card.antibodies,
  > 52 |           transfusionRequirements: card.transfusionRequirements,
       |                                         ^^^^^^^^^^^^^^^^^^^^^^^
    53 |           notes: card.notes
    54 |         }}
    55 |         onFinish={handleSubmit}
ERROR in src/components/caution-cards/CautionCardEdit.tsx:53:23
TS2339: Property 'notes' does not exist on type 'CautionCard'.
    51 |           antibodies: card.antibodies,
    52 |           transfusionRequirements: card.transfusionRequirements,
  > 53 |           notes: card.notes
       |                       ^^^^^
    54 |         }}
    55 |         onFinish={handleSubmit}
    56 |       >
ERROR in src/components/caution-cards/CautionCardImport.tsx:38:13
TS2339: Property 'error' does not exist on type 'CompoundedComponent'.
    36 |
    37 |     if (!isAcceptedFormat) {
  > 38 |       Alert.error(`File must be one of: ${acceptedFormats.join(', ')}`);
       |             ^^^^^
    39 |       return false;
    40 |     }
    41 |
ERROR in src/components/caution-cards/CautionCardImport.tsx:44:13
TS2339: Property 'error' does not exist on type 'CompoundedComponent'.
    42 |     const isLt10M = file.size / 1024 / 1024 < 10;
    43 |     if (!isLt10M) {
  > 44 |       Alert.error('File must be smaller than 10MB!');
       |             ^^^^^
    45 |       return false;
    46 |     }
    47 |
ERROR in src/components/caution-cards/CautionCardList.tsx:17:54
TS2345: Argument of type '{ page: number; limit: number; search: string; status: string; }' is not assignable to parameter of type 'number'.
    15 |   });
    16 |
  > 17 |   const { data, isLoading, error } = useCautionCards(searchParams);
       |                                                      ^^^^^^^^^^^^
    18 |
    19 |   const columns = [
    20 |     {
ERROR in src/components/caution-cards/CautionCardList.tsx:145:27
TS2339: Property 'items' does not exist on type '{}'.
    143 |       <Table
    144 |         columns={columns}
  > 145 |         dataSource={data?.items}
        |                           ^^^^^
    146 |         rowKey="id"
    147 |         loading={isLoading}
    148 |         pagination={{
ERROR in src/components/caution-cards/CautionCardList.tsx:151:24
TS2339: Property 'total' does not exist on type '{}'.
    149 |           current: searchParams.page,
    150 |           pageSize: searchParams.limit,
  > 151 |           total: data?.total,
        |                        ^^^^^
    152 |           showSizeChanger: true,
    153 |           showTotal: (total) => `Total ${total} items`
    154 |         }}
ERROR in src/components/caution-cards/CautionCardReview.tsx:2:10
TS2305: Module '"../../hooks/useCautionCards"' has no exported member 'useMarkAsReviewed'.
    1 | import { Card, Form, Input, Button, Space, message } from 'antd';
  > 2 | import { useMarkAsReviewed } from '../../hooks/useCautionCards';
      |          ^^^^^^^^^^^^^^^^^
    3 | import type { CautionCard } from '../../types/cautionCard';
    4 |
    5 | interface ReviewData {
ERROR in src/components/caution-cards/CautionCardReview.tsx:38:19
TS7006: Parameter 'error' implicitly has an 'any' type.
    36 |           onSuccess?.();
    37 |         },
  > 38 |         onError: (error) => {
       |                   ^^^^^
    39 |           message.error('Failed to review caution card');
    40 |           console.error('Review error:', error);
    41 |         }
ERROR in src/components/caution-cards/CautionCardUpload.tsx:4:10
TS2724: '"../../hooks/useCautionCards"' has no exported member named 'useUploadCautionCard'. Did you mean 'useCautionCard'?
    2 | import { Upload, Form, Button, Card, Alert, message } from 'antd';
    3 | import { UploadOutlined } from '@ant-design/icons';
  > 4 | import { useUploadCautionCard } from '../../hooks/useCautionCards';
      |          ^^^^^^^^^^^^^^^^^^^^
    5 | import type { UploadFile } from 'antd/es/upload/interface';
    6 |
    7 | export const CautionCardUpload: React.FC = () => {
ERROR in src/components/caution-cards/CautionCardUpload.tsx:29:19
TS7006: Parameter 'err' implicitly has an 'any' type.
    27 |           setFileList([]);
    28 |         },
  > 29 |         onError: (err) => {
       |                   ^^^
    30 |           message.error('Failed to upload caution card.');
    31 |           console.error('Upload error:', err);
    32 |         }
ERROR in src/components/caution-cards/CautionCardUploadModal.tsx:2:39
TS2307: Cannot find module '../hooks/useCautionCards' or its corresponding type declarations.
    1 | import React, { useState } from 'react';
  > 2 | import { useProcessCautionCard } from '../hooks/useCautionCards'; // Ensure path is correct
      |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
    3 |
    4 | interface CautionCardUploadModalProps {
    5 |   isOpen: boolean;
ERROR in src/components/caution-cards/LinkCardModal.tsx:4:28
TS2307: Cannot find module '../../hooks/usePatient' or its corresponding type declarations.
    2 | import { Dialog, DialogTitle, DialogContent, DialogActions, Button, TextField, Box, Typography } from '@mui/material';
    3 | import { LoadingSpinner } from '../common/LoadingSpinner';
  > 4 | import { usePatient } from '../../hooks/usePatient';
      |                            ^^^^^^^^^^^^^^^^^^^^^^^^
    5 |
    6 | interface LinkCardModalProps {
    7 |     isOpen: boolean;
ERROR in src/components/caution-cards/LinkCardModal.tsx:67:45
TS2322: Type 'number' is not assignable to type '"small" | "medium" | "large"'.
    65 |                     {isLoadingPatient && patientId && (
    66 |                         <Box sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}>
  > 67 |                             <LoadingSpinner size={24} />
       |                                             ^^^^
    68 |                         </Box>
    69 |                     )}
    70 |                     {patient && (
ERROR in src/components/caution-cards/LinkCardModal.tsx:88:50
TS2322: Type 'number' is not assignable to type '"small" | "medium" | "large"'.
    86 |                     disabled={isLoading || !patient}
    87 |                 >
  > 88 |                     {isLoading ? <LoadingSpinner size={24} /> : 'Link'}
       |                                                  ^^^^
    89 |                 </Button>
    90 |             </DialogActions>
    91 |         </Dialog>
ERROR in src/components/caution-cards/LinkCardToPatientModal.tsx:2:38
TS2307: Cannot find module '../hooks/useCautionCards' or its corresponding type declarations.
    1 | import React, { useState, useContext } from 'react';
  > 2 | import { useLinkCardToPatient } from '../hooks/useCautionCards';
      |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    3 | import { useSearchPatients } from '../hooks/usePatients'; // Need search hook
    4 | import { AuthContext } from '../context/AuthContext';
    5 | import { useDebounce } from '../hooks/useDebounce'; // Debounce for search input
ERROR in src/components/caution-cards/LinkCardToPatientModal.tsx:3:35
TS2307: Cannot find module '../hooks/usePatients' or its corresponding type declarations.
    1 | import React, { useState, useContext } from 'react';
    2 | import { useLinkCardToPatient } from '../hooks/useCautionCards';
  > 3 | import { useSearchPatients } from '../hooks/usePatients'; // Need search hook
      |                                   ^^^^^^^^^^^^^^^^^^^^^^
    4 | import { AuthContext } from '../context/AuthContext';
    5 | import { useDebounce } from '../hooks/useDebounce'; // Debounce for search input
    6 | import { Patient } from '../types/Patient'; // Patient type
ERROR in src/components/caution-cards/LinkCardToPatientModal.tsx:4:29
TS2307: Cannot find module '../context/AuthContext' or its corresponding type declarations.
    2 | import { useLinkCardToPatient } from '../hooks/useCautionCards';
    3 | import { useSearchPatients } from '../hooks/usePatients'; // Need search hook
  > 4 | import { AuthContext } from '../context/AuthContext';
      |                             ^^^^^^^^^^^^^^^^^^^^^^^^
    5 | import { useDebounce } from '../hooks/useDebounce'; // Debounce for search input
    6 | import { Patient } from '../types/Patient'; // Patient type
    7 |
ERROR in src/components/caution-cards/LinkCardToPatientModal.tsx:5:29
TS2307: Cannot find module '../hooks/useDebounce' or its corresponding type declarations.
    3 | import { useSearchPatients } from '../hooks/usePatients'; // Need search hook
    4 | import { AuthContext } from '../context/AuthContext';
  > 5 | import { useDebounce } from '../hooks/useDebounce'; // Debounce for search input
      |                             ^^^^^^^^^^^^^^^^^^^^^^
    6 | import { Patient } from '../types/Patient'; // Patient type
    7 |
    8 | interface LinkCardToPatientModalProps {
ERROR in src/components/caution-cards/LinkCardToPatientModal.tsx:6:25
TS2307: Cannot find module '../types/Patient' or its corresponding type declarations.
    4 | import { AuthContext } from '../context/AuthContext';
    5 | import { useDebounce } from '../hooks/useDebounce'; // Debounce for search input
  > 6 | import { Patient } from '../types/Patient'; // Patient type
      |                         ^^^^^^^^^^^^^^^^^^
    7 |
    8 | interface LinkCardToPatientModalProps {
    9 |   isOpen: boolean;
ERROR in src/components/caution-cards/LinkCardToPatientModal.tsx:21:11
TS2339: Property 'user' does not exist on type 'unknown'.
    19 |   cardIdentifier
    20 | }) => {
  > 21 |   const { user } = useContext(AuthContext);
       |           ^^^^
    22 |   const linkMutation = useLinkCardToPatient();
    23 |   
    24 |   // State for patient search
ERROR in src/components/caution-cards/LinkCardToPatientModal.tsx:107:41
TS7006: Parameter 'p' implicitly has an 'any' type.
    105 |             {!isSearching && patientsFound.length > 0 && (
    106 |                 <ul className="divide-y divide-gray-200">
  > 107 |                     {patientsFound.map((p) => (
        |                                         ^
    108 |                         <li key={p.id} 
    109 |                             className={`p-2 cursor-pointer hover:bg-gray-100 ${
    110 |                                 selectedPatient?.id === p.id ? 'bg-indigo-100' : ''
ERROR in src/components/common/LoadingSkeleton.tsx:34:25
TS2769: No overload matches this call.
  Overload 1 of 2, '(props: { component: ElementType<any, keyof IntrinsicElements>; } & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<...>): Element | null', gave the following error.
    Property 'component' is missing in type '{ children: Element[]; item: true; xs: number; md: number; }' but required in type '{ component: ElementType<any, keyof IntrinsicElements>; }'.
  Overload 2 of 2, '(props: DefaultComponentProps<GridTypeMap<{}, "div">>): Element | null', gave the following error.
    Type '{ children: Element[]; item: true; xs: number; md: number; }' is not assignable to type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, "sx" | ... 1 more ... | keyof GridBaseProps>'.
      Property 'item' does not exist on type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, "sx" | ... 1 more ... | keyof GridBaseProps>'.
    32 |                     <Skeleton variant="text" width={200} height={32} sx={{ mb: 2 }} />
    33 |                     <Grid container spacing={2}>
  > 34 |                         <Grid item xs={12} md={6}>
       |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
    35 |                             {[...Array(4)].map((_, i) => (
    36 |                                 <Box key={`left-${i}`} sx={{ mb: 2 }}>
    37 |                                     <Skeleton variant="text" width={120} />
ERROR in src/components/common/LoadingSkeleton.tsx:42:25
TS2769: No overload matches this call.
  Overload 1 of 2, '(props: { component: ElementType<any, keyof IntrinsicElements>; } & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<...>): Element | null', gave the following error.
    Property 'component' is missing in type '{ children: Element[]; item: true; xs: number; md: number; }' but required in type '{ component: ElementType<any, keyof IntrinsicElements>; }'.
  Overload 2 of 2, '(props: DefaultComponentProps<GridTypeMap<{}, "div">>): Element | null', gave the following error.
    Type '{ children: Element[]; item: true; xs: number; md: number; }' is not assignable to type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, "sx" | ... 1 more ... | keyof GridBaseProps>'.
      Property 'item' does not exist on type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, "sx" | ... 1 more ... | keyof GridBaseProps>'.
    40 |                             ))}
    41 |                         </Grid>
  > 42 |                         <Grid item xs={12} md={6}>
       |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
    43 |                             {[...Array(4)].map((_, i) => (
    44 |                                 <Box key={`right-${i}`} sx={{ mb: 2 }}>
    45 |                                     <Skeleton variant="text" width={120} />
ERROR in src/components/common/TopBar.tsx:8:11
TS2339: Property 'user' does not exist on type 'AuthContextType | null'.
     6 |
     7 | const TopBar: React.FC = () => {
  >  8 |   const { user, logout } = useContext(AuthContext);
       |           ^^^^
     9 |   const navigate = useNavigate();
    10 |
    11 |   const handleLogout = () => {
ERROR in src/components/common/TopBar.tsx:8:17
TS2339: Property 'logout' does not exist on type 'AuthContextType | null'.
     6 |
     7 | const TopBar: React.FC = () => {
  >  8 |   const { user, logout } = useContext(AuthContext);
       |                 ^^^^^^
     9 |   const navigate = useNavigate();
    10 |
    11 |   const handleLogout = () => {
ERROR in src/components/ConfirmationModal.tsx
TS1208: 'ConfirmationModal.tsx' cannot be compiled under '--isolatedModules' because it is considered a global script file. Add an import, export, or an empty 'export {}' statement to make it a module.
ERROR in src/components/ocr/OcrResult.tsx:62:33
TS2379: Argument of type '{ text: string | undefined; analysisEnabled: boolean; structuredEnabled: boolean; }' is not assignable to parameter of type 'UseTextAnalysisOptions' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
  Types of property 'text' are incompatible.
    Type 'string | undefined' is not assignable to type 'string'.
      Type 'undefined' is not assignable to type 'string'.
    60 |   }, [activeTab, analysisActivated, structuredActivated]);
    61 |
  > 62 |   const hooks = useTextAnalysis({
       |                                 ^
  > 63 |       text: text || undefined,
       | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 64 |       analysisEnabled: analysisActivated,
       | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 65 |       structuredEnabled: structuredActivated,
       | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 66 |   });
       | ^^^^
    67 |   
    68 |   const { 
    69 |     data: analysisData, 
ERROR in src/components/ocr/OCRResults.tsx:63:52
TS4111: Property 'structured_data' comes from an index signature, so it must be accessed with ['structured_data'].
    61 |           <Title level={4}>Structured Data</Title>
    62 |           <div className="p-4 border rounded bg-gray-50 min-h-96">
  > 63 |             {renderStructuredData(result.metadata?.structured_data)}
       |                                                    ^^^^^^^^^^^^^^^
    64 |           </div>
    65 |         </div>
    66 |       </div>
ERROR in src/components/ocr/OcrResultsList.tsx:31:75
TS2379: Argument of type '{ search: string; status: OcrStatus | undefined; }' is not assignable to parameter of type 'OcrFilters' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
  Types of property 'status' are incompatible.
    Type 'OcrStatus | undefined' is not assignable to type 'OcrStatus'.
      Type 'undefined' is not assignable to type 'OcrStatus'.
    29 |   const ocrHook = useOcr();
    30 |   
  > 31 |   const { data, isLoading, isError } = ocrHook.useOcrResults(page, limit, {
       |                                                                           ^
  > 32 |     search,
       | ^^^^^^^^^^^
  > 33 |     status: status || undefined,
       | ^^^^^^^^^^^
  > 34 |   });
       | ^^^^
    35 |
    36 |   const { mutate: deleteResult } = ocrHook.useDeleteResult();
    37 |   const { mutate: retryProcessing } = ocrHook.useRetryProcessing();
ERROR in src/components/ocr/OcrUpload.tsx:35:26
TS2532: Object is possibly 'undefined'.
    33 |
    34 |     if (fileRejections.length > 0) {
  > 35 |         setDropzoneError(fileRejections[0].errors[0].message || 'Invalid file selected.');
       |                          ^^^^^^^^^^^^^^^^^
    36 |         return;
    37 |     }
    38 |
ERROR in src/components/ocr/OcrUpload.tsx:35:26
TS2532: Object is possibly 'undefined'.
    33 |
    34 |     if (fileRejections.length > 0) {
  > 35 |         setDropzoneError(fileRejections[0].errors[0].message || 'Invalid file selected.');
       |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    36 |         return;
    37 |     }
    38 |
ERROR in src/components/patient/CautionCard.stories.tsx:90:5
TS2739: Type '{ identification: { id: string; mrn: string; fmp: string; ssn: string; }; demographics: { firstName: string; lastName: string; dateOfBirth: string; gender: string; }; bloodProfile: { abo: string; rh: string; phenotype: { ...; }; antibodies: string[]; restrictions: string[]; requirements: { ...; }; }; ... 4 more ...;...' is missing the following properties from type 'Patient': id, createdAt, updatedAt, createdBy
    88 | export const Standard: Story = {
    89 |   args: {
  > 90 |     patient: basePatient,
       |     ^^^^^^^
    91 |   },
    92 | };
    93 |
ERROR in src/components/patient/CautionCard.stories.tsx:97:5
TS2739: Type '{ bloodProfile: { phenotype: { rh: {}; kell: {}; duffy: {}; kidd: {}; mns: {}; }; antibodies: never[]; restrictions: never[]; requirements: { immediateSpinRequired: false; salineToAHGRequired: false; preWarmRequired: false; }; abo: string; rh: string; }; ... 6 more ...; updatedBy: string; }' is missing the following properties from type 'Patient': id, createdAt, updatedAt, createdBy
     95 | export const Minimal: Story = {
     96 |   args: {
  >  97 |     patient: {
        |     ^^^^^^^
     98 |       ...basePatient,
     99 |       bloodProfile: {
    100 |         ...basePatient.bloodProfile,
ERROR in src/components/patient/CautionCard.stories.tsx:124:5
TS2739: Type '{ cautionFlags: string[]; identification: { id: string; mrn: string; fmp: string; ssn: string; }; demographics: { firstName: string; lastName: string; dateOfBirth: string; gender: string; }; bloodProfile: { ...; }; medicalHistory: { ...; }; comments: never[]; notes: never[]; updatedBy: string; }' is missing the following properties from type 'Patient': id, createdAt, updatedAt, createdBy
    122 | export const WithMultipleCautions: Story = {
    123 |   args: {
  > 124 |     patient: {
        |     ^^^^^^^
    125 |       ...basePatient,
    126 |       cautionFlags: [
    127 |         'History of multiple antibodies',
ERROR in src/components/patient/CautionCard.stories.tsx:140:5
TS2739: Type '{ bloodProfile: { phenotype: { other: { P1: true; Lea: true; Leb: false; Lua: false; Lub: true; Xga: true; }; rh: { D: boolean; C: boolean; E: boolean; c: boolean; e: boolean; }; kell: { K: boolean; k: boolean; }; duffy: { ...; }; kidd: { ...; }; mns: { ...; }; }; ... 4 more ...; requirements: { ...; }; }; ... 6 mor...' is missing the following properties from type 'Patient': id, createdAt, updatedAt, createdBy
    138 | export const ComplexPhenotype: Story = {
    139 |   args: {
  > 140 |     patient: {
        |     ^^^^^^^
    141 |       ...basePatient,
    142 |       bloodProfile: {
    143 |         ...basePatient.bloodProfile,
ERROR in src/components/patient/CautionCard.stories.tsx:163:5
TS2739: Type '{ bloodProfile: { requirements: { immediateSpinRequired: true; salineToAHGRequired: true; preWarmRequired: true; }; abo: string; rh: string; phenotype: { rh: { D: boolean; C: boolean; E: boolean; c: boolean; e: boolean; }; ... 4 more ...; other: { ...; }; }; antibodies: string[]; restrictions: string[]; }; ... 6 mor...' is missing the following properties from type 'Patient': id, createdAt, updatedAt, createdBy
    161 | export const AllCrossmatchRequirements: Story = {
    162 |   args: {
  > 163 |     patient: {
        |     ^^^^^^^
    164 |       ...basePatient,
    165 |       bloodProfile: {
    166 |         ...basePatient.bloodProfile,
ERROR in src/components/patient/CautionCard.stories.tsx:180:5
TS2322: Type '{ identification: { id: string; mrn: string; fmp: string; ssn: string; }; demographics: { firstName: string; lastName: string; dateOfBirth: string; gender: string; }; bloodProfile: { abo: string; rh: string; phenotype: { ...; }; antibodies: string[]; restrictions: string[]; requirements: { ...; }; }; ... 4 more ...;...' is not assignable to type 'Patient'.
    178 | export const CustomStyling: Story = {
    179 |   args: {
  > 180 |     patient: basePatient,
        |     ^^^^^^^
    181 |     className: 'max-w-3xl shadow-lg rounded-lg',
    182 |   },
    183 | }; 
ERROR in src/components/patient/CautionCardManagement.tsx:335:16
TS2375: Type '{ key: string; card: CautionCard; onUpdate: ((id: string, data: Partial<CautionCard>) => Promise<{ success: boolean; message: string; cautionCard: CautionCard; }>) | undefined; onDelete: ((id: string) => Promise<...>) | undefined; }' is not assignable to type '{ card: CautionCard; onUpdate?: (id: string, data: Partial<CautionCard>) => Promise<{ success: boolean; message: string; cautionCard: CautionCard; }>; onDelete?: (id: string) => Promise<...>; }' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
  Types of property 'onUpdate' are incompatible.
    Type '((id: string, data: Partial<CautionCard>) => Promise<{ success: boolean; message: string; cautionCard: CautionCard; }>) | undefined' is not assignable to type '(id: string, data: Partial<CautionCard>) => Promise<{ success: boolean; message: string; cautionCard: CautionCard; }>'.
      Type 'undefined' is not assignable to type '(id: string, data: Partial<CautionCard>) => Promise<{ success: boolean; message: string; cautionCard: CautionCard; }>'.
    333 |           <div className="space-y-4">
    334 |             {cautionCards.map((card) => (
  > 335 |               <CautionCardItem
        |                ^^^^^^^^^^^^^^^
    336 |                 key={card.id}
    337 |                 card={card}
    338 |                 onUpdate={onUpdate}
ERROR in src/components/patient/form-sections/MedicalHistoryFormSection.tsx:13:41
TS2538: Type 'undefined' cannot be used as an index type.
    11 |         {({ push, remove, form }) => (
    12 |           <div>
  > 13 |             {form.values.medicalHistory[fieldName.split('.')[1]]?.map((_: string, index: number) => (
       |                                         ^^^^^^^^^^^^^^^^^^^^^^^
    14 |               <div key={index} className="flex items-center space-x-2 mb-1">
    15 |                 <Field 
    16 |                   name={`${fieldName}[${index}]`} 
ERROR in src/components/patient/PatientForm.stories.tsx:47:7
TS2739: Type '{ firstName: string; lastName: string; dateOfBirth: string; gender: "M"; }' is missing the following properties from type 'Demographics': contactNumber, email
    45 |   args: {
    46 |     patient: {
  > 47 |       demographics: {
       |       ^^^^^^^^^^^^
    48 |         firstName: 'John',
    49 |         lastName: 'Doe',
    50 |         dateOfBirth: '1990-01-01',
ERROR in src/components/patient/PatientForm.stories.tsx:65:7
TS2741: Property 'procedures' is missing in type '{ allergies: never[]; conditions: never[]; medications: never[]; surgeries: never[]; }' but required in type 'MedicalHistory'.
    63 |         antibodies: [],
    64 |       },
  > 65 |       medicalHistory: {
       |       ^^^^^^^^^^^^^^
    66 |         allergies: [],
    67 |         conditions: [],
    68 |         medications: [],
ERROR in src/components/patient/PatientForm.tsx:72:26
TS2345: Argument of type '{ demographics: { gender: "M" | "F" | "O"; firstName: string; middleName?: string; lastName: string; dateOfBirth: string; race?: string; ethnicity?: string; contactNumber: string; email: string; } | { ...; }; ... 11 more ...; specialProcedures?: string[]; } | { ...; }' is not assignable to parameter of type 'Omit<Patient, "createdAt" | "updatedAt" | "identification" | "createdBy" | "updatedBy">'.
  Type '{ demographics: { gender: "M" | "F" | "O"; firstName: string; middleName?: string; lastName: string; dateOfBirth: string; race?: string; ethnicity?: string; contactNumber: string; email: string; } | { ...; }; ... 11 more ...; specialProcedures?: string[]; }' is not assignable to type 'Omit<Patient, "createdAt" | "updatedAt" | "identification" | "createdBy" | "updatedBy">' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
    Types of property 'demographics' are incompatible.
      Type '{ gender: "M" | "F" | "O"; firstName: string; middleName?: string; lastName: string; dateOfBirth: string; race?: string; ethnicity?: string; contactNumber: string; email: string; } | { gender: "M" | "F" | "O"; firstName: string; lastName: string; dateOfBirth: string; }' is not assignable to type 'Demographics'.
        Type '{ gender: "M" | "F" | "O"; firstName: string; lastName: string; dateOfBirth: string; }' is missing the following properties from type 'Demographics': contactNumber, email
    70 |             },
    71 |           };
  > 72 |           await onSubmit(submitValues);
       |                          ^^^^^^^^^^^^
    73 |           setStatus({ success: true });
    74 |         } catch (error) {
    75 |           setStatus({ success: false, error: error instanceof Error ? error.message : 'An error occurred' });
ERROR in src/components/patient/PatientManagement.stories.tsx:102:5
TS2741: Property 'id' is missing in type '{ identification: { id: string; mrn: string; fmp: string; ssn: string; }; demographics: { firstName: string; lastName: string; dateOfBirth: string; gender: string; }; bloodProfile: { abo: string; rh: string; phenotype: { ...; }; antibodies: string[]; }; ... 6 more ...; updatedBy: string; }' but required in type 'Patient'.
    100 | export const ViewingPatient: Story = {
    101 |   args: {
  > 102 |     patient: mockPatient,
        |     ^^^^^^^
    103 |     onUpdate: async (patientId, patientData) => {
    104 |       action('onUpdate')(patientId, patientData);
    105 |       return {
ERROR in src/components/patient/PatientManagement.stories.tsx:103:5
TS2322: Type '(patientId: string, patientData: Partial<Patient>) => Promise<{ success: true; message: string; patient: { id?: string; identification: PatientIdentification | { ...; }; ... 10 more ...; specialProcedures?: string[]; }; }>' is not assignable to type '(patientId: string, patientData: Partial<Patient>) => Promise<{ success: boolean; message: string; patient: Patient; }>'.
  Type 'Promise<{ success: true; message: string; patient: { id?: string; identification: PatientIdentification | { id: string; mrn: string; fmp: string; ssn: string; }; demographics: { ...; }; ... 9 more ...; specialProcedures?: string[]; }; }>' is not assignable to type 'Promise<{ success: boolean; message: string; patient: Patient; }>'.
    Type '{ success: true; message: string; patient: { id?: string; identification: PatientIdentification | { id: string; mrn: string; fmp: string; ssn: string; }; demographics: { firstName: string; lastName: string; dateOfBirth: string; gender: string; }; ... 9 more ...; specialProcedures?: string[]; }; }' is not assignable to type '{ success: boolean; message: string; patient: Patient; }'.
      Types of property 'patient' are incompatible.
        Type '{ id?: string; identification: PatientIdentification | { id: string; mrn: string; fmp: string; ssn: string; }; demographics: { firstName: string; lastName: string; dateOfBirth: string; gender: string; }; ... 9 more ...; specialProcedures?: string[]; }' is not assignable to type 'Patient' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
          Property 'id' is optional in type '{ id?: string; identification: PatientIdentification | { id: string; mrn: string; fmp: string; ssn: string; }; demographics: { firstName: string; lastName: string; dateOfBirth: string; gender: string; }; ... 9 more ...; specialProcedures?: string[]; }' but required in type 'Patient'.
    101 |   args: {
    102 |     patient: mockPatient,
  > 103 |     onUpdate: async (patientId, patientData) => {
        |     ^^^^^^^^
    104 |       action('onUpdate')(patientId, patientData);
    105 |       return {
    106 |         success: true,
ERROR in src/components/patient/PatientManagement.stories.tsx:127:5
TS2322: Type '{ identification: { id: string; mrn: string; fmp: string; ssn: string; }; demographics: { firstName: string; lastName: string; dateOfBirth: string; gender: string; }; bloodProfile: { abo: string; rh: string; phenotype: { ...; }; antibodies: string[]; }; ... 6 more ...; updatedBy: string; }' is not assignable to type 'Patient'.
    125 | export const EditingPatient: Story = {
    126 |   args: {
  > 127 |     patient: mockPatient,
        |     ^^^^^^^
    128 |     onUpdate: async (patientId, patientData) => {
    129 |       action('onUpdate')(patientId, patientData);
    130 |       return {
ERROR in src/components/patient/PatientManagement.stories.tsx:128:5
TS2322: Type '(patientId: string, patientData: Partial<Patient>) => Promise<{ success: true; message: string; patient: { id?: string; identification: PatientIdentification | { ...; }; ... 10 more ...; specialProcedures?: string[]; }; }>' is not assignable to type '(patientId: string, patientData: Partial<Patient>) => Promise<{ success: boolean; message: string; patient: Patient; }>'.
  Type 'Promise<{ success: true; message: string; patient: { id?: string; identification: PatientIdentification | { id: string; mrn: string; fmp: string; ssn: string; }; demographics: { ...; }; ... 9 more ...; specialProcedures?: string[]; }; }>' is not assignable to type 'Promise<{ success: boolean; message: string; patient: Patient; }>'.
    Type '{ success: true; message: string; patient: { id?: string; identification: PatientIdentification | { id: string; mrn: string; fmp: string; ssn: string; }; demographics: { firstName: string; lastName: string; dateOfBirth: string; gender: string; }; ... 9 more ...; specialProcedures?: string[]; }; }' is not assignable to type '{ success: boolean; message: string; patient: Patient; }'.
      Types of property 'patient' are incompatible.
        Type '{ id?: string; identification: PatientIdentification | { id: string; mrn: string; fmp: string; ssn: string; }; demographics: { firstName: string; lastName: string; dateOfBirth: string; gender: string; }; ... 9 more ...; specialProcedures?: string[]; }' is not assignable to type 'Patient' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
          Property 'id' is optional in type '{ id?: string; identification: PatientIdentification | { id: string; mrn: string; fmp: string; ssn: string; }; demographics: { firstName: string; lastName: string; dateOfBirth: string; gender: string; }; ... 9 more ...; specialProcedures?: string[]; }' but required in type 'Patient'.
    126 |   args: {
    127 |     patient: mockPatient,
  > 128 |     onUpdate: async (patientId, patientData) => {
        |     ^^^^^^^^
    129 |       action('onUpdate')(patientId, patientData);
    130 |       return {
    131 |         success: true,
ERROR in src/components/patient/PatientManagement.stories.tsx:156:5
TS2322: Type '{ identification: { id: string; mrn: string; fmp: string; ssn: string; }; demographics: { firstName: string; lastName: string; dateOfBirth: string; gender: string; }; bloodProfile: { abo: string; rh: string; phenotype: { ...; }; antibodies: string[]; }; ... 6 more ...; updatedBy: string; }' is not assignable to type 'Patient'.
    154 | export const DeletingPatient: Story = {
    155 |   args: {
  > 156 |     patient: mockPatient,
        |     ^^^^^^^
    157 |     onDelete: async (patientId) => {
    158 |       action('onDelete')(patientId);
    159 |       await new Promise(resolve => setTimeout(resolve, 1000));
ERROR in src/components/patient/PatientManagement.stories.tsx:198:7
TS2741: Property 'procedures' is missing in type '{ allergies: string[]; conditions: string[]; medications: string[]; surgeries: string[]; }' but required in type 'MedicalHistory'.
    196 |         },
    197 |       },
  > 198 |       medicalHistory: {
        |       ^^^^^^^^^^^^^^
    199 |         allergies: ['Penicillin', 'Sulfa'],
    200 |         conditions: ['Hypertension', 'Diabetes'],
    201 |         medications: ['Metformin', 'Lisinopril'],
ERROR in src/components/patient/PatientManagement.stories.tsx:204:18
TS2322: Type 'string' is not assignable to type 'Comment'.
    202 |         surgeries: ['Appendectomy'],
    203 |       },
  > 204 |       comments: ['High-risk patient', 'Requires special blood products'],
        |                  ^^^^^^^^^^^^^^^^^^^
    205 |       notes: ['Previous transfusion reaction', 'Multiple antibodies present'],
    206 |     },
    207 |   },
ERROR in src/components/patient/PatientManagement.stories.tsx:204:39
TS2322: Type 'string' is not assignable to type 'Comment'.
    202 |         surgeries: ['Appendectomy'],
    203 |       },
  > 204 |       comments: ['High-risk patient', 'Requires special blood products'],
        |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    205 |       notes: ['Previous transfusion reaction', 'Multiple antibodies present'],
    206 |     },
    207 |   },
ERROR in src/components/patient/PatientManagement.stories.tsx:205:15
TS2322: Type 'string' is not assignable to type 'Note'.
    203 |       },
    204 |       comments: ['High-risk patient', 'Requires special blood products'],
  > 205 |       notes: ['Previous transfusion reaction', 'Multiple antibodies present'],
        |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    206 |     },
    207 |   },
    208 | }; 
ERROR in src/components/patient/PatientManagement.stories.tsx:205:48
TS2322: Type 'string' is not assignable to type 'Note'.
    203 |       },
    204 |       comments: ['High-risk patient', 'Requires special blood products'],
  > 205 |       notes: ['Previous transfusion reaction', 'Multiple antibodies present'],
        |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    206 |     },
    207 |   },
    208 | }; 
ERROR in src/components/patient/PatientManagement.tsx:150:16
TS2375: Type '{ patient: Patient; onUpdate: ((patientId: string, patientData: Partial<Patient>) => Promise<{ success: boolean; message: string; patient: Patient; }>) | undefined; onDelete: ((patientId: string) => Promise<...>) | undefined; }' is not assignable to type 'PatientViewProps' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
  Types of property 'onUpdate' are incompatible.
    Type '((patientId: string, patientData: Partial<Patient>) => Promise<{ success: boolean; message: string; patient: Patient; }>) | undefined' is not assignable to type '(patientId: string, patientData: Partial<Patient>) => Promise<{ success: boolean; message: string; patient: Patient; }>'.
      Type 'undefined' is not assignable to type '(patientId: string, patientData: Partial<Patient>) => Promise<{ success: boolean; message: string; patient: Patient; }>'.
    148 |           <div className="patient-content">
    149 |             {patient ? (
  > 150 |               <PatientView
        |                ^^^^^^^^^^^
    151 |                 patient={patient}
    152 |                 onUpdate={onUpdate}
    153 |                 onDelete={onDelete}
ERROR in src/components/patient/PatientSearch.stories.tsx:94:5
TS2322: Type '(query: string) => Promise<{ patients: { identification: { id: string; mrn: string; }; demographics: { firstName: string; lastName: string; dateOfBirth: string; gender: string; }; bloodProfile: { abo: string; rh: string; phenotype: { ...; }; antibodies: never[]; }; medicalHistory: { ...; }; comments: never[]; notes:...' is not assignable to type '(query: string) => Promise<{ patients: Patient[]; total: number; }>'.
  Type 'Promise<{ patients: { identification: { id: string; mrn: string; }; demographics: { firstName: string; lastName: string; dateOfBirth: string; gender: string; }; bloodProfile: { abo: string; rh: string; phenotype: { ...; }; antibodies: never[]; }; medicalHistory: { ...; }; comments: never[]; notes: never[]; }[]; tota...' is not assignable to type 'Promise<{ patients: Patient[]; total: number; }>'.
    Type '{ patients: { identification: { id: string; mrn: string; }; demographics: { firstName: string; lastName: string; dateOfBirth: string; gender: string; }; bloodProfile: { abo: string; rh: string; phenotype: { ...; }; antibodies: never[]; }; medicalHistory: { ...; }; comments: never[]; notes: never[]; }[]; total: numbe...' is not assignable to type '{ patients: Patient[]; total: number; }'.
      Types of property 'patients' are incompatible.
        Type '{ identification: { id: string; mrn: string; }; demographics: { firstName: string; lastName: string; dateOfBirth: string; gender: string; }; bloodProfile: { abo: string; rh: string; phenotype: { rh: {}; kell: {}; duffy: {}; kidd: {}; mns: {}; }; antibodies: never[]; }; medicalHistory: { ...; }; comments: never[]; no...' is not assignable to type 'Patient[]'.
          Type '{ identification: { id: string; mrn: string; }; demographics: { firstName: string; lastName: string; dateOfBirth: string; gender: string; }; bloodProfile: { abo: string; rh: string; phenotype: { rh: {}; kell: {}; duffy: {}; kidd: {}; mns: {}; }; antibodies: never[]; }; medicalHistory: { ...; }; comments: never[]; no...' is missing the following properties from type 'Patient': id, createdAt, updatedAt, createdBy, updatedBy
    92 | export const WithResults: Story = {
    93 |   args: {
  > 94 |     onSearch: async (query) => {
       |     ^^^^^^^^
    95 |       action('onSearch')(query);
    96 |       return { patients: mockPatients, total: mockPatients.length };
    97 |     },
ERROR in src/components/patient/ReportManagement.tsx:101:28
TS2532: Object is possibly 'undefined'.
     99 |           {report.attachments && report.attachments.length > 0 && (
    100 |             <p className="text-sm text-gray-600">
  > 101 |               Attachment: {report.attachments[0].name}
        |                            ^^^^^^^^^^^^^^^^^^^^^
    102 |             </p>
    103 |           )}
    104 |         </div>
ERROR in src/components/patient/ReportManagement.tsx:218:16
TS2375: Type '{ key: string; report: Report; onDelete: ((reportId: string) => Promise<{ success: boolean; message: string; }>) | undefined; onView: ((reportId: string) => void) | undefined; }' is not assignable to type 'ReportItemProps' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
  Types of property 'onDelete' are incompatible.
    Type '((reportId: string) => Promise<{ success: boolean; message: string; }>) | undefined' is not assignable to type '(reportId: string) => Promise<{ success: boolean; message: string; }>'.
      Type 'undefined' is not assignable to type '(reportId: string) => Promise<{ success: boolean; message: string; }>'.
    216 |           <div className="reports-list space-y-4">
    217 |             {reports.map((report) => (
  > 218 |               <ReportItem
        |                ^^^^^^^^^^
    219 |                 key={report.id}
    220 |                 report={report}
    221 |                 onDelete={onDelete}
ERROR in src/components/patients/AntibodyInput.stories.tsx:143:27
TS2345: Argument of type 'HTMLElement | undefined' is not assignable to parameter of type 'Element'.
  Type 'undefined' is not assignable to type 'Element'.
    141 |     // Find and click the delete button on the first chip
    142 |     const deleteButtons = canvas.getAllByRole('button', { name: /delete/i });
  > 143 |     await userEvent.click(deleteButtons[0]);
        |                           ^^^^^^^^^^^^^^^^
    144 |     
    145 |     // Verify the chip is removed
    146 |     const remainingChips = canvas.getAllByRole('button', { name: /delete/i });
ERROR in src/components/patients/AntibodyInput.tsx:67:22
TS2375: Type '{ variant: "outlined"; placeholder: string; helperText: string; fullWidth: true; id: string; disabled: boolean; size: "small" | undefined; InputLabelProps: Omit<HTMLAttributes<HTMLLabelElement>, "color">; InputProps: { ...; }; inputProps: InputHTMLAttributes<...> & { ...; }; }' is not assignable to type 'Omit<FilledTextFieldProps | StandardTextFieldProps | OutlinedTextFieldProps, "variant">' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
  Types of property 'size' are incompatible.
    Type '"small" | undefined' is not assignable to type '"small" | "medium"'.
      Type 'undefined' is not assignable to type '"small" | "medium"'.
    65 |                 }
    66 |                 renderInput={(params) => (
  > 67 |                     <TextField
       |                      ^^^^^^^^^
    68 |                         {...params}
    69 |                         variant="outlined"
    70 |                         placeholder={disabled ? '' : 'Type to add antibodies...'}
ERROR in src/components/patients/AntibodyInput.tsx:75:17
TS2322: Type '{ multiple: true; freeSolo: true; disabled: boolean; value: string[]; onChange: (_: SyntheticEvent<Element, Event>, newValue: string[]) => void; inputValue: string; ... 5 more ...; getOptionLabel: (option: string) => string; }' is not assignable to type 'IntrinsicAttributes & AutocompleteProps<string, true, false, true, "div">'.
  Property 'createFilterOptions' does not exist on type 'IntrinsicAttributes & AutocompleteProps<string, true, false, true, "div">'. Did you mean 'filterOptions'?
    73 |                     />
    74 |                 )}
  > 75 |                 createFilterOptions={(options, params) => {
       |                 ^^^^^^^^^^^^^^^^^^^
    76 |                     const filtered = options.filter(option =>
    77 |                         option.toLowerCase().includes(params.inputValue.toLowerCase())
    78 |                     );
ERROR in src/components/patients/AntibodyInput.tsx:75:39
TS7006: Parameter 'options' implicitly has an 'any' type.
    73 |                     />
    74 |                 )}
  > 75 |                 createFilterOptions={(options, params) => {
       |                                       ^^^^^^^
    76 |                     const filtered = options.filter(option =>
    77 |                         option.toLowerCase().includes(params.inputValue.toLowerCase())
    78 |                     );
ERROR in src/components/patients/AntibodyInput.tsx:75:48
TS7006: Parameter 'params' implicitly has an 'any' type.
    73 |                     />
    74 |                 )}
  > 75 |                 createFilterOptions={(options, params) => {
       |                                                ^^^^^^
    76 |                     const filtered = options.filter(option =>
    77 |                         option.toLowerCase().includes(params.inputValue.toLowerCase())
    78 |                     );
ERROR in src/components/patients/AntibodyInput.tsx:76:53
TS7006: Parameter 'option' implicitly has an 'any' type.
    74 |                 )}
    75 |                 createFilterOptions={(options, params) => {
  > 76 |                     const filtered = options.filter(option =>
       |                                                     ^^^^^^
    77 |                         option.toLowerCase().includes(params.inputValue.toLowerCase())
    78 |                     );
    79 |                     
ERROR in src/components/patients/PatientCautionCardList.stories.tsx:200:27
TS2345: Argument of type 'HTMLElement | undefined' is not assignable to parameter of type 'Element'.
  Type 'undefined' is not assignable to type 'Element'.
    198 |     // Click delete button
    199 |     const deleteButton = canvas.getAllByTitle('Delete card')[0];
  > 200 |     await userEvent.click(deleteButton);
        |                           ^^^^^^^^^^^^
    201 |     
    202 |     // Verify confirmation modal appears
    203 |     const modal = await canvas.findByRole('dialog');
ERROR in src/components/patients/PatientCautionCardList.tsx:22:8
TS2307: Cannot find module '@mui/icons-material' or its corresponding type declarations.
    20 |     Visibility as ViewIcon,
    21 |     CheckCircle as CheckCircleIcon
  > 22 | } from '@mui/icons-material';
       |        ^^^^^^^^^^^^^^^^^^^^^
    23 | import { usePatientCautionCards, useDeleteCautionCard, useReviewCautionCard } from '../../hooks/useCautionCards';
    24 | import { ConfirmationModal } from '../common/ConfirmationModal';
    25 | import { LoadingSpinner } from '../common/LoadingSpinner';
ERROR in src/components/patients/PatientCautionCardList.tsx:26:30
TS2307: Cannot find module '../common/ErrorMessage' or its corresponding type declarations.
    24 | import { ConfirmationModal } from '../common/ConfirmationModal';
    25 | import { LoadingSpinner } from '../common/LoadingSpinner';
  > 26 | import { ErrorMessage } from '../common/ErrorMessage';
       |                              ^^^^^^^^^^^^^^^^^^^^^^^^
    27 |
    28 | interface PatientCautionCardListProps {
    29 |     patientId: string;
ERROR in src/components/patients/PatientCautionCardList.tsx:47:39
TS2345: Argument of type '{ id: string; }' is not assignable to parameter of type 'DeleteCardParams'.
  Property 'updatedBy' is missing in type '{ id: string; }' but required in type 'DeleteCardParams'.
    45 |     const handleDeleteConfirm = () => {
    46 |         if (cardToDelete) {
  > 47 |             deleteCardMutation.mutate({ id: cardToDelete }, {
       |                                       ^^^^^^^^^^^^^^^^^^^^
    48 |                 onSuccess: () => {
    49 |                     setShowDeleteModal(false);
    50 |                     setCardToDelete(null);
ERROR in src/components/patients/PatientCautionCardList.tsx:58:37
TS2345: Argument of type '{ cardId: string; }' is not assignable to parameter of type 'ReviewCardParams'.
  Object literal may only specify known properties, and 'cardId' does not exist in type 'ReviewCardParams'.
    56 |
    57 |     const handleReviewClick = (cardId: string) => {
  > 58 |         reviewCardMutation.mutate({ cardId }, {
       |                                     ^^^^^^
    59 |             onSuccess: () => refetch()
    60 |         });
    61 |     };
ERROR in src/components/patients/PatientCautionCardList.tsx:103:45
TS7006: Parameter 'card' implicitly has an 'any' type.
    101 |                             </TableHead>
    102 |                             <TableBody>
  > 103 |                                 {cards.map((card) => (
        |                                             ^^^^
    104 |                                     <TableRow key={card.id}>
    105 |                                         <TableCell>{card.file_name || card.id}</TableCell>
    106 |                                         <TableCell>{card.blood_type || 'N/A'}</TableCell>
ERROR in src/components/patients/PatientCautionCardList.tsx:138:95
TS2339: Property 'isLoading' does not exist on type 'UseMutationResult<CautionCard, Error, ReviewCardParams, unknown>'.
  Property 'isLoading' does not exist on type 'Override<MutationObserverIdleResult<CautionCard, Error, ReviewCardParams, unknown>, { mutate: UseMutateFunction<CautionCard, Error, ReviewCardParams, unknown>; }> & { ...; }'.
    136 |                                             <IconButton
    137 |                                                 onClick={() => handleReviewClick(card.id)}
  > 138 |                                                 disabled={card.reviewed || reviewCardMutation.isLoading}
        |                                                                                               ^^^^^^^^^
    139 |                                                 title="Mark as reviewed"
    140 |                                                 size="small"
    141 |                                             >
ERROR in src/components/patients/PatientCautionCardList.tsx:146:78
TS2339: Property 'isLoading' does not exist on type 'UseMutationResult<void, Error, DeleteCardParams, unknown>'.
  Property 'isLoading' does not exist on type 'Override<MutationObserverIdleResult<void, Error, DeleteCardParams, unknown>, { mutate: UseMutateFunction<void, Error, DeleteCardParams, unknown>; }> & { ...; }'.
    144 |                                             <IconButton
    145 |                                                 onClick={() => handleDeleteClick(card.id)}
  > 146 |                                                 disabled={deleteCardMutation.isLoading}
        |                                                                              ^^^^^^^^^
    147 |                                                 title="Delete card"
    148 |                                                 size="small"
    149 |                                                 color="error"
ERROR in src/components/patients/PatientCautionCardList.tsx:164:17
TS2322: Type '{ isOpen: boolean; onClose: () => void; onConfirm: () => void; title: string; message: string; confirmButtonText: string; isLoading: any; }' is not assignable to type 'IntrinsicAttributes & ConfirmationModalProps'.
  Property 'onClose' does not exist on type 'IntrinsicAttributes & ConfirmationModalProps'.
    162 |             <ConfirmationModal
    163 |                 isOpen={showDeleteModal}
  > 164 |                 onClose={() => setShowDeleteModal(false)}
        |                 ^^^^^^^
    165 |                 onConfirm={handleDeleteConfirm}
    166 |                 title="Delete Caution Card"
    167 |                 message="Are you sure you want to delete this caution card? This action cannot be undone."
ERROR in src/components/patients/PatientCautionCardList.tsx:169:47
TS2339: Property 'isLoading' does not exist on type 'UseMutationResult<void, Error, DeleteCardParams, unknown>'.
  Property 'isLoading' does not exist on type 'Override<MutationObserverIdleResult<void, Error, DeleteCardParams, unknown>, { mutate: UseMutateFunction<void, Error, DeleteCardParams, unknown>; }> & { ...; }'.
    167 |                 message="Are you sure you want to delete this caution card? This action cannot be undone."
    168 |                 confirmButtonText="Delete"
  > 169 |                 isLoading={deleteCardMutation.isLoading}
        |                                               ^^^^^^^^^
    170 |             />
    171 |         </Box>
    172 |     );
ERROR in src/components/patients/PatientListItem.tsx:3:24
TS2307: Cannot find module 'date-fns' or its corresponding type declarations.
    1 | import React, { memo } from 'react';
    2 | import { useNavigate } from 'react-router-dom';
  > 3 | import { format } from 'date-fns';
      |                        ^^^^^^^^^^
    4 | import { Patient } from '../../types/patient';
    5 |
    6 | interface PatientListItemProps {
ERROR in src/components/patients/PatientListItem.tsx:30:18
TS2339: Property 'firstName' does not exist on type 'Patient'.
    28 |     >
    29 |       <div className="text-sm font-medium text-gray-900">
  > 30 |         {patient.firstName} {patient.lastName}
       |                  ^^^^^^^^^
    31 |       </div>
    32 |       <div className="text-sm text-gray-500">{patient.mrn}</div>
    33 |       <div className="text-sm text-gray-500">
ERROR in src/components/patients/PatientListItem.tsx:30:38
TS2339: Property 'lastName' does not exist on type 'Patient'.
    28 |     >
    29 |       <div className="text-sm font-medium text-gray-900">
  > 30 |         {patient.firstName} {patient.lastName}
       |                                      ^^^^^^^^
    31 |       </div>
    32 |       <div className="text-sm text-gray-500">{patient.mrn}</div>
    33 |       <div className="text-sm text-gray-500">
ERROR in src/components/patients/PatientListItem.tsx:32:55
TS2339: Property 'mrn' does not exist on type 'Patient'.
    30 |         {patient.firstName} {patient.lastName}
    31 |       </div>
  > 32 |       <div className="text-sm text-gray-500">{patient.mrn}</div>
       |                                                       ^^^
    33 |       <div className="text-sm text-gray-500">
    34 |         {format(new Date(patient.dateOfBirth), 'MM/dd/yyyy')}
    35 |       </div>
ERROR in src/components/patients/PatientListItem.tsx:34:34
TS2339: Property 'dateOfBirth' does not exist on type 'Patient'.
    32 |       <div className="text-sm text-gray-500">{patient.mrn}</div>
    33 |       <div className="text-sm text-gray-500">
  > 34 |         {format(new Date(patient.dateOfBirth), 'MM/dd/yyyy')}
       |                                  ^^^^^^^^^^^
    35 |       </div>
    36 |       <div className="text-sm text-gray-500">{patient.bloodType}</div>
    37 |       <div className="text-sm text-gray-500">
ERROR in src/components/patients/PatientListItem.tsx:36:55
TS2339: Property 'bloodType' does not exist on type 'Patient'.
    34 |         {format(new Date(patient.dateOfBirth), 'MM/dd/yyyy')}
    35 |       </div>
  > 36 |       <div className="text-sm text-gray-500">{patient.bloodType}</div>
       |                                                       ^^^^^^^^^
    37 |       <div className="text-sm text-gray-500">
    38 |         <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
    39 |           patient.status === 'Active' ? 'bg-green-100 text-green-800' :
ERROR in src/components/patients/PatientListItem.tsx:39:19
TS2339: Property 'status' does not exist on type 'Patient'.
    37 |       <div className="text-sm text-gray-500">
    38 |         <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
  > 39 |           patient.status === 'Active' ? 'bg-green-100 text-green-800' :
       |                   ^^^^^^
    40 |           patient.status === 'Inactive' ? 'bg-red-100 text-red-800' :
    41 |           'bg-yellow-100 text-yellow-800'
    42 |         }`}>
ERROR in src/components/patients/PatientListItem.tsx:40:19
TS2339: Property 'status' does not exist on type 'Patient'.
    38 |         <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
    39 |           patient.status === 'Active' ? 'bg-green-100 text-green-800' :
  > 40 |           patient.status === 'Inactive' ? 'bg-red-100 text-red-800' :
       |                   ^^^^^^
    41 |           'bg-yellow-100 text-yellow-800'
    42 |         }`}>
    43 |           {patient.status}
ERROR in src/components/patients/PatientListItem.tsx:43:20
TS2339: Property 'status' does not exist on type 'Patient'.
    41 |           'bg-yellow-100 text-yellow-800'
    42 |         }`}>
  > 43 |           {patient.status}
       |                    ^^^^^^
    44 |         </span>
    45 |       </div>
    46 |       <div className="text-right text-sm font-medium">
ERROR in src/components/patients/PatientReportsList.stories.tsx:225:27
TS2345: Argument of type 'HTMLElement | undefined' is not assignable to parameter of type 'Element'.
  Type 'undefined' is not assignable to type 'Element'.
    223 |     // Find and click delete button for first report
    224 |     const deleteButton = canvas.getAllByText(/delete/i)[0];
  > 225 |     await userEvent.click(deleteButton);
        |                           ^^^^^^^^^^^^
    226 |     
    227 |     // Verify confirmation modal appears
    228 |     const confirmationModal = await canvas.findByRole('dialog');
ERROR in src/components/patients/PatientReportsList.tsx:3:24
TS2307: Cannot find module '../../types' or its corresponding type declarations.
    1 | import React, { useState } from 'react';
    2 | import { usePatientReports, useDeleteReport } from '../../hooks/useReports';
  > 3 | import { Report } from '../../types';
      |                        ^^^^^^^^^^^^^
    4 | import Pagination from '../common/Pagination';
    5 | import ConfirmationModal from '../common/ConfirmationModal';
    6 | import ReportUploadModal from '../reports/ReportUploadModal';
ERROR in src/components/patients/PatientReportsList.tsx:8:30
TS2307: Cannot find module '../common/ErrorMessage' or its corresponding type declarations.
     6 | import ReportUploadModal from '../reports/ReportUploadModal';
     7 | import { ReportsListSkeleton } from '../common/LoadingSkeleton';
  >  8 | import { ErrorMessage } from '../common/ErrorMessage';
       |                              ^^^^^^^^^^^^^^^^^^^^^^^^
     9 |
    10 | interface PatientReportsListProps {
    11 |     patientId: string;
ERROR in src/components/patients/PatientReportsList.tsx:60:39
TS2339: Property 'pagination' does not exist on type 'NonNullable<TQueryFnData>'.
    58 |     };
    59 |
  > 60 |     const totalReports = reportsData?.pagination?.totalItems ?? 0;
       |                                       ^^^^^^^^^^
    61 |     const totalPages = reportsData?.pagination?.totalPages ?? 1;
    62 |
    63 |     if (isLoading) {
ERROR in src/components/patients/PatientReportsList.tsx:61:37
TS2339: Property 'pagination' does not exist on type 'NonNullable<TQueryFnData>'.
    59 |
    60 |     const totalReports = reportsData?.pagination?.totalItems ?? 0;
  > 61 |     const totalPages = reportsData?.pagination?.totalPages ?? 1;
       |                                     ^^^^^^^^^^
    62 |
    63 |     if (isLoading) {
    64 |         return <ReportsListSkeleton />;
ERROR in src/components/patients/PatientReportsList.tsx:97:17
TS2322: Type '{ isOpen: boolean; title: string; message: string; onConfirm: () => void; onCancel: () => void; confirmText: string; cancelText: string; isDestructive: boolean; isLoading: any; }' is not assignable to type 'IntrinsicAttributes & ConfirmationModalProps'.
  Property 'isDestructive' does not exist on type 'IntrinsicAttributes & ConfirmationModalProps'.
     95 |                 confirmText="Delete"
     96 |                 cancelText="Cancel"
  >  97 |                 isDestructive={true}
        |                 ^^^^^^^^^^^^^
     98 |                 isLoading={deleteReportMutation.isLoading}
     99 |             />
    100 |
ERROR in src/components/patients/PatientReportsList.tsx:98:49
TS2339: Property 'isLoading' does not exist on type 'UseMutationResult<void, Error, string, unknown>'.
  Property 'isLoading' does not exist on type 'Override<MutationObserverIdleResult<void, Error, string, unknown>, { mutate: UseMutateFunction<void, Error, string, unknown>; }> & { ...; }'.
     96 |                 cancelText="Cancel"
     97 |                 isDestructive={true}
  >  98 |                 isLoading={deleteReportMutation.isLoading}
        |                                                 ^^^^^^^^^
     99 |             />
    100 |
    101 |             {isFetching && !isLoading && <p>Updating...</p>}
ERROR in src/components/patients/PatientReportsList.tsx:105:35
TS2339: Property 'data' does not exist on type 'NonNullable<TQueryFnData>'.
    103 |             {!isLoading && !error && (
    104 |                 <>
  > 105 |                     {reportsData?.data && reportsData.data.length > 0 ? (
        |                                   ^^^^
    106 |                         <div className="overflow-x-auto shadow border-b border-gray-200 sm:rounded-lg mb-4">
    107 |                             <table className="min-w-full divide-y divide-gray-200">
    108 |                                 <thead className="bg-gray-50">
ERROR in src/components/patients/PatientReportsList.tsx:105:55
TS2339: Property 'data' does not exist on type 'NonNullable<TQueryFnData>'.
    103 |             {!isLoading && !error && (
    104 |                 <>
  > 105 |                     {reportsData?.data && reportsData.data.length > 0 ? (
        |                                                       ^^^^
    106 |                         <div className="overflow-x-auto shadow border-b border-gray-200 sm:rounded-lg mb-4">
    107 |                             <table className="min-w-full divide-y divide-gray-200">
    108 |                                 <thead className="bg-gray-50">
ERROR in src/components/patients/PatientReportsList.tsx:119:50
TS2339: Property 'data' does not exist on type 'NonNullable<TQueryFnData>'.
    117 |                                 </thead>
    118 |                                 <tbody className="bg-white divide-y divide-gray-200">
  > 119 |                                     {reportsData.data.map((report) => (
        |                                                  ^^^^
    120 |                                         <tr key={report.id}>
    121 |                                             <td className="px-4 py-2 whitespace-nowrap text-sm font-medium text-gray-900">{report.id}</td>
    122 |                                             <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-500">{report.type ?? 'N/A'}</td>
ERROR in src/components/patients/PatientReportsList.tsx:119:60
TS7006: Parameter 'report' implicitly has an 'any' type.
    117 |                                 </thead>
    118 |                                 <tbody className="bg-white divide-y divide-gray-200">
  > 119 |                                     {reportsData.data.map((report) => (
        |                                                            ^^^^^^
    120 |                                         <tr key={report.id}>
    121 |                                             <td className="px-4 py-2 whitespace-nowrap text-sm font-medium text-gray-900">{report.id}</td>
    122 |                                             <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-500">{report.type ?? 'N/A'}</td>
ERROR in src/components/patients/PatientReportsList.tsx:131:84
TS2339: Property 'isLoading' does not exist on type 'UseMutationResult<void, Error, string, unknown>'.
  Property 'isLoading' does not exist on type 'Override<MutationObserverIdleResult<void, Error, string, unknown>, { mutate: UseMutateFunction<void, Error, string, unknown>; }> & { ...; }'.
    129 |                                                     onClick={() => openDeleteModal(report)}
    130 |                                                     className="text-red-600 hover:text-red-900"
  > 131 |                                                     disabled={deleteReportMutation.isLoading}
        |                                                                                    ^^^^^^^^^
    132 |                                                 >
    133 |                                                     Delete
    134 |                                                 </button>
ERROR in src/components/patients/PhenotypeInputGrid.tsx:42:21
TS2769: No overload matches this call.
  Overload 1 of 2, '(props: { component: ElementType<any, keyof IntrinsicElements>; } & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<...>): Element | null', gave the following error.
    Property 'component' is missing in type '{ children: Element; item: true; xs: number; sm: number; md: number; key: string; }' but required in type '{ component: ElementType<any, keyof IntrinsicElements>; }'.
  Overload 2 of 2, '(props: DefaultComponentProps<GridTypeMap<{}, "div">>): Element | null', gave the following error.
    Type '{ children: Element; item: true; xs: number; sm: number; md: number; key: string; }' is not assignable to type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, "sx" | ... 1 more ... | keyof GridBaseProps>'.
      Property 'item' does not exist on type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, "sx" | ... 1 more ... | keyof GridBaseProps>'.
    40 |             <Grid container spacing={3}>
    41 |                 {Object.entries(PHENOTYPE_GROUPS).map(([groupName, antigens]) => (
  > 42 |                     <Grid item xs={12} sm={6} md={4} key={groupName}>
       |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    43 |                         <Paper elevation={1} sx={{ p: 2 }}>
    44 |                             <Typography variant="subtitle2" color="primary" gutterBottom>
    45 |                                 {groupName}
ERROR in src/components/patients/VirtualizedPatientList.tsx:27:11
TS2322: Type 'Patient | undefined' is not assignable to type 'Patient'.
  Type 'undefined' is not assignable to type 'Patient'.
    25 |       <div style={style}>
    26 |         <PatientListItem
  > 27 |           patient={patient}
       |           ^^^^^^^
    28 |           onDelete={onDelete}
    29 |           isDeleting={isDeleting && deletingId === patient.id}
    30 |         />
ERROR in src/components/patients/VirtualizedPatientList.tsx:29:52
TS18048: 'patient' is possibly 'undefined'.
    27 |           patient={patient}
    28 |           onDelete={onDelete}
  > 29 |           isDeleting={isDeleting && deletingId === patient.id}
       |                                                    ^^^^^^^
    30 |         />
    31 |       </div>
    32 |     );
ERROR in src/components/patients/VirtualizedPatientList.tsx:38:13
TS7031: Binding element 'height' implicitly has an 'any' type.
    36 |     <div className="flex-1 min-h-0" style={{ height: '70vh' }}>
    37 |       <AutoSizer>
  > 38 |         {({ height, width }) => (
       |             ^^^^^^
    39 |           <List
    40 |             className="bg-white shadow rounded-lg overflow-hidden"
    41 |             height={height}
ERROR in src/components/patients/VirtualizedPatientList.tsx:38:21
TS7031: Binding element 'width' implicitly has an 'any' type.
    36 |     <div className="flex-1 min-h-0" style={{ height: '70vh' }}>
    37 |       <AutoSizer>
  > 38 |         {({ height, width }) => (
       |                     ^^^^^
    39 |           <List
    40 |             className="bg-white shadow rounded-lg overflow-hidden"
    41 |             height={height}
ERROR in src/components/PhenotypeDisplay.tsx:25:25
TS2769: No overload matches this call.
  Overload 1 of 2, '(props: { component: ElementType<any, keyof IntrinsicElements>; } & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<...>): Element | null', gave the following error.
    Property 'component' is missing in type '{ children: Element; key: string; item: true; }' but required in type '{ component: ElementType<any, keyof IntrinsicElements>; }'.
  Overload 2 of 2, '(props: DefaultComponentProps<GridTypeMap<{}, "div">>): Element | null', gave the following error.
    Type '{ children: Element; key: string; item: true; }' is not assignable to type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, StandardSystemKeys | ... 1 more ... | keyof GridBaseProps>'.
      Property 'item' does not exist on type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, StandardSystemKeys | ... 1 more ... | keyof GridBaseProps>'.
    23 |                 {Object.entries(phenotypeData).map(([antigen, value]) => (
    24 |                     value && (
  > 25 |                         <Grid key={antigen} item>
       |                         ^^^^^^^^^^^^^^^^^^^^^^^^^
    26 |                             <Typography variant="body2">
    27 |                                 {antigen}: {value ? 'Positive' : 'Negative'}
    28 |                             </Typography>
ERROR in src/components/PhenotypeInputGrid.tsx:17:18
TS2345: Argument of type '{ rh: RhPhenotype; kell: KellPhenotype; duffy: DuffyPhenotype; kidd: KiddPhenotype; mns: MNSPhenotype; } | { ...; }' is not assignable to parameter of type 'BloodPhenotype'.
  Type '{ rh: ""; kell: ""; duffy: ""; kidd: ""; mns: ""; }' is not assignable to type 'BloodPhenotype'.
    Types of property 'rh' are incompatible.
      Type '""' is not assignable to type 'RhPhenotype'.
    15 | }) => {
    16 |     const handleChange = (field: keyof BloodPhenotype) => (event: any) => {
  > 17 |         onChange({
       |                  ^
  > 18 |             ...value,
       | ^^^^^^^^^^^^^^^^^^^^^
  > 19 |             [field]: event.target.value
       | ^^^^^^^^^^^^^^^^^^^^^
  > 20 |         });
       | ^^^^^^^^^^
    21 |     };
    22 |
    23 |     return (
ERROR in src/components/PhenotypeInputGrid.tsx:26:17
TS2769: No overload matches this call.
  Overload 1 of 2, '(props: { component: ElementType<any, keyof IntrinsicElements>; } & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<...>): Element | null', gave the following error.
    Property 'component' is missing in type '{ children: Element; key: string; item: true; xs: number; sm: number; md: number; }' but required in type '{ component: ElementType<any, keyof IntrinsicElements>; }'.
  Overload 2 of 2, '(props: DefaultComponentProps<GridTypeMap<{}, "div">>): Element | null', gave the following error.
    Type '{ children: Element; key: string; item: true; xs: number; sm: number; md: number; }' is not assignable to type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, StandardSystemKeys | ... 1 more ... | keyof GridBaseProps>'.
      Property 'item' does not exist on type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, StandardSystemKeys | ... 1 more ... | keyof GridBaseProps>'.
    24 |         <Grid container spacing={2}>
    25 |             {Object.entries(value).map(([field, currentValue]) => (
  > 26 |                 <Grid key={field} item xs={12} sm={6} md={4}>
       |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    27 |                     <FormControl fullWidth>
    28 |                         <InputLabel id={`${field}-label`}>{field.toUpperCase()}</InputLabel>
    29 |                         <Select
ERROR in src/components/reports/ReportAttachments.tsx:46:12
TS2375: Type '{ children: Element; key: number; actions: Element[] | undefined; }' is not assignable to type 'ListItemProps' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
  Types of property 'actions' are incompatible.
    Type 'Element[] | undefined' is not assignable to type 'ReactNode[]'.
      Type 'undefined' is not assignable to type 'ReactNode[]'.
    44 |         dataSource={attachments}
    45 |         renderItem={(attachment) => (
  > 46 |           <List.Item
       |            ^^^^^^^^^
    47 |             key={attachment.id}
    48 |             actions={!readOnly ? [
    49 |               <Button 
ERROR in src/components/reports/ReportForm.tsx:31:6
TS2375: Type '{ children: Element[]; form: FormInstance<any>; layout: "vertical"; initialValues: Partial<Report> | undefined; onFinish: (values: any) => void; className: string; }' is not assignable to type 'FormProps<any>' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
  Types of property 'initialValues' are incompatible.
    Type 'Partial<Report> | undefined' is not assignable to type 'Store'.
      Type 'undefined' is not assignable to type 'Store'.
    29 |
    30 |   return (
  > 31 |     <Form
       |      ^^^^
    32 |       form={form}
    33 |       layout="vertical"
    34 |       initialValues={initialValues}
ERROR in src/components/reports/ReportModal.tsx:32:8
TS2375: Type '{ initialValues: Partial<Report> | undefined; onSubmit: (values: Partial<Report>) => void; onCancel: () => void; loading: boolean; }' is not assignable to type 'ReportFormProps' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
  Types of property 'initialValues' are incompatible.
    Type 'Partial<Report> | undefined' is not assignable to type 'Partial<Report>'.
      Type 'undefined' is not assignable to type 'Partial<Report>'.
    30 |       destroyOnClose
    31 |     >
  > 32 |       <ReportForm
       |        ^^^^^^^^^^
    33 |         initialValues={initialValues}
    34 |         onSubmit={onSubmit}
    35 |         onCancel={onCancel}
ERROR in src/components/reports/ReportUploadModal.tsx:6:8
TS2613: Module '"I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/components/common/Modal"' has no default export. Did you mean to use 'import { Modal } from "I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/components/common/Modal"' instead?
    4 | import { useUploadReport } from '../../hooks/useReports';
    5 | import { useDropzone } from 'react-dropzone';
  > 6 | import Modal from '../common/Modal';
      |        ^^^^^
    7 | import { useMutation, useQueryClient } from '@tanstack/react-query';
    8 | import { uploadService } from '../api/uploadService'; 
    9 | // Assuming Patient type and PatientSearchInput exist and work correctly
ERROR in src/components/reports/ReportUploadModal.tsx:8:31
TS2307: Cannot find module '../api/uploadService' or its corresponding type declarations.
     6 | import Modal from '../common/Modal';
     7 | import { useMutation, useQueryClient } from '@tanstack/react-query';
  >  8 | import { uploadService } from '../api/uploadService'; 
       |                               ^^^^^^^^^^^^^^^^^^^^^^
     9 | // Assuming Patient type and PatientSearchInput exist and work correctly
    10 | import { Patient } from '../types/Patient'; 
    11 | // import PatientSearchInput from '../components/patients/PatientSearchInput'; // Placeholder, implement later
ERROR in src/components/reports/ReportUploadModal.tsx:10:25
TS2307: Cannot find module '../types/Patient' or its corresponding type declarations.
     8 | import { uploadService } from '../api/uploadService'; 
     9 | // Assuming Patient type and PatientSearchInput exist and work correctly
  > 10 | import { Patient } from '../types/Patient'; 
       |                         ^^^^^^^^^^^^^^^^^^
    11 | // import PatientSearchInput from '../components/patients/PatientSearchInput'; // Placeholder, implement later
    12 | import { AuthContext } from '../context/AuthContext'; // To get user info if needed for notifications etc.
    13 |
ERROR in src/components/reports/ReportUploadModal.tsx:12:29
TS2307: Cannot find module '../context/AuthContext' or its corresponding type declarations.
    10 | import { Patient } from '../types/Patient'; 
    11 | // import PatientSearchInput from '../components/patients/PatientSearchInput'; // Placeholder, implement later
  > 12 | import { AuthContext } from '../context/AuthContext'; // To get user info if needed for notifications etc.
       |                             ^^^^^^^^^^^^^^^^^^^^^^^^
    13 |
    14 | // Define Report Types (Example - customize based on actual needs)
    15 | const REPORT_TYPES = [
ERROR in src/components/reports/ReportUploadModal.tsx:39:20
TS2304: Cannot find name 'useContext'.
    37 |   const uploadReportMutation = useUploadReport();
    38 |   const queryClient = useQueryClient();
  > 39 |   const { user } = useContext(AuthContext);
       |                    ^^^^^^^^^^
    40 |
    41 |   const formik = useFormik({
    42 |     initialValues: {
ERROR in src/components/reports/ReportUploadModal.tsx:59:43
TS2559: Type 'string[]' has no properties in common with type 'InvalidateQueryFilters<unknown, Error, unknown, readonly unknown[]>'.
    57 |             formik.resetForm();
    58 |             onClose(); // Close modal on success
  > 59 |             queryClient.invalidateQueries(['reports']);
       |                                           ^^^^^^^^^^^
    60 |             if (values.patientId) {
    61 |               queryClient.invalidateQueries(['patient-reports', values.patientId]);
    62 |             }
ERROR in src/components/reports/ReportUploadModal.tsx:61:45
TS2559: Type 'string[]' has no properties in common with type 'InvalidateQueryFilters<unknown, Error, unknown, readonly unknown[]>'.
    59 |             queryClient.invalidateQueries(['reports']);
    60 |             if (values.patientId) {
  > 61 |               queryClient.invalidateQueries(['patient-reports', values.patientId]);
       |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    62 |             }
    63 |           },
    64 |           onError: (error: any) => {
ERROR in src/components/reports/ReportUploadModal.tsx:192:44
TS2339: Property 'isLoading' does not exist on type 'UseMutationResult<any, Error, { file: File; type: string; patientId?: string | number | null; }, unknown>'.
  Property 'isLoading' does not exist on type 'Override<MutationObserverIdleResult<any, Error, { file: File; type: string; patientId?: string | number | null; }, unknown>, { mutate: UseMutateFunction<any, Error, { ...; }, unknown>; }> & { ...; }'.
    190 |             onClick={onClose}
    191 |             className="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
  > 192 |             disabled={uploadReportMutation.isLoading}
        |                                            ^^^^^^^^^
    193 |           >
    194 |             Cancel
    195 |           </button>
ERROR in src/components/reports/ReportUploadModal.tsx:199:63
TS2339: Property 'isLoading' does not exist on type 'UseMutationResult<any, Error, { file: File; type: string; patientId?: string | number | null; }, unknown>'.
  Property 'isLoading' does not exist on type 'Override<MutationObserverIdleResult<any, Error, { file: File; type: string; patientId?: string | number | null; }, unknown>, { mutate: UseMutateFunction<any, Error, { ...; }, unknown>; }> & { ...; }'.
    197 |             type="submit"
    198 |             className="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50"
  > 199 |             disabled={!formik.isValid || uploadReportMutation.isLoading} // Allow submit if valid, even if not dirty (e.g., prefilled patientId)
        |                                                               ^^^^^^^^^
    200 |           >
    201 |             {uploadReportMutation.isLoading ? 'Uploading...' : 'Upload Report'}
    202 |           </button>
ERROR in src/components/reports/ReportUploadModal.tsx:201:35
TS2339: Property 'isLoading' does not exist on type 'UseMutationResult<any, Error, { file: File; type: string; patientId?: string | number | null; }, unknown>'.
  Property 'isLoading' does not exist on type 'Override<MutationObserverIdleResult<any, Error, { file: File; type: string; patientId?: string | number | null; }, unknown>, { mutate: UseMutateFunction<any, Error, { ...; }, unknown>; }> & { ...; }'.
    199 |             disabled={!formik.isValid || uploadReportMutation.isLoading} // Allow submit if valid, even if not dirty (e.g., prefilled patientId)
    200 |           >
  > 201 |             {uploadReportMutation.isLoading ? 'Uploading...' : 'Upload Report'}
        |                                   ^^^^^^^^^
    202 |           </button>
    203 |         </div>
    204 |       </form>
ERROR in src/components/search/FilterBar.tsx:24:60
TS2345: Argument of type '{ searchTerm: string; bloodType: undefined; dateFrom: undefined; dateTo: undefined; status: undefined; }' is not assignable to parameter of type 'FilterCriteria | (() => FilterCriteria)'.
  Type '{ searchTerm: string; bloodType: undefined; dateFrom: undefined; dateTo: undefined; status: undefined; }' is not assignable to type 'FilterCriteria' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
    Types of property 'bloodType' are incompatible.
      Type 'undefined' is not assignable to type 'string'.
    22 |     className = "" 
    23 | }) => {
  > 24 |     const [filters, setFilters] = useState<FilterCriteria>({
       |                                                            ^
  > 25 |         searchTerm: '',
       | ^^^^^^^^^^^^^^^^^^^^^^^
  > 26 |         bloodType: undefined,
       | ^^^^^^^^^^^^^^^^^^^^^^^
  > 27 |         dateFrom: undefined,
       | ^^^^^^^^^^^^^^^^^^^^^^^
  > 28 |         dateTo: undefined,
       | ^^^^^^^^^^^^^^^^^^^^^^^
  > 29 |         status: undefined
       | ^^^^^^^^^^^^^^^^^^^^^^^
  > 30 |     });
       | ^^^^^^
    31 |
    32 |     const handleSearchChange = (query: string) => {
    33 |         const newFilters = { ...filters, searchTerm: query };
ERROR in src/components/search/FilterBar.tsx:45:15
TS2375: Type '{ searchTerm: string; bloodType: undefined; dateFrom: undefined; dateTo: undefined; status: undefined; }' is not assignable to type 'FilterCriteria' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
  Types of property 'bloodType' are incompatible.
    Type 'undefined' is not assignable to type 'string'.
    43 |
    44 |     const handleReset = () => {
  > 45 |         const resetFilters: FilterCriteria = {
       |               ^^^^^^^^^^^^
    46 |             searchTerm: '',
    47 |             bloodType: undefined,
    48 |             dateFrom: undefined,
ERROR in src/components/search/GlobalSearch.tsx:3:29
TS2307: Cannot find module '../hooks/useDebounce' or its corresponding type declarations.
    1 | import React, { useState, useRef, useEffect } from 'react';
    2 | import { useNavigate } from 'react-router-dom';
  > 3 | import { useDebounce } from '../hooks/useDebounce';
      |                             ^^^^^^^^^^^^^^^^^^^^^^
    4 | import { useGlobalSearch } from '../hooks/useGlobalSearch';
    5 |
    6 | interface SearchResult {
ERROR in src/components/search/GlobalSearch.tsx:4:33
TS2307: Cannot find module '../hooks/useGlobalSearch' or its corresponding type declarations.
    2 | import { useNavigate } from 'react-router-dom';
    3 | import { useDebounce } from '../hooks/useDebounce';
  > 4 | import { useGlobalSearch } from '../hooks/useGlobalSearch';
      |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
    5 |
    6 | interface SearchResult {
    7 |   id: string | number;
ERROR in src/components/search/GlobalSearch.tsx:74:25
TS7006: Parameter 'result' implicitly has an 'any' type.
    72 |     }
    73 |
  > 74 |     return results.map((result) => (
       |                         ^^^^^^
    75 |       <button
    76 |         key={`${result.type}-${result.id}`}
    77 |         className="w-full text-left px-4 py-2 hover:bg-gray-100 focus:bg-gray-100 focus:outline-none"
ERROR in src/components/VirtualizedPatientList.tsx:3:38
TS2307: Cannot find module '@mui/icons-material' or its corresponding type declarations.
    1 | import React from 'react';
    2 | import { List, ListItem, ListItemText, IconButton, CircularProgress } from '@mui/material';
  > 3 | import { Delete as DeleteIcon } from '@mui/icons-material';
      |                                      ^^^^^^^^^^^^^^^^^^^^^
    4 | import { Patient } from '../types/Patient';
    5 |
    6 | export interface VirtualizedPatientListProps {
ERROR in src/config/environment.ts:3:26
TS4111: Property 'REACT_APP_API_BASE_URL' comes from an index signature, so it must be accessed with ['REACT_APP_API_BASE_URL'].
    1 | export const environment = {
    2 |   api: {
  > 3 |     baseUrl: process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000',
      |                          ^^^^^^^^^^^^^^^^^^^^^^
    4 |     websocket: process.env.REACT_APP_WEBSOCKET_URL || 'ws://localhost:5000/ws',
    5 |   },
    6 |   security: {
ERROR in src/config/environment.ts:4:28
TS4111: Property 'REACT_APP_WEBSOCKET_URL' comes from an index signature, so it must be accessed with ['REACT_APP_WEBSOCKET_URL'].
    2 |   api: {
    3 |     baseUrl: process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000',
  > 4 |     websocket: process.env.REACT_APP_WEBSOCKET_URL || 'ws://localhost:5000/ws',
      |                            ^^^^^^^^^^^^^^^^^^^^^^^
    5 |   },
    6 |   security: {
    7 |     maxFileSize: 10 * 1024 * 1024, // 10MB
ERROR in src/context/AuthContext.tsx:123:27
TS2322: Type '{ user: UserProfile | null; isAuthenticated: boolean; isLoading: boolean; login: UseMutateAsyncFunction<AuthResponse, Error, LoginCredentials, unknown>; logout: () => Promise<...>; }' is not assignable to type 'AuthContextType'.
  Types of property 'user' are incompatible.
    Type 'UserProfile | null' is not assignable to type 'User | null'.
      Type 'UserProfile' is missing the following properties from type 'User': name, email
    121 |
    122 |   return (
  > 123 |     <AuthContext.Provider value={value}>
        |                           ^^^^^
    124 |       {children}
    125 |     </AuthContext.Provider>
    126 |   );
ERROR in src/hooks/useCautionCards.ts:5:29
TS2307: Cannot find module '../types' or its corresponding type declarations.
    3 | import { uploadService } from '../api/uploadService';
    4 | import { patientService } from '../api/patientService'; // Required for fetching patient-specific cards
  > 5 | import { CautionCard } from '../types';
      |                             ^^^^^^^^^^
    6 |
    7 | // Define types later based on API or ../types
    8 | // import { CautionCard } from '../types/CautionCard';
ERROR in src/hooks/useCautionCards.ts:36:9
TS2769: No overload matches this call.
  Overload 1 of 3, '(options: DefinedInitialDataOptions<unknown, Error, unknown, readonly ["cautionCards", "list", object]>, queryClient?: QueryClient | undefined): DefinedUseQueryResult<...>', gave the following error.
    Argument of type '{ queryKey: readonly ["cautionCards", "list", object]; queryFn: () => Promise<PaginatedResponse<CautionCard>>; keepPreviousData: boolean; }' is not assignable to parameter of type 'DefinedInitialDataOptions<unknown, Error, unknown, readonly ["cautionCards", "list", object]>'.
      Object literal may only specify known properties, and 'keepPreviousData' does not exist in type 'DefinedInitialDataOptions<unknown, Error, unknown, readonly ["cautionCards", "list", object]>'.
  Overload 2 of 3, '(options: UndefinedInitialDataOptions<PaginatedResponse<CautionCard>, Error, PaginatedResponse<CautionCard>, readonly ["cautionCards", "list", object]>, queryClient?: QueryClient | undefined): UseQueryResult<...>', gave the following error.
    Argument of type '{ queryKey: readonly ["cautionCards", "list", object]; queryFn: () => Promise<PaginatedResponse<CautionCard>>; keepPreviousData: boolean; }' is not assignable to parameter of type 'UndefinedInitialDataOptions<PaginatedResponse<CautionCard>, Error, PaginatedResponse<CautionCard>, readonly ["cautionCards", "list", object]>'.
      Object literal may only specify known properties, and 'keepPreviousData' does not exist in type 'UndefinedInitialDataOptions<PaginatedResponse<CautionCard>, Error, PaginatedResponse<CautionCard>, readonly ["cautionCards", "list", object]>'.
  Overload 3 of 3, '(options: UseQueryOptions<PaginatedResponse<CautionCard>, Error, PaginatedResponse<CautionCard>, readonly ["cautionCards", "list", object]>, queryClient?: QueryClient | undefined): UseQueryResult<PaginatedResponse<CautionCard>, Error>', gave the following error.
    Argument of type '{ queryKey: readonly ["cautionCards", "list", object]; queryFn: () => Promise<PaginatedResponse<CautionCard>>; keepPreviousData: boolean; }' is not assignable to parameter of type 'UseQueryOptions<PaginatedResponse<CautionCard>, Error, PaginatedResponse<CautionCard>, readonly ["cautionCards", "list", object]>'.
      Object literal may only specify known properties, and 'keepPreviousData' does not exist in type 'UseQueryOptions<PaginatedResponse<CautionCard>, Error, PaginatedResponse<CautionCard>, readonly ["cautionCards", "list", object]>'.
    34 |         queryKey: cautionCardKeys.list({ page, limit, ...filters }),
    35 |         queryFn: () => cautionCardService.getCautionCards(page, limit, filters),
  > 36 |         keepPreviousData: true,
       |         ^^^^^^^^^^^^^^^^^^^^^^
    37 |     });
    38 | };
    39 |
ERROR in src/hooks/useCautionCards.ts:45:9
TS2769: No overload matches this call.
  Overload 1 of 3, '(options: DefinedInitialDataOptions<unknown, Error, unknown, readonly ["cautionCards", "orphaned", object]>, queryClient?: QueryClient | undefined): DefinedUseQueryResult<...>', gave the following error.
    Argument of type '{ queryKey: readonly ["cautionCards", "orphaned", object]; queryFn: () => Promise<PaginatedResponse<CautionCard>>; keepPreviousData: boolean; }' is not assignable to parameter of type 'DefinedInitialDataOptions<unknown, Error, unknown, readonly ["cautionCards", "orphaned", object]>'.
      Object literal may only specify known properties, and 'keepPreviousData' does not exist in type 'DefinedInitialDataOptions<unknown, Error, unknown, readonly ["cautionCards", "orphaned", object]>'.
  Overload 2 of 3, '(options: UndefinedInitialDataOptions<PaginatedResponse<CautionCard>, Error, PaginatedResponse<CautionCard>, readonly ["cautionCards", "orphaned", object]>, queryClient?: QueryClient | undefined): UseQueryResult<...>', gave the following error.
    Argument of type '{ queryKey: readonly ["cautionCards", "orphaned", object]; queryFn: () => Promise<PaginatedResponse<CautionCard>>; keepPreviousData: boolean; }' is not assignable to parameter of type 'UndefinedInitialDataOptions<PaginatedResponse<CautionCard>, Error, PaginatedResponse<CautionCard>, readonly ["cautionCards", "orphaned", object]>'.
      Object literal may only specify known properties, and 'keepPreviousData' does not exist in type 'UndefinedInitialDataOptions<PaginatedResponse<CautionCard>, Error, PaginatedResponse<CautionCard>, readonly ["cautionCards", "orphaned", object]>'.
  Overload 3 of 3, '(options: UseQueryOptions<PaginatedResponse<CautionCard>, Error, PaginatedResponse<CautionCard>, readonly ["cautionCards", "orphaned", object]>, queryClient?: QueryClient | undefined): UseQueryResult<PaginatedResponse<CautionCard>, Error>', gave the following error.
    Argument of type '{ queryKey: readonly ["cautionCards", "orphaned", object]; queryFn: () => Promise<PaginatedResponse<CautionCard>>; keepPreviousData: boolean; }' is not assignable to parameter of type 'UseQueryOptions<PaginatedResponse<CautionCard>, Error, PaginatedResponse<CautionCard>, readonly ["cautionCards", "orphaned", object]>'.
      Object literal may only specify known properties, and 'keepPreviousData' does not exist in type 'UseQueryOptions<PaginatedResponse<CautionCard>, Error, PaginatedResponse<CautionCard>, readonly ["cautionCards", "orphaned", object]>'.
    43 |         queryKey: cautionCardKeys.orphanedList({ page, limit }),
    44 |         queryFn: () => cautionCardService.getOrphanedCards(page, limit),
  > 45 |         keepPreviousData: true,
       |         ^^^^^^^^^^^^^^^^^^^^^^
    46 |     });
    47 | };
    48 |
ERROR in src/hooks/useCautionCards.ts:53:43
TS2551: Property 'getPatientCautionCards' does not exist on type '{ getCautionCards: (page?: number, limit?: number, filters?: {}) => Promise<PaginatedResponse<CautionCard>>; getOrphanedCards: (page?: number, limit?: number) => Promise<PaginatedResponse<CautionCard>>; searchCautionCards: (query: string) => Promise<...>; ... 5 more ...; deleteCard: ({ id, updatedBy }: DeleteCardPar...'. Did you mean 'getCautionCards'?
    51 |     return useQuery({
    52 |         queryKey: cautionCardKeys.patientCards(patientId),
  > 53 |         queryFn: () => cautionCardService.getPatientCautionCards(patientId),
       |                                           ^^^^^^^^^^^^^^^^^^^^^^
    54 |         enabled: enabled && !!patientId,
    55 |     });
    56 | };
ERROR in src/hooks/useCautionCards.ts:130:5
TS2559: Type '(file: File) => Promise<ProcessCardResponse>' has no properties in common with type 'UseMutationOptions<ProcessCardResponse, Error, File, unknown>'.
    128 |   const queryClient = useQueryClient();
    129 |   return useMutation<ProcessCardResponse, Error, File>(
  > 130 |     uploadService.uploadCautionCard, // Use the simplified version from uploadService
        |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    131 |     {
    132 |       onSuccess: () => {
    133 |         queryClient.invalidateQueries(['cautionCards']);
ERROR in src/hooks/useCautionCards.ts:133:39
TS2559: Type 'string[]' has no properties in common with type 'InvalidateQueryFilters<unknown, Error, unknown, readonly unknown[]>'.
    131 |     {
    132 |       onSuccess: () => {
  > 133 |         queryClient.invalidateQueries(['cautionCards']);
        |                                       ^^^^^^^^^^^^^^^^
    134 |         queryClient.invalidateQueries(['cautionCards', 'orphaned']); // Invalidate orphans as processing might create one
    135 |       },
    136 |     }
ERROR in src/hooks/useCautionCards.ts:134:39
TS2559: Type 'string[]' has no properties in common with type 'InvalidateQueryFilters<unknown, Error, unknown, readonly unknown[]>'.
    132 |       onSuccess: () => {
    133 |         queryClient.invalidateQueries(['cautionCards']);
  > 134 |         queryClient.invalidateQueries(['cautionCards', 'orphaned']); // Invalidate orphans as processing might create one
        |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    135 |       },
    136 |     }
    137 |   );
ERROR in src/hooks/useGlobalSearch.ts:17:5
TS2769: No overload matches this call.
  Overload 1 of 3, '(options: DefinedInitialDataOptions<SearchResult[], Error, SearchResult[], readonly unknown[]>, queryClient?: QueryClient | undefined): DefinedUseQueryResult<...>', gave the following error.
    Argument of type '{ queryKey: string[]; queryFn: () => Promise<SearchResult[]>; enabled: boolean; staleTime: number; cacheTime: number; }' is not assignable to parameter of type 'DefinedInitialDataOptions<SearchResult[], Error, SearchResult[], readonly unknown[]>'.
      Object literal may only specify known properties, and 'cacheTime' does not exist in type 'DefinedInitialDataOptions<SearchResult[], Error, SearchResult[], readonly unknown[]>'.
  Overload 2 of 3, '(options: UndefinedInitialDataOptions<SearchResult[], Error, SearchResult[], readonly unknown[]>, queryClient?: QueryClient | undefined): UseQueryResult<...>', gave the following error.
    Argument of type '{ queryKey: string[]; queryFn: () => Promise<SearchResult[]>; enabled: boolean; staleTime: number; cacheTime: number; }' is not assignable to parameter of type 'UndefinedInitialDataOptions<SearchResult[], Error, SearchResult[], readonly unknown[]>'.
      Object literal may only specify known properties, and 'cacheTime' does not exist in type 'UndefinedInitialDataOptions<SearchResult[], Error, SearchResult[], readonly unknown[]>'.
  Overload 3 of 3, '(options: UseQueryOptions<SearchResult[], Error, SearchResult[], readonly unknown[]>, queryClient?: QueryClient | undefined): UseQueryResult<...>', gave the following error.
    Argument of type '{ queryKey: string[]; queryFn: () => Promise<SearchResult[]>; enabled: boolean; staleTime: number; cacheTime: number; }' is not assignable to parameter of type 'UseQueryOptions<SearchResult[], Error, SearchResult[], readonly unknown[]>'.
      Object literal may only specify known properties, and 'cacheTime' does not exist in type 'UseQueryOptions<SearchResult[], Error, SearchResult[], readonly unknown[]>'.
    15 |     enabled: query.length >= 2, // Only search when query is at least 2 characters
    16 |     staleTime: 30000, // Results stay fresh for 30 seconds
  > 17 |     cacheTime: 300000, // Cache results for 5 minutes
       |     ^^^^^^^^^^^^^^^^^
    18 |   });
    19 | };
    20 |
ERROR in src/hooks/usePatientFilters.ts:11:7
TS2375: Type '{ searchTerm: string; bloodType: undefined; dateFrom: undefined; dateTo: undefined; status: undefined; }' is not assignable to type 'FilterCriteria' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
  Types of property 'bloodType' are incompatible.
    Type 'undefined' is not assignable to type 'string'.
     9 | }
    10 |
  > 11 | const defaultFilters: FilterCriteria = {
       |       ^^^^^^^^^^^^^^
    12 |     searchTerm: '',
    13 |     bloodType: undefined,
    14 |     dateFrom: undefined,
ERROR in src/hooks/usePatientFilters.ts:30:20
TS4111: Property 'q' comes from an index signature, so it must be accessed with ['q'].
    28 |         
    29 |         if (filters.searchTerm) {
  > 30 |             params.q = filters.searchTerm;
       |                    ^
    31 |         }
    32 |         if (filters.bloodType) {
    33 |             params.bloodType = filters.bloodType;
ERROR in src/hooks/usePatientFilters.ts:33:20
TS4111: Property 'bloodType' comes from an index signature, so it must be accessed with ['bloodType'].
    31 |         }
    32 |         if (filters.bloodType) {
  > 33 |             params.bloodType = filters.bloodType;
       |                    ^^^^^^^^^
    34 |         }
    35 |         if (filters.dateFrom) {
    36 |             params.dateFrom = filters.dateFrom;
ERROR in src/hooks/usePatientFilters.ts:36:20
TS4111: Property 'dateFrom' comes from an index signature, so it must be accessed with ['dateFrom'].
    34 |         }
    35 |         if (filters.dateFrom) {
  > 36 |             params.dateFrom = filters.dateFrom;
       |                    ^^^^^^^^
    37 |         }
    38 |         if (filters.dateTo) {
    39 |             params.dateTo = filters.dateTo;
ERROR in src/hooks/usePatientFilters.ts:39:20
TS4111: Property 'dateTo' comes from an index signature, so it must be accessed with ['dateTo'].
    37 |         }
    38 |         if (filters.dateTo) {
  > 39 |             params.dateTo = filters.dateTo;
       |                    ^^^^^^
    40 |         }
    41 |         if (filters.status) {
    42 |             params.status = filters.status;
ERROR in src/hooks/usePatientFilters.ts:42:20
TS4111: Property 'status' comes from an index signature, so it must be accessed with ['status'].
    40 |         }
    41 |         if (filters.status) {
  > 42 |             params.status = filters.status;
       |                    ^^^^^^
    43 |         }
    44 |
    45 |         return params;
ERROR in src/hooks/usePatients.ts:11:8
TS1149: File name 'I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/types/patient.ts' differs from already included file name 'I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/types/Patient.ts' only in casing.
  The file is in the program because:
    Imported via '../types/Patient' from file 'I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/api/patientService.ts'
    Imported via '../types/Patient' from file 'I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/pages/PatientDetailPage.tsx'
    Imported via '../types/Patient' from file 'I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/pages/PatientFormPage.tsx'
    Imported via '../types/Patient' from file 'I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/components/PhenotypeInputGrid.tsx'
    Imported via '../types/Patient' from file 'I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/components/PhenotypeDisplay.tsx'
    Imported via '../types/Patient' from file 'I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/components/VirtualizedPatientList.tsx'
    Imported via '../types/Patient' from file 'I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/stories/PatientPages.stories.tsx'
    Imported via '../types/patient' from file 'I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/hooks/usePatients.ts'
     9 |   Patient,
    10 |   BatchOperationResult
  > 11 | } from '../types/patient';
       |        ^^^^^^^^^^^^^^^^^^
    12 | import { PaginatedResponse } from '../types/common';
    13 | import type { FilterCriteria } from '../components/search/FilterBar';
    14 |
ERROR in src/hooks/usePatients.ts:46:5
TS2769: No overload matches this call.
  Overload 1 of 3, '(options: DefinedInitialDataOptions<unknown, Error, PaginatedResponse<Patient>, (string | number | FilterCriteria | undefined)[]>, queryClient?: QueryClient | undefined): DefinedUseQueryResult<...>', gave the following error.
    Argument of type '{ queryKey: (string | number | FilterCriteria | undefined)[]; queryFn: () => Promise<PaginatedResponse<Patient>>; keepPreviousData: boolean; staleTime: number; cacheTime: number; onSuccess: (data: any) => void; }' is not assignable to parameter of type 'DefinedInitialDataOptions<unknown, Error, PaginatedResponse<Patient>, (string | number | FilterCriteria | undefined)[]>'.
      Object literal may only specify known properties, and 'keepPreviousData' does not exist in type 'DefinedInitialDataOptions<unknown, Error, PaginatedResponse<Patient>, (string | number | FilterCriteria | undefined)[]>'.
  Overload 2 of 3, '(options: UndefinedInitialDataOptions<PaginatedResponse<...>, Error, import("I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/types/common").PaginatedResponse<...>, (string | number | FilterCriteria | undefined)[]>, queryClient?: QueryClient | undefined): UseQueryResult<...>', gave the following error.
    Argument of type '{ queryKey: (string | number | FilterCriteria | undefined)[]; queryFn: () => Promise<PaginatedResponse<Patient>>; keepPreviousData: boolean; staleTime: number; cacheTime: number; onSuccess: (data: any) => void; }' is not assignable to parameter of type 'UndefinedInitialDataOptions<PaginatedResponse<...>, Error, PaginatedResponse<...>, (string | number | FilterCriteria | undefined)[]>'.
      Object literal may only specify known properties, and 'keepPreviousData' does not exist in type 'UndefinedInitialDataOptions<PaginatedResponse<...>, Error, PaginatedResponse<...>, (string | number | FilterCriteria | undefined)[]>'.
  Overload 3 of 3, '(options: UseQueryOptions<PaginatedResponse<...>, Error, import("I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/types/common").PaginatedResponse<...>, (string | number | FilterCriteria | undefined)[]>, queryClient?: QueryClient | undefined): UseQueryResult<...>', gave the following error.
    Argument of type '{ queryKey: (string | number | FilterCriteria | undefined)[]; queryFn: () => Promise<PaginatedResponse<Patient>>; keepPreviousData: boolean; staleTime: number; cacheTime: number; onSuccess: (data: any) => void; }' is not assignable to parameter of type 'UseQueryOptions<PaginatedResponse<...>, Error, PaginatedResponse<...>, (string | number | FilterCriteria | undefined)[]>'.
      Object literal may only specify known properties, and 'keepPreviousData' does not exist in type 'UseQueryOptions<PaginatedResponse<...>, Error, PaginatedResponse<...>, (string | number | FilterCriteria | undefined)[]>'.
    44 |     queryKey: ['patients', page, limit, filters],
    45 |     queryFn: () => patientService.getPatients(page, limit, filters),
  > 46 |     keepPreviousData: true,
       |     ^^^^^^^^^^^^^^^^^^^^^^
    47 |     staleTime: STALE_TIME,
    48 |     cacheTime: CACHE_TIME,
    49 |     onSuccess: (data) => {
ERROR in src/hooks/usePatients.ts:49:17
TS7006: Parameter 'data' implicitly has an 'any' type.
    47 |     staleTime: STALE_TIME,
    48 |     cacheTime: CACHE_TIME,
  > 49 |     onSuccess: (data) => {
       |                 ^^^^
    50 |       // Pre-fetch next page if it exists
    51 |       const totalPages = Math.ceil(data.total / limit);
    52 |       if (page < totalPages) {
ERROR in src/hooks/usePatients.ts:66:5
TS2769: No overload matches this call.
  Overload 1 of 3, '(options: DefinedInitialDataOptions<unknown, Error, Patient, (string | number)[]>, queryClient?: QueryClient | undefined): DefinedUseQueryResult<...>', gave the following error.
    Argument of type '{ queryKey: (string | number)[]; queryFn: () => Promise<Patient>; enabled: boolean; staleTime: number; cacheTime: number; }' is not assignable to parameter of type 'DefinedInitialDataOptions<unknown, Error, Patient, (string | number)[]>'.
      Object literal may only specify known properties, and 'cacheTime' does not exist in type 'DefinedInitialDataOptions<unknown, Error, Patient, (string | number)[]>'.
  Overload 2 of 3, '(options: UndefinedInitialDataOptions<import("I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/types/Patient").Patient, Error, import("I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/types/patient").Patient, (string | number)[]>, queryClient?: QueryClient | undefined): UseQueryResult<...>', gave the following error.
    Argument of type '{ queryKey: (string | number)[]; queryFn: () => Promise<Patient>; enabled: boolean; staleTime: number; cacheTime: number; }' is not assignable to parameter of type 'UndefinedInitialDataOptions<Patient, Error, Patient, (string | number)[]>'.
      Object literal may only specify known properties, and 'cacheTime' does not exist in type 'UndefinedInitialDataOptions<Patient, Error, Patient, (string | number)[]>'.
  Overload 3 of 3, '(options: UseQueryOptions<import("I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/types/Patient").Patient, Error, import("I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/types/patient").Patient, (string | number)[]>, queryClient?: QueryClient | undefined): UseQueryResult<...>', gave the following error.
    Argument of type '{ queryKey: (string | number)[]; queryFn: () => Promise<Patient>; enabled: boolean; staleTime: number; cacheTime: number; }' is not assignable to parameter of type 'UseQueryOptions<Patient, Error, Patient, (string | number)[]>'.
      Object literal may only specify known properties, and 'cacheTime' does not exist in type 'UseQueryOptions<Patient, Error, Patient, (string | number)[]>'.
    64 |     enabled: !!id,
    65 |     staleTime: STALE_TIME,
  > 66 |     cacheTime: CACHE_TIME
       |     ^^^^^^^^^^^^^^^^^^^^^
    67 |   });
    68 | };
    69 |
ERROR in src/hooks/usePatients.ts:74:3
TS2322: Type 'UseMutationResult<Patient, Error, Omit<Patient, "id">, { previousPatients: PaginatedResponse<Patient> | undefined; }>' is not assignable to type 'UseMutationResult<Patient, Error, CreatePatientRequest, MutationContext>'.
  Type 'Override<MutationObserverIdleResult<Patient, Error, Omit<Patient, "id">, { previousPatients: PaginatedResponse<Patient> | undefined; }>, { ...; }> & { ...; }' is not assignable to type 'UseMutationResult<Patient, Error, CreatePatientRequest, MutationContext>'.
    Type 'Override<MutationObserverIdleResult<Patient, Error, Omit<Patient, "id">, { previousPatients: PaginatedResponse<Patient> | undefined; }>, { ...; }> & { ...; }' is not assignable to type 'Override<MutationObserverIdleResult<Patient, Error, CreatePatientRequest, MutationContext>, { ...; }> & { ...; }'.
      Type 'Override<MutationObserverIdleResult<Patient, Error, Omit<Patient, "id">, { previousPatients: PaginatedResponse<Patient> | undefined; }>, { ...; }> & { ...; }' is not assignable to type 'Override<MutationObserverIdleResult<Patient, Error, CreatePatientRequest, MutationContext>, { ...; }>'.
        Types of property 'mutate' are incompatible.
          Type 'UseMutateFunction<Patient, Error, Omit<Patient, "id">, { previousPatients: PaginatedResponse<Patient> | undefined; }>' is not assignable to type 'UseMutateFunction<Patient, Error, CreatePatientRequest, MutationContext>'.
            Types of parameters 'variables' and 'variables' are incompatible.
              Type 'CreatePatientRequest' is not assignable to type 'Omit<Patient, "id">' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
     72 |   const queryClient = useQueryClient();
     73 |   
  >  74 |   return useMutation({
        |   ^^^^^^^^^^^^^^^^^^^^
  >  75 |     mutationFn: patientService.createPatient,
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  >  76 |     onMutate: async (newPatient) => {
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  >  77 |       await queryClient.cancelQueries({ queryKey: ['patients'] });
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  >  78 |       const previousPatients = queryClient.getQueryData<PaginatedResponse<Patient>>(['patients']);
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  >  79 |
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  >  80 |       const tempPatient = {
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  >  81 |         ...newPatient,
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  >  82 |         id: `temp_${Date.now()}`,
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  >  83 |         createdAt: new Date().toISOString(),
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  >  84 |         updatedAt: new Date().toISOString()
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  >  85 |       } as Patient;
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  >  86 |
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  >  87 |       queryClient.setQueriesData<PaginatedResponse<Patient>>({ queryKey: ['patients'] }, (old) => {
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  >  88 |         if (!old) return old;
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  >  89 |         return {
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  >  90 |           ...old,
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  >  91 |           data: [tempPatient, ...old.data],
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  >  92 |           total: old.total + 1
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  >  93 |         };
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  >  94 |       });
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  >  95 |
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  >  96 |       return { previousPatients };
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  >  97 |     },
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  >  98 |     onError: (_err, _newPatient, context) => {
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  >  99 |       if (context?.previousPatients) {
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 100 |         queryClient.setQueriesData(['patients'], context.previousPatients);
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 101 |       }
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 102 |     },
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 103 |     onSettled: () => {
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 104 |       queryClient.invalidateQueries({ queryKey: ['patients'] });
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 105 |     }
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 106 |   });
        | ^^^^^^
    107 | };
    108 |
    109 | // Hook to update an existing patient
ERROR in src/hooks/usePatients.ts:100:36
TS2559: Type 'string[]' has no properties in common with type 'QueryFilters<any, any, any, any>'.
     98 |     onError: (_err, _newPatient, context) => {
     99 |       if (context?.previousPatients) {
  > 100 |         queryClient.setQueriesData(['patients'], context.previousPatients);
        |                                    ^^^^^^^^^^^^
    101 |       }
    102 |     },
    103 |     onSettled: () => {
ERROR in src/hooks/usePatients.ts:118:3
TS2322: Type 'UseMutationResult<Patient, Error, { id: string | number; patient: UpdatePatientRequest; }, { previousPatients: PaginatedResponse<Patient> | undefined; previousPatient: Patient | undefined; }>' is not assignable to type 'UseMutationResult<Patient, Error, { id: string | number; patient: UpdatePatientRequest; }, MutationContext>'.
  Type 'Override<MutationObserverIdleResult<Patient, Error, { id: string | number; patient: UpdatePatientRequest; }, { previousPatients: PaginatedResponse<Patient> | undefined; previousPatient: Patient | undefined; }>, { ...; }> & { ...; }' is not assignable to type 'UseMutationResult<Patient, Error, { id: string | number; patient: UpdatePatientRequest; }, MutationContext>'.
    Type 'Override<MutationObserverIdleResult<Patient, Error, { id: string | number; patient: UpdatePatientRequest; }, { previousPatients: PaginatedResponse<Patient> | undefined; previousPatient: Patient | undefined; }>, { ...; }> & { ...; }' is not assignable to type 'Override<MutationObserverIdleResult<Patient, Error, { id: string | number; patient: UpdatePatientRequest; }, MutationContext>, { ...; }> & { ...; }'.
      Type 'Override<MutationObserverIdleResult<Patient, Error, { id: string | number; patient: UpdatePatientRequest; }, { previousPatients: PaginatedResponse<Patient> | undefined; previousPatient: Patient | undefined; }>, { ...; }> & { ...; }' is not assignable to type 'Override<MutationObserverIdleResult<Patient, Error, { id: string | number; patient: UpdatePatientRequest; }, MutationContext>, { ...; }>'.
        Types of property 'mutate' are incompatible.
          Type 'UseMutateFunction<Patient, Error, { id: string | number; patient: UpdatePatientRequest; }, { previousPatients: PaginatedResponse<Patient> | undefined; previousPatient: Patient | undefined; }>' is not assignable to type 'UseMutateFunction<Patient, Error, { id: string | number; patient: UpdatePatientRequest; }, MutationContext>'.
            Types of parameters 'options' and 'options' are incompatible.
              Type 'MutateOptions<Patient, Error, { id: string | number; patient: UpdatePatientRequest; }, MutationContext> | undefined' is not assignable to type 'MutateOptions<Patient, Error, { id: string | number; patient: UpdatePatientRequest; }, { previousPatients: PaginatedResponse<Patient> | undefined; previousPatient: Patient | undefined; }> | undefined'.
                Type 'MutateOptions<Patient, Error, { id: string | number; patient: UpdatePatientRequest; }, MutationContext>' is not assignable to type 'MutateOptions<Patient, Error, { id: string | number; patient: UpdatePatientRequest; }, { previousPatients: PaginatedResponse<Patient> | undefined; previousPatient: Patient | undefined; }>' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
                  Type '{ previousPatients: PaginatedResponse<Patient> | undefined; previousPatient: Patient | undefined; }' is not assignable to type 'MutationContext' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
                    Types of property 'previousPatients' are incompatible.
                      Type 'PaginatedResponse<Patient> | undefined' is not assignable to type 'PaginatedResponse<Patient>'.
                        Type 'undefined' is not assignable to type 'PaginatedResponse<Patient>'.
    116 |   const queryClient = useQueryClient();
    117 |   
  > 118 |   return useMutation({
        |   ^^^^^^^^^^^^^^^^^^^^
  > 119 |     mutationFn: ({ id, patient }) => patientService.updatePatient(id, patient),
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 120 |     onMutate: async ({ id, patient }) => {
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 121 |       await queryClient.cancelQueries({ queryKey: ['patients'] });
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 122 |       await queryClient.cancelQueries({ queryKey: ['patient', id] });
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 123 |
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 124 |       const previousPatients = queryClient.getQueryData<PaginatedResponse<Patient>>(['patients']);
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 125 |       const previousPatient = queryClient.getQueryData<Patient>(['patient', id]);
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 126 |
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 127 |       queryClient.setQueriesData<PaginatedResponse<Patient>>({ queryKey: ['patients'] }, (old) => {
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 128 |         if (!old) return old;
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 129 |         return {
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 130 |           ...old,
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 131 |           data: old.data.map((p) => 
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 132 |             p.id === id ? { ...p, ...patient, updatedAt: new Date().toISOString() } : p
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 133 |           )
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 134 |         };
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 135 |       });
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 136 |
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 137 |       if (previousPatient) {
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 138 |         queryClient.setQueryData<Patient>(['patient', id], {
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 139 |           ...previousPatient,
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 140 |           ...patient,
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 141 |           updatedAt: new Date().toISOString()
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 142 |         });
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 143 |       }
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 144 |
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 145 |       return { previousPatients, previousPatient };
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 146 |     },
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 147 |     onError: (_err, { id }, context) => {
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 148 |       if (context?.previousPatients) {
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 149 |         queryClient.setQueriesData(['patients'], context.previousPatients);
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 150 |       }
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 151 |       if (context?.previousPatient) {
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 152 |         queryClient.setQueryData(['patient', id], context.previousPatient);
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 153 |       }
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 154 |     },
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 155 |     onSettled: (data) => {
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 156 |       queryClient.invalidateQueries({ queryKey: ['patients'] });
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 157 |       if (data?.id) {
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 158 |         queryClient.invalidateQueries({ queryKey: ['patient', data.id] });
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 159 |       }
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 160 |     }
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 161 |   });
        | ^^^^^^
    162 | };
    163 |
    164 | // Hook to delete a patient
ERROR in src/hooks/usePatients.ts:119:71
TS2379: Argument of type 'UpdatePatientRequest' is not assignable to parameter of type 'Partial<Patient>' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
    117 |   
    118 |   return useMutation({
  > 119 |     mutationFn: ({ id, patient }) => patientService.updatePatient(id, patient),
        |                                                                       ^^^^^^^
    120 |     onMutate: async ({ id, patient }) => {
    121 |       await queryClient.cancelQueries({ queryKey: ['patients'] });
    122 |       await queryClient.cancelQueries({ queryKey: ['patient', id] });
ERROR in src/hooks/usePatients.ts:127:90
TS2345: Argument of type '(old: PaginatedResponse<Patient> | undefined) => { data: { updatedAt: string; demographics: Partial<Demographics>; bloodProfile: Partial<...>; ... 9 more ...; updatedBy: string; }[]; total: number; page: number; limit: number; } | undefined' is not assignable to parameter of type 'Updater<PaginatedResponse<Patient> | undefined, PaginatedResponse<Patient> | undefined>'.
  Type '(old: PaginatedResponse<Patient> | undefined) => { data: { updatedAt: string; demographics: Partial<Demographics>; bloodProfile: Partial<...>; ... 9 more ...; updatedBy: string; }[]; total: number; page: number; limit: number; } | undefined' is not assignable to type '(input: PaginatedResponse<Patient> | undefined) => PaginatedResponse<Patient> | undefined'.
    Type '{ data: { updatedAt: string; demographics: Partial<Demographics>; bloodProfile: Partial<BloodProfile>; medicalHistory: Partial<MedicalHistory>; ... 8 more ...; updatedBy: string; }[]; total: number; page: number; limit: number; } | undefined' is not assignable to type 'PaginatedResponse<Patient> | undefined'.
      Type '{ data: { updatedAt: string; demographics: Partial<Demographics>; bloodProfile: Partial<BloodProfile>; medicalHistory: Partial<MedicalHistory>; ... 8 more ...; updatedBy: string; }[]; total: number; page: number; limit: number; }' is not assignable to type 'PaginatedResponse<Patient>'.
        Types of property 'data' are incompatible.
          Type '{ updatedAt: string; demographics: Partial<Demographics>; bloodProfile: Partial<BloodProfile>; medicalHistory: Partial<MedicalHistory>; ... 8 more ...; updatedBy: string; }[]' is not assignable to type 'Patient[]'.
            Type '{ updatedAt: string; demographics: Partial<Demographics>; bloodProfile: Partial<BloodProfile>; medicalHistory: Partial<MedicalHistory>; ... 8 more ...; updatedBy: string; }' is not assignable to type 'Patient' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
              Types of property 'demographics' are incompatible.
                Type 'Partial<Demographics>' is not assignable to type 'Demographics' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
    125 |       const previousPatient = queryClient.getQueryData<Patient>(['patient', id]);
    126 |
  > 127 |       queryClient.setQueriesData<PaginatedResponse<Patient>>({ queryKey: ['patients'] }, (old) => {
        |                                                                                          ^^^^^^^^^^
    128 |         if (!old) return old;
    129 |         return {
    130 |           ...old,
ERROR in src/hooks/usePatients.ts:138:60
TS2345: Argument of type '{ updatedAt: string; demographics: Partial<Demographics>; bloodProfile: Partial<BloodProfile>; medicalHistory: Partial<MedicalHistory>; ... 8 more ...; updatedBy: string; }' is not assignable to parameter of type 'Updater<Patient | undefined, Patient | undefined>'.
  Type '{ updatedAt: string; demographics: Partial<Demographics>; bloodProfile: Partial<BloodProfile>; medicalHistory: Partial<MedicalHistory>; ... 8 more ...; updatedBy: string; }' is not assignable to type 'Patient' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
    Types of property 'demographics' are incompatible.
      Type 'Partial<Demographics>' is not assignable to type 'Demographics' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
    136 |
    137 |       if (previousPatient) {
  > 138 |         queryClient.setQueryData<Patient>(['patient', id], {
        |                                                            ^
  > 139 |           ...previousPatient,
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 140 |           ...patient,
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 141 |           updatedAt: new Date().toISOString()
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 142 |         });
        | ^^^^^^^^^^
    143 |       }
    144 |
    145 |       return { previousPatients, previousPatient };
ERROR in src/hooks/usePatients.ts:149:36
TS2559: Type 'string[]' has no properties in common with type 'QueryFilters<any, any, any, any>'.
    147 |     onError: (_err, { id }, context) => {
    148 |       if (context?.previousPatients) {
  > 149 |         queryClient.setQueriesData(['patients'], context.previousPatients);
        |                                    ^^^^^^^^^^^^
    150 |       }
    151 |       if (context?.previousPatient) {
    152 |         queryClient.setQueryData(['patient', id], context.previousPatient);
ERROR in src/hooks/usePatients.ts:168:3
TS2322: Type 'UseMutationResult<void, Error, string | number, { previousPatients: PaginatedResponse<Patient> | undefined; }>' is not assignable to type 'UseMutationResult<void, Error, string | number, MutationContext>'.
  Type 'Override<MutationObserverIdleResult<void, Error, string | number, { previousPatients: PaginatedResponse<Patient> | undefined; }>, { ...; }> & { ...; }' is not assignable to type 'UseMutationResult<void, Error, string | number, MutationContext>'.
    Type 'Override<MutationObserverIdleResult<void, Error, string | number, { previousPatients: PaginatedResponse<Patient> | undefined; }>, { ...; }> & { ...; }' is not assignable to type 'Override<MutationObserverIdleResult<void, Error, string | number, MutationContext>, { mutate: UseMutateFunction<void, Error, string | number, MutationContext>; }> & { ...; }'.
      Type 'Override<MutationObserverIdleResult<void, Error, string | number, { previousPatients: PaginatedResponse<Patient> | undefined; }>, { ...; }> & { ...; }' is not assignable to type 'Override<MutationObserverIdleResult<void, Error, string | number, MutationContext>, { mutate: UseMutateFunction<void, Error, string | number, MutationContext>; }>'.
        Types of property 'mutate' are incompatible.
          Type 'UseMutateFunction<void, Error, string | number, { previousPatients: PaginatedResponse<Patient> | undefined; }>' is not assignable to type 'UseMutateFunction<void, Error, string | number, MutationContext>'.
            Type '{ previousPatients: PaginatedResponse<Patient> | undefined; }' is not assignable to type 'MutationContext' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
              Types of property 'previousPatients' are incompatible.
                Type 'PaginatedResponse<Patient> | undefined' is not assignable to type 'PaginatedResponse<Patient>'.
                  Type 'undefined' is not assignable to type 'PaginatedResponse<Patient>'.
    166 |   const queryClient = useQueryClient();
    167 |   
  > 168 |   return useMutation({
        |   ^^^^^^^^^^^^^^^^^^^^
  > 169 |     mutationFn: patientService.deletePatient,
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 170 |     onMutate: async (patientId) => {
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 171 |       await queryClient.cancelQueries({ queryKey: ['patients'] });
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 172 |       const previousPatients = queryClient.getQueryData<PaginatedResponse<Patient>>(['patients']);
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 173 |
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 174 |       queryClient.setQueriesData<PaginatedResponse<Patient>>({ queryKey: ['patients'] }, (old) => {
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 175 |         if (!old) return old;
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 176 |         return {
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 177 |           ...old,
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 178 |           data: old.data.filter((patient) => patient.id !== patientId),
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 179 |           total: old.total - 1
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 180 |         };
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 181 |       });
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 182 |
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 183 |       return { previousPatients };
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 184 |     },
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 185 |     onError: (_err, _patientId, context) => {
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 186 |       if (context?.previousPatients) {
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 187 |         queryClient.setQueriesData(['patients'], context.previousPatients);
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 188 |       }
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 189 |     },
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 190 |     onSettled: (_data, _error, patientId) => {
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 191 |       queryClient.invalidateQueries({ queryKey: ['patients'] });
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 192 |       queryClient.removeQueries({ queryKey: ['patient', patientId] });
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 193 |     }
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 194 |   });
        | ^^^^^^
    195 | };
    196 |
    197 | // Hook for searching patients
ERROR in src/hooks/usePatients.ts:187:36
TS2559: Type 'string[]' has no properties in common with type 'QueryFilters<any, any, any, any>'.
    185 |     onError: (_err, _patientId, context) => {
    186 |       if (context?.previousPatients) {
  > 187 |         queryClient.setQueriesData(['patients'], context.previousPatients);
        |                                    ^^^^^^^^^^^^
    188 |       }
    189 |     },
    190 |     onSettled: (_data, _error, patientId) => {
ERROR in src/hooks/usePatients.ts:207:5
TS2769: No overload matches this call.
  Overload 1 of 3, '(options: DefinedInitialDataOptions<unknown, Error, PaginatedResponse<Patient>, (string | PatientSearchParams)[]>, queryClient?: QueryClient | undefined): DefinedUseQueryResult<...>', gave the following error.
    Argument of type '{ queryKey: (string | PatientSearchParams)[]; queryFn: () => Promise<PaginatedPatientsResponse>; enabled: boolean; keepPreviousData: boolean; staleTime: number; }' is not assignable to parameter of type 'DefinedInitialDataOptions<unknown, Error, PaginatedResponse<Patient>, (string | PatientSearchParams)[]>'.
      Object literal may only specify known properties, and 'keepPreviousData' does not exist in type 'DefinedInitialDataOptions<unknown, Error, PaginatedResponse<Patient>, (string | PatientSearchParams)[]>'.
  Overload 2 of 3, '(options: UndefinedInitialDataOptions<PaginatedPatientsResponse, Error, PaginatedResponse<Patient>, (string | PatientSearchParams)[]>, queryClient?: QueryClient | undefined): UseQueryResult<...>', gave the following error.
    Argument of type '{ queryKey: (string | PatientSearchParams)[]; queryFn: () => Promise<PaginatedPatientsResponse>; enabled: boolean; keepPreviousData: boolean; staleTime: number; }' is not assignable to parameter of type 'UndefinedInitialDataOptions<PaginatedPatientsResponse, Error, PaginatedResponse<Patient>, (string | PatientSearchParams)[]>'.
      Object literal may only specify known properties, and 'keepPreviousData' does not exist in type 'UndefinedInitialDataOptions<PaginatedPatientsResponse, Error, PaginatedResponse<Patient>, (string | PatientSearchParams)[]>'.
  Overload 3 of 3, '(options: UseQueryOptions<PaginatedPatientsResponse, Error, PaginatedResponse<Patient>, (string | PatientSearchParams)[]>, queryClient?: QueryClient | undefined): UseQueryResult<...>', gave the following error.
    Argument of type '{ queryKey: (string | PatientSearchParams)[]; queryFn: () => Promise<PaginatedPatientsResponse>; enabled: boolean; keepPreviousData: boolean; staleTime: number; }' is not assignable to parameter of type 'UseQueryOptions<PaginatedPatientsResponse, Error, PaginatedResponse<Patient>, (string | PatientSearchParams)[]>'.
      Object literal may only specify known properties, and 'keepPreviousData' does not exist in type 'UseQueryOptions<PaginatedPatientsResponse, Error, PaginatedResponse<Patient>, (string | PatientSearchParams)[]>'.
    205 |     queryFn: () => patientService.searchPatients(query, options),
    206 |     enabled: enabled && !!query,
  > 207 |     keepPreviousData: true,
        |     ^^^^^^^^^^^^^^^^^^^^^^
    208 |     staleTime: STALE_TIME
    209 |   });
    210 | };
ERROR in src/hooks/usePatients.ts:218:35
TS2339: Property 'advancedPatientSearch' does not exist on type '{ getPatients: (page: number, limit: number, filters?: FilterCriteria | undefined) => Promise<PaginatedResponse<Patient>>; ... 6 more ...; getPatientCautionCards: (id: string | number) => Promise<...>; }'.
    216 |   return useQuery({
    217 |     queryKey: ['patients', 'advanced', params],
  > 218 |     queryFn: () => patientService.advancedPatientSearch(params),
        |                                   ^^^^^^^^^^^^^^^^^^^^^
    219 |     staleTime: STALE_TIME
    220 |   });
    221 | };
ERROR in src/hooks/usePatients.ts:228:62
TS2379: Argument of type 'CreatePatientRequest' is not assignable to parameter of type 'Omit<Patient, "id">' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
  Type 'CreatePatientRequest' is missing the following properties from type 'Omit<Patient, "id">': createdAt, updatedAt, createdBy, updatedBy
    226 |
    227 |   const createPatientMutation = useMutation<Patient, Error, CreatePatientRequest, MutationContext>({
  > 228 |     mutationFn: (newPatient) => patientService.createPatient(newPatient),
        |                                                              ^^^^^^^^^^
    229 |     onMutate: async (newPatient) => {
    230 |       await queryClient.cancelQueries({ queryKey: ['patients'] });
    231 |       const previousPatients = queryClient.getQueryData<PaginatedResponse<Patient>>(['patients']);
ERROR in src/hooks/usePatients.ts:229:5
TS2322: Type '(newPatient: CreatePatientRequest) => Promise<{ previousPatients: PaginatedResponse<Patient> | undefined; }>' is not assignable to type '(variables: CreatePatientRequest) => MutationContext | Promise<MutationContext | undefined> | undefined'.
  Type 'Promise<{ previousPatients: PaginatedResponse<Patient> | undefined; }>' is not assignable to type 'MutationContext | Promise<MutationContext | undefined> | undefined'.
    Type 'Promise<{ previousPatients: PaginatedResponse<Patient> | undefined; }>' is not assignable to type 'Promise<MutationContext | undefined>'.
      Type '{ previousPatients: PaginatedResponse<Patient> | undefined; }' is not assignable to type 'MutationContext' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
        Types of property 'previousPatients' are incompatible.
          Type 'PaginatedResponse<Patient> | undefined' is not assignable to type 'PaginatedResponse<Patient>'.
            Type 'undefined' is not assignable to type 'PaginatedResponse<Patient>'.
    227 |   const createPatientMutation = useMutation<Patient, Error, CreatePatientRequest, MutationContext>({
    228 |     mutationFn: (newPatient) => patientService.createPatient(newPatient),
  > 229 |     onMutate: async (newPatient) => {
        |     ^^^^^^^^
    230 |       await queryClient.cancelQueries({ queryKey: ['patients'] });
    231 |       const previousPatients = queryClient.getQueryData<PaginatedResponse<Patient>>(['patients']);
    232 |
ERROR in src/hooks/usePatients.ts:253:36
TS2559: Type 'string[]' has no properties in common with type 'QueryFilters<any, any, any, any>'.
    251 |     onError: (_err, _newPatient, context) => {
    252 |       if (context?.previousPatients) {
  > 253 |         queryClient.setQueriesData(['patients'], context.previousPatients);
        |                                    ^^^^^^^^^^^^
    254 |       }
    255 |     },
    256 |     onSettled: () => {
ERROR in src/hooks/usePatients.ts:267:71
TS2379: Argument of type 'UpdatePatientRequest' is not assignable to parameter of type 'Partial<Patient>' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
  Types of property 'demographics' are incompatible.
    Type 'Partial<Demographics>' is not assignable to type 'Demographics' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
      Property 'firstName' is optional in type 'Partial<Demographics>' but required in type 'Demographics'.
    265 |     MutationContext
    266 |   >({
  > 267 |     mutationFn: ({ id, patient }) => patientService.updatePatient(id, patient),
        |                                                                       ^^^^^^^
    268 |     onMutate: async ({ id, patient }) => {
    269 |       await queryClient.cancelQueries({ queryKey: ['patients'] });
    270 |       await queryClient.cancelQueries({ queryKey: ['patient', id] });
ERROR in src/hooks/usePatients.ts:268:5
TS2322: Type '({ id, patient }: { id: string | number; patient: UpdatePatientRequest; }) => Promise<{ previousPatients: PaginatedResponse<Patient> | undefined; previousPatient: Patient | undefined; }>' is not assignable to type '(variables: { id: string | number; patient: UpdatePatientRequest; }) => MutationContext | Promise<MutationContext | undefined> | undefined'.
  Type 'Promise<{ previousPatients: PaginatedResponse<Patient> | undefined; previousPatient: Patient | undefined; }>' is not assignable to type 'MutationContext | Promise<MutationContext | undefined> | undefined'.
    Type 'Promise<{ previousPatients: PaginatedResponse<Patient> | undefined; previousPatient: Patient | undefined; }>' is not assignable to type 'Promise<MutationContext | undefined>'.
      Type '{ previousPatients: PaginatedResponse<Patient> | undefined; previousPatient: Patient | undefined; }' is not assignable to type 'MutationContext' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
        Types of property 'previousPatients' are incompatible.
          Type 'PaginatedResponse<Patient> | undefined' is not assignable to type 'PaginatedResponse<Patient>'.
            Type 'undefined' is not assignable to type 'PaginatedResponse<Patient>'.
    266 |   >({
    267 |     mutationFn: ({ id, patient }) => patientService.updatePatient(id, patient),
  > 268 |     onMutate: async ({ id, patient }) => {
        |     ^^^^^^^^
    269 |       await queryClient.cancelQueries({ queryKey: ['patients'] });
    270 |       await queryClient.cancelQueries({ queryKey: ['patient', id] });
    271 |
ERROR in src/hooks/usePatients.ts:275:90
TS2345: Argument of type '(old: PaginatedResponse<Patient> | undefined) => { data: { updatedAt: string; demographics: Partial<Demographics>; bloodProfile: Partial<...>; ... 9 more ...; updatedBy: string; }[]; total: number; page: number; limit: number; } | undefined' is not assignable to parameter of type 'Updater<PaginatedResponse<Patient> | undefined, PaginatedResponse<Patient> | undefined>'.
  Type '(old: PaginatedResponse<Patient> | undefined) => { data: { updatedAt: string; demographics: Partial<Demographics>; bloodProfile: Partial<...>; ... 9 more ...; updatedBy: string; }[]; total: number; page: number; limit: number; } | undefined' is not assignable to type '(input: PaginatedResponse<Patient> | undefined) => PaginatedResponse<Patient> | undefined'.
    Type '{ data: { updatedAt: string; demographics: Partial<Demographics>; bloodProfile: Partial<BloodProfile>; medicalHistory: Partial<MedicalHistory>; ... 8 more ...; updatedBy: string; }[]; total: number; page: number; limit: number; } | undefined' is not assignable to type 'PaginatedResponse<Patient> | undefined'.
      Type '{ data: { updatedAt: string; demographics: Partial<Demographics>; bloodProfile: Partial<BloodProfile>; medicalHistory: Partial<MedicalHistory>; ... 8 more ...; updatedBy: string; }[]; total: number; page: number; limit: number; }' is not assignable to type 'PaginatedResponse<Patient>'.
        Types of property 'data' are incompatible.
          Type '{ updatedAt: string; demographics: Partial<Demographics>; bloodProfile: Partial<BloodProfile>; medicalHistory: Partial<MedicalHistory>; ... 8 more ...; updatedBy: string; }[]' is not assignable to type 'Patient[]'.
            Type '{ updatedAt: string; demographics: Partial<Demographics>; bloodProfile: Partial<BloodProfile>; medicalHistory: Partial<MedicalHistory>; ... 8 more ...; updatedBy: string; }' is not assignable to type 'Patient' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
              Types of property 'demographics' are incompatible.
                Type 'Partial<Demographics>' is not assignable to type 'Demographics' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
                  Property 'firstName' is optional in type 'Partial<Demographics>' but required in type 'Demographics'.
    273 |       const previousPatient = queryClient.getQueryData<Patient>(['patient', id]);
    274 |
  > 275 |       queryClient.setQueriesData<PaginatedResponse<Patient>>({ queryKey: ['patients'] }, (old) => {
        |                                                                                          ^^^^^^^^^^
    276 |         if (!old) return old;
    277 |         return {
    278 |           ...old,
ERROR in src/hooks/usePatients.ts:286:60
TS2345: Argument of type '{ updatedAt: string; demographics: Partial<Demographics>; bloodProfile: Partial<BloodProfile>; medicalHistory: Partial<MedicalHistory>; ... 8 more ...; updatedBy: string; }' is not assignable to parameter of type 'Updater<Patient | undefined, Patient | undefined>'.
  Type '{ updatedAt: string; demographics: Partial<Demographics>; bloodProfile: Partial<BloodProfile>; medicalHistory: Partial<MedicalHistory>; ... 8 more ...; updatedBy: string; }' is not assignable to type 'Patient' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
    Types of property 'demographics' are incompatible.
      Type 'Partial<Demographics>' is not assignable to type 'Demographics' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
    284 |
    285 |       if (previousPatient) {
  > 286 |         queryClient.setQueryData<Patient>(['patient', id], {
        |                                                            ^
  > 287 |           ...previousPatient,
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 288 |           ...patient,
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 289 |           updatedAt: new Date().toISOString()
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 290 |         });
        | ^^^^^^^^^^
    291 |       }
    292 |
    293 |       return { previousPatients, previousPatient };
ERROR in src/hooks/usePatients.ts:297:36
TS2559: Type 'string[]' has no properties in common with type 'QueryFilters<any, any, any, any>'.
    295 |     onError: (_err, { id }, context) => {
    296 |       if (context?.previousPatients) {
  > 297 |         queryClient.setQueriesData(['patients'], context.previousPatients);
        |                                    ^^^^^^^^^^^^
    298 |       }
    299 |       if (context?.previousPatient) {
    300 |         queryClient.setQueryData(['patient', id], context.previousPatient);
ERROR in src/hooks/usePatients.ts:313:5
TS2322: Type '(patientId: string | number) => Promise<{ previousPatients: PaginatedResponse<Patient> | undefined; }>' is not assignable to type '(variables: string | number) => MutationContext | Promise<MutationContext | undefined> | undefined'.
  Type 'Promise<{ previousPatients: PaginatedResponse<Patient> | undefined; }>' is not assignable to type 'MutationContext | Promise<MutationContext | undefined> | undefined'.
    Type 'Promise<{ previousPatients: PaginatedResponse<Patient> | undefined; }>' is not assignable to type 'Promise<MutationContext | undefined>'.
      Type '{ previousPatients: PaginatedResponse<Patient> | undefined; }' is not assignable to type 'MutationContext' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
        Types of property 'previousPatients' are incompatible.
          Type 'PaginatedResponse<Patient> | undefined' is not assignable to type 'PaginatedResponse<Patient>'.
            Type 'undefined' is not assignable to type 'PaginatedResponse<Patient>'.
    311 |   const deletePatientMutation = useMutation<void, Error, string | number, MutationContext>({
    312 |     mutationFn: (id) => patientService.deletePatient(id),
  > 313 |     onMutate: async (patientId) => {
        |     ^^^^^^^^
    314 |       await queryClient.cancelQueries({ queryKey: ['patients'] });
    315 |       const previousPatients = queryClient.getQueryData<PaginatedResponse<Patient>>(['patients']);
    316 |
ERROR in src/hooks/usePatients.ts:330:36
TS2559: Type 'string[]' has no properties in common with type 'QueryFilters<any, any, any, any>'.
    328 |     onError: (_err, _patientId, context) => {
    329 |       if (context?.previousPatients) {
  > 330 |         queryClient.setQueriesData(['patients'], context.previousPatients);
        |                                    ^^^^^^^^^^^^
    331 |       }
    332 |     },
    333 |     onSettled: (_data, _error, patientId) => {
ERROR in src/hooks/usePatients.ts:340:47
TS2339: Property 'batchOperations' does not exist on type '{ getPatients: (page: number, limit: number, filters?: FilterCriteria | undefined) => Promise<PaginatedResponse<Patient>>; ... 6 more ...; getPatientCautionCards: (id: string | number) => Promise<...>; }'.
    338 |
    339 |   const batchOperationsMutation = useMutation<BatchOperationResult, Error, BatchOperation, MutationContext>({
  > 340 |     mutationFn: (batchData) => patientService.batchOperations(batchData),
        |                                               ^^^^^^^^^^^^^^^
    341 |     onMutate: async (batchData) => {
    342 |       await queryClient.cancelQueries({ queryKey: ['patients'] });
    343 |       const previousPatients = queryClient.getQueryData<PaginatedResponse<Patient>>(['patients']);
ERROR in src/hooks/usePatients.ts:341:5
TS2322: Type '(batchData: BatchOperation) => Promise<{ previousPatients: PaginatedResponse<Patient> | undefined; }>' is not assignable to type '(variables: BatchOperation) => MutationContext | Promise<MutationContext | undefined> | undefined'.
  Type 'Promise<{ previousPatients: PaginatedResponse<Patient> | undefined; }>' is not assignable to type 'MutationContext | Promise<MutationContext | undefined> | undefined'.
    Type 'Promise<{ previousPatients: PaginatedResponse<Patient> | undefined; }>' is not assignable to type 'Promise<MutationContext | undefined>'.
      Type '{ previousPatients: PaginatedResponse<Patient> | undefined; }' is not assignable to type 'MutationContext' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
        Types of property 'previousPatients' are incompatible.
          Type 'PaginatedResponse<Patient> | undefined' is not assignable to type 'PaginatedResponse<Patient>'.
            Type 'undefined' is not assignable to type 'PaginatedResponse<Patient>'.
    339 |   const batchOperationsMutation = useMutation<BatchOperationResult, Error, BatchOperation, MutationContext>({
    340 |     mutationFn: (batchData) => patientService.batchOperations(batchData),
  > 341 |     onMutate: async (batchData) => {
        |     ^^^^^^^^
    342 |       await queryClient.cancelQueries({ queryKey: ['patients'] });
    343 |       const previousPatients = queryClient.getQueryData<PaginatedResponse<Patient>>(['patients']);
    344 |
ERROR in src/hooks/usePatients.ts:345:21
TS2551: Property 'operation' does not exist on type 'BatchOperation'. Did you mean 'operations'?
    343 |       const previousPatients = queryClient.getQueryData<PaginatedResponse<Patient>>(['patients']);
    344 |
  > 345 |       if (batchData.operation === 'delete') {
        |                     ^^^^^^^^^
    346 |         queryClient.setQueriesData<PaginatedResponse<Patient>>({ queryKey: ['patients'] }, (old) => {
    347 |           if (!old) return old;
    348 |           return {
ERROR in src/hooks/usePatients.ts:350:53
TS2339: Property 'patientIds' does not exist on type 'BatchOperation'.
    348 |           return {
    349 |             ...old,
  > 350 |             data: old.data.filter((p) => !batchData.patientIds.includes(p.id)),
        |                                                     ^^^^^^^^^^
    351 |             total: old.total - batchData.patientIds.length
    352 |           };
    353 |         });
ERROR in src/hooks/usePatients.ts:351:42
TS2339: Property 'patientIds' does not exist on type 'BatchOperation'.
    349 |             ...old,
    350 |             data: old.data.filter((p) => !batchData.patientIds.includes(p.id)),
  > 351 |             total: old.total - batchData.patientIds.length
        |                                          ^^^^^^^^^^
    352 |           };
    353 |         });
    354 |       }
ERROR in src/hooks/usePatients.ts:360:36
TS2559: Type 'string[]' has no properties in common with type 'QueryFilters<any, any, any, any>'.
    358 |     onError: (_err, _batchData, context) => {
    359 |       if (context?.previousPatients) {
  > 360 |         queryClient.setQueriesData(['patients'], context.previousPatients);
        |                                    ^^^^^^^^^^^^
    361 |       }
    362 |     },
    363 |     onSettled: () => {
ERROR in src/hooks/useReports.ts:5:43
TS2307: Cannot find module '../types' or its corresponding type declarations.
    3 | import * as reportService from '../api/reportService';
    4 | import * as uploadService from '../api/uploadService';
  > 5 | import { Report, PaginatedResponse } from '../types'; // Assuming types exist
      |                                           ^^^^^^^^^^
    6 |
    7 | // Define types later
    8 | // import { Report, ReportAttachment } from '../types/Report';
ERROR in src/hooks/useReports.ts:32:34
TS2339: Property 'getReports' does not exist on type 'typeof import("I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/api/reportService")'.
    30 |   return useQuery<PaginatedResponse<Report>, Error>({
    31 |     queryKey: reportKeys.list({ page, limit, ...filters }),
  > 32 |     queryFn: () => reportService.getReports(page, limit, filters),
       |                                  ^^^^^^^^^^
    33 |     keepPreviousData: true, // Useful for pagination UX
    34 |   });
    35 | };
ERROR in src/hooks/useReports.ts:33:5
TS2769: No overload matches this call.
  Overload 1 of 3, '(options: DefinedInitialDataOptions<PaginatedResponse<Report>, Error, PaginatedResponse<Report>, readonly unknown[]>, queryClient?: QueryClient | undefined): DefinedUseQueryResult<PaginatedResponse<Report>, Error>', gave the following error.
    Argument of type '{ queryKey: readonly ["reports", "list", object]; queryFn: () => any; keepPreviousData: boolean; }' is not assignable to parameter of type 'DefinedInitialDataOptions<PaginatedResponse<Report>, Error, PaginatedResponse<Report>, readonly unknown[]>'.
      Object literal may only specify known properties, and 'keepPreviousData' does not exist in type 'DefinedInitialDataOptions<PaginatedResponse<Report>, Error, PaginatedResponse<Report>, readonly unknown[]>'.
  Overload 2 of 3, '(options: UndefinedInitialDataOptions<PaginatedResponse<Report>, Error, PaginatedResponse<Report>, readonly unknown[]>, queryClient?: QueryClient | undefined): UseQueryResult<PaginatedResponse<Report>, Error>', gave the following error.
    Argument of type '{ queryKey: readonly ["reports", "list", object]; queryFn: () => any; keepPreviousData: boolean; }' is not assignable to parameter of type 'UndefinedInitialDataOptions<PaginatedResponse<Report>, Error, PaginatedResponse<Report>, readonly unknown[]>'.
      Object literal may only specify known properties, and 'keepPreviousData' does not exist in type 'UndefinedInitialDataOptions<PaginatedResponse<Report>, Error, PaginatedResponse<Report>, readonly unknown[]>'.
  Overload 3 of 3, '(options: UseQueryOptions<PaginatedResponse<Report>, Error, PaginatedResponse<Report>, readonly unknown[]>, queryClient?: QueryClient | undefined): UseQueryResult<PaginatedResponse<Report>, Error>', gave the following error.
    Argument of type '{ queryKey: readonly ["reports", "list", object]; queryFn: () => any; keepPreviousData: boolean; }' is not assignable to parameter of type 'UseQueryOptions<PaginatedResponse<Report>, Error, PaginatedResponse<Report>, readonly unknown[]>'.
      Object literal may only specify known properties, and 'keepPreviousData' does not exist in type 'UseQueryOptions<PaginatedResponse<Report>, Error, PaginatedResponse<Report>, readonly unknown[]>'.
    31 |     queryKey: reportKeys.list({ page, limit, ...filters }),
    32 |     queryFn: () => reportService.getReports(page, limit, filters),
  > 33 |     keepPreviousData: true, // Useful for pagination UX
       |     ^^^^^^^^^^^^^^^^^^^^^^
    34 |   });
    35 | };
    36 |
ERROR in src/hooks/useReports.ts:41:38
TS2339: Property 'getReportsByPatient' does not exist on type 'typeof import("I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/api/reportService")'.
    39 |     return useQuery<PaginatedResponse<Report>, Error>({
    40 |         queryKey: reportKeys.patientList(patientId, { page, limit }),
  > 41 |         queryFn: () => reportService.getReportsByPatient(patientId, page, limit),
       |                                      ^^^^^^^^^^^^^^^^^^^
    42 |         keepPreviousData: true,
    43 |         enabled: enabled && !!patientId, // Only run if patientId is valid and enabled flag is true
    44 |     });
ERROR in src/hooks/useReports.ts:42:9
TS2769: No overload matches this call.
  Overload 1 of 3, '(options: DefinedInitialDataOptions<PaginatedResponse<Report>, Error, PaginatedResponse<Report>, readonly unknown[]>, queryClient?: QueryClient | undefined): DefinedUseQueryResult<PaginatedResponse<Report>, Error>', gave the following error.
    Argument of type '{ queryKey: readonly ["reports", "patient", string, "list", object]; queryFn: () => any; keepPreviousData: boolean; enabled: boolean; }' is not assignable to parameter of type 'DefinedInitialDataOptions<PaginatedResponse<Report>, Error, PaginatedResponse<Report>, readonly unknown[]>'.
      Object literal may only specify known properties, and 'keepPreviousData' does not exist in type 'DefinedInitialDataOptions<PaginatedResponse<Report>, Error, PaginatedResponse<Report>, readonly unknown[]>'.
  Overload 2 of 3, '(options: UndefinedInitialDataOptions<PaginatedResponse<Report>, Error, PaginatedResponse<Report>, readonly unknown[]>, queryClient?: QueryClient | undefined): UseQueryResult<PaginatedResponse<Report>, Error>', gave the following error.
    Argument of type '{ queryKey: readonly ["reports", "patient", string, "list", object]; queryFn: () => any; keepPreviousData: boolean; enabled: boolean; }' is not assignable to parameter of type 'UndefinedInitialDataOptions<PaginatedResponse<Report>, Error, PaginatedResponse<Report>, readonly unknown[]>'.
      Object literal may only specify known properties, and 'keepPreviousData' does not exist in type 'UndefinedInitialDataOptions<PaginatedResponse<Report>, Error, PaginatedResponse<Report>, readonly unknown[]>'.
  Overload 3 of 3, '(options: UseQueryOptions<PaginatedResponse<Report>, Error, PaginatedResponse<Report>, readonly unknown[]>, queryClient?: QueryClient | undefined): UseQueryResult<PaginatedResponse<Report>, Error>', gave the following error.
    Argument of type '{ queryKey: readonly ["reports", "patient", string, "list", object]; queryFn: () => any; keepPreviousData: boolean; enabled: boolean; }' is not assignable to parameter of type 'UseQueryOptions<PaginatedResponse<Report>, Error, PaginatedResponse<Report>, readonly unknown[]>'.
      Object literal may only specify known properties, and 'keepPreviousData' does not exist in type 'UseQueryOptions<PaginatedResponse<Report>, Error, PaginatedResponse<Report>, readonly unknown[]>'.
    40 |         queryKey: reportKeys.patientList(patientId, { page, limit }),
    41 |         queryFn: () => reportService.getReportsByPatient(patientId, page, limit),
  > 42 |         keepPreviousData: true,
       |         ^^^^^^^^^^^^^^^^^^^^^^
    43 |         enabled: enabled && !!patientId, // Only run if patientId is valid and enabled flag is true
    44 |     });
    45 | };
ERROR in src/hooks/useReports.ts:51:38
TS2339: Property 'getReportById' does not exist on type 'typeof import("I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/api/reportService")'.
    49 |     return useQuery<Report, Error>({
    50 |         queryKey: reportKeys.detail(reportId),
  > 51 |         queryFn: () => reportService.getReportById(reportId),
       |                                      ^^^^^^^^^^^^^
    52 |         enabled: enabled && !!reportId,
    53 |     });
    54 | };
ERROR in src/hooks/useReports.ts:60:31
TS2339: Property 'deleteReportById' does not exist on type 'typeof import("I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/api/reportService")'.
    58 |   const queryClient = useQueryClient();
    59 |   return useMutation<void, Error, string>({
  > 60 |     mutationFn: reportService.deleteReportById, // Using the name from the created service file
       |                               ^^^^^^^^^^^^^^^^
    61 |     onSuccess: () => {
    62 |       // Invalidate queries related to reports lists to refresh data
    63 |       queryClient.invalidateQueries({ queryKey: reportKeys.lists() });
ERROR in src/hooks/useReports.ts:75:27
TS2339: Property 'uploadReport' does not exist on type 'typeof import("I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/api/uploadService")'.
    73 |     return useMutation<any, Error, { file: File; type: string; patientId?: string | number | null }>({
    74 |         mutationFn: (vars: { file: File; type: string; patientId?: string | number | null }) =>
  > 75 |             uploadService.uploadReport(vars),
       |                           ^^^^^^^^^^^^
    76 |         onSuccess: (data, variables) => {
    77 |             queryClient.invalidateQueries({ queryKey: reportKeys.lists() });
    78 |             if (variables.patientId) {
ERROR in src/hooks/useReports.ts:91:5
TS2560: Value of type '({ id, statusData }: { id: any; statusData: any; }) => any' has no properties in common with type 'UseMutationOptions<any, Error, { id: string | number; statusData: UpdateStatusParams; }, unknown>'. Did you mean to call it?
    89 |   const queryClient = useQueryClient();
    90 |   return useMutation<any, Error, { id: string | number; statusData: UpdateStatusParams }>(
  > 91 |     ({ id, statusData }) => reportService.updateReportStatus(id, statusData),
       |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    92 |     {
    93 |       onSuccess: (data, variables) => {
    94 |         queryClient.invalidateQueries(['report', variables.id]);
ERROR in src/hooks/useReports.ts:91:8
TS7031: Binding element 'id' implicitly has an 'any' type.
    89 |   const queryClient = useQueryClient();
    90 |   return useMutation<any, Error, { id: string | number; statusData: UpdateStatusParams }>(
  > 91 |     ({ id, statusData }) => reportService.updateReportStatus(id, statusData),
       |        ^^
    92 |     {
    93 |       onSuccess: (data, variables) => {
    94 |         queryClient.invalidateQueries(['report', variables.id]);
ERROR in src/hooks/useReports.ts:91:12
TS7031: Binding element 'statusData' implicitly has an 'any' type.
    89 |   const queryClient = useQueryClient();
    90 |   return useMutation<any, Error, { id: string | number; statusData: UpdateStatusParams }>(
  > 91 |     ({ id, statusData }) => reportService.updateReportStatus(id, statusData),
       |            ^^^^^^^^^^
    92 |     {
    93 |       onSuccess: (data, variables) => {
    94 |         queryClient.invalidateQueries(['report', variables.id]);
ERROR in src/hooks/useReports.ts:91:43
TS2339: Property 'updateReportStatus' does not exist on type 'typeof import("I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/api/reportService")'.
    89 |   const queryClient = useQueryClient();
    90 |   return useMutation<any, Error, { id: string | number; statusData: UpdateStatusParams }>(
  > 91 |     ({ id, statusData }) => reportService.updateReportStatus(id, statusData),
       |                                           ^^^^^^^^^^^^^^^^^^
    92 |     {
    93 |       onSuccess: (data, variables) => {
    94 |         queryClient.invalidateQueries(['report', variables.id]);
ERROR in src/hooks/useReports.ts:93:19
TS7006: Parameter 'data' implicitly has an 'any' type.
    91 |     ({ id, statusData }) => reportService.updateReportStatus(id, statusData),
    92 |     {
  > 93 |       onSuccess: (data, variables) => {
       |                   ^^^^
    94 |         queryClient.invalidateQueries(['report', variables.id]);
    95 |         queryClient.invalidateQueries(['reports']);
    96 |         // Update patient-reports cache too if relevant
ERROR in src/hooks/useReports.ts:93:25
TS7006: Parameter 'variables' implicitly has an 'any' type.
    91 |     ({ id, statusData }) => reportService.updateReportStatus(id, statusData),
    92 |     {
  > 93 |       onSuccess: (data, variables) => {
       |                         ^^^^^^^^^
    94 |         queryClient.invalidateQueries(['report', variables.id]);
    95 |         queryClient.invalidateQueries(['reports']);
    96 |         // Update patient-reports cache too if relevant
ERROR in src/hooks/useReports.ts:94:39
TS2559: Type 'any[]' has no properties in common with type 'InvalidateQueryFilters<unknown, Error, unknown, readonly unknown[]>'.
    92 |     {
    93 |       onSuccess: (data, variables) => {
  > 94 |         queryClient.invalidateQueries(['report', variables.id]);
       |                                       ^^^^^^^^^^^^^^^^^^^^^^^^
    95 |         queryClient.invalidateQueries(['reports']);
    96 |         // Update patient-reports cache too if relevant
    97 |         // queryClient.invalidateQueries(['patient-reports', patientId]);
ERROR in src/hooks/useReports.ts:95:39
TS2559: Type 'string[]' has no properties in common with type 'InvalidateQueryFilters<unknown, Error, unknown, readonly unknown[]>'.
    93 |       onSuccess: (data, variables) => {
    94 |         queryClient.invalidateQueries(['report', variables.id]);
  > 95 |         queryClient.invalidateQueries(['reports']);
       |                                       ^^^^^^^^^^^
    96 |         // Update patient-reports cache too if relevant
    97 |         // queryClient.invalidateQueries(['patient-reports', patientId]);
    98 |       },
ERROR in src/hooks/useReports.ts:105:3
TS2322: Type 'DefinedUseQueryResult<TQueryFnData, Error>' is not assignable to type 'UseQueryResult<any[], Error>'.
  Type 'QueryObserverRefetchErrorResult<TQueryFnData, Error>' is not assignable to type 'UseQueryResult<any[], Error>'.
    Type 'QueryObserverRefetchErrorResult<TQueryFnData, Error>' is not assignable to type 'QueryObserverRefetchErrorResult<any[], Error>'.
      Type 'TQueryFnData' is not assignable to type 'any[]'.
    103 | // Hook to fetch report attachments
    104 | export const useReportAttachments = (reportId: string | number | null | undefined): UseQueryResult<any[], Error> => {
  > 105 |   return useQuery<any[], Error>(
        |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 106 |     ['reportAttachments', reportId],
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 107 |     () => reportService.getReportAttachments(reportId!),
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 108 |     {
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 109 |       enabled: !!reportId,
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 110 |       staleTime: 5 * 60 * 1000,
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 111 |     }
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 112 |   );
        | ^^^^^
    113 | };
    114 |
    115 | // Hook to add a report attachment
ERROR in src/hooks/useReports.ts:107:25
TS2339: Property 'getReportAttachments' does not exist on type 'typeof import("I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/api/reportService")'.
    105 |   return useQuery<any[], Error>(
    106 |     ['reportAttachments', reportId],
  > 107 |     () => reportService.getReportAttachments(reportId!),
        |                         ^^^^^^^^^^^^^^^^^^^^
    108 |     {
    109 |       enabled: !!reportId,
    110 |       staleTime: 5 * 60 * 1000,
ERROR in src/hooks/useReports.ts:108:5
TS2554: Expected 1-2 arguments, but got 3.
    106 |     ['reportAttachments', reportId],
    107 |     () => reportService.getReportAttachments(reportId!),
  > 108 |     {
        |     ^
  > 109 |       enabled: !!reportId,
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 110 |       staleTime: 5 * 60 * 1000,
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 111 |     }
        | ^^^^^^
    112 |   );
    113 | };
    114 |
ERROR in src/hooks/useReports.ts:119:5
TS2560: Value of type '({ id, file }: { id: any; file: any; }) => any' has no properties in common with type 'UseMutationOptions<AddAttachmentResponse, Error, { id: string | number; file: File; }, unknown>'. Did you mean to call it?
    117 |   const queryClient = useQueryClient();
    118 |   return useMutation<AddAttachmentResponse, Error, { id: string | number; file: File }>(
  > 119 |     ({ id, file }) => reportService.addReportAttachment(id, file),
        |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    120 |     {
    121 |       onSuccess: (data, variables) => {
    122 |         queryClient.invalidateQueries(['reportAttachments', variables.id]);
ERROR in src/hooks/useReports.ts:119:8
TS7031: Binding element 'id' implicitly has an 'any' type.
    117 |   const queryClient = useQueryClient();
    118 |   return useMutation<AddAttachmentResponse, Error, { id: string | number; file: File }>(
  > 119 |     ({ id, file }) => reportService.addReportAttachment(id, file),
        |        ^^
    120 |     {
    121 |       onSuccess: (data, variables) => {
    122 |         queryClient.invalidateQueries(['reportAttachments', variables.id]);
ERROR in src/hooks/useReports.ts:119:12
TS7031: Binding element 'file' implicitly has an 'any' type.
    117 |   const queryClient = useQueryClient();
    118 |   return useMutation<AddAttachmentResponse, Error, { id: string | number; file: File }>(
  > 119 |     ({ id, file }) => reportService.addReportAttachment(id, file),
        |            ^^^^
    120 |     {
    121 |       onSuccess: (data, variables) => {
    122 |         queryClient.invalidateQueries(['reportAttachments', variables.id]);
ERROR in src/hooks/useReports.ts:119:37
TS2339: Property 'addReportAttachment' does not exist on type 'typeof import("I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/api/reportService")'.
    117 |   const queryClient = useQueryClient();
    118 |   return useMutation<AddAttachmentResponse, Error, { id: string | number; file: File }>(
  > 119 |     ({ id, file }) => reportService.addReportAttachment(id, file),
        |                                     ^^^^^^^^^^^^^^^^^^^
    120 |     {
    121 |       onSuccess: (data, variables) => {
    122 |         queryClient.invalidateQueries(['reportAttachments', variables.id]);
ERROR in src/hooks/useReports.ts:121:19
TS7006: Parameter 'data' implicitly has an 'any' type.
    119 |     ({ id, file }) => reportService.addReportAttachment(id, file),
    120 |     {
  > 121 |       onSuccess: (data, variables) => {
        |                   ^^^^
    122 |         queryClient.invalidateQueries(['reportAttachments', variables.id]);
    123 |       },
    124 |     }
ERROR in src/hooks/useReports.ts:121:25
TS7006: Parameter 'variables' implicitly has an 'any' type.
    119 |     ({ id, file }) => reportService.addReportAttachment(id, file),
    120 |     {
  > 121 |       onSuccess: (data, variables) => {
        |                         ^^^^^^^^^
    122 |         queryClient.invalidateQueries(['reportAttachments', variables.id]);
    123 |       },
    124 |     }
ERROR in src/hooks/useReports.ts:122:39
TS2559: Type 'any[]' has no properties in common with type 'InvalidateQueryFilters<unknown, Error, unknown, readonly unknown[]>'.
    120 |     {
    121 |       onSuccess: (data, variables) => {
  > 122 |         queryClient.invalidateQueries(['reportAttachments', variables.id]);
        |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    123 |       },
    124 |     }
    125 |   );
ERROR in src/hooks/useReports.ts:132:5
TS2560: Value of type '({ attachmentId }: { attachmentId: any; }) => any' has no properties in common with type 'UseMutationOptions<DeleteResponse, Error, { reportId: string | number; attachmentId: string | number; }, unknown>'. Did you mean to call it?
    130 |   const queryClient = useQueryClient();
    131 |   return useMutation<DeleteResponse, Error, { reportId: string | number; attachmentId: string | number }>(
  > 132 |     ({ attachmentId }) => reportService.deleteReportAttachment(attachmentId),
        |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    133 |     {
    134 |       onSuccess: (data, variables) => {
    135 |         queryClient.invalidateQueries(['reportAttachments', variables.reportId]);
ERROR in src/hooks/useReports.ts:132:8
TS7031: Binding element 'attachmentId' implicitly has an 'any' type.
    130 |   const queryClient = useQueryClient();
    131 |   return useMutation<DeleteResponse, Error, { reportId: string | number; attachmentId: string | number }>(
  > 132 |     ({ attachmentId }) => reportService.deleteReportAttachment(attachmentId),
        |        ^^^^^^^^^^^^
    133 |     {
    134 |       onSuccess: (data, variables) => {
    135 |         queryClient.invalidateQueries(['reportAttachments', variables.reportId]);
ERROR in src/hooks/useReports.ts:132:41
TS2339: Property 'deleteReportAttachment' does not exist on type 'typeof import("I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/api/reportService")'.
    130 |   const queryClient = useQueryClient();
    131 |   return useMutation<DeleteResponse, Error, { reportId: string | number; attachmentId: string | number }>(
  > 132 |     ({ attachmentId }) => reportService.deleteReportAttachment(attachmentId),
        |                                         ^^^^^^^^^^^^^^^^^^^^^^
    133 |     {
    134 |       onSuccess: (data, variables) => {
    135 |         queryClient.invalidateQueries(['reportAttachments', variables.reportId]);
ERROR in src/hooks/useReports.ts:134:19
TS7006: Parameter 'data' implicitly has an 'any' type.
    132 |     ({ attachmentId }) => reportService.deleteReportAttachment(attachmentId),
    133 |     {
  > 134 |       onSuccess: (data, variables) => {
        |                   ^^^^
    135 |         queryClient.invalidateQueries(['reportAttachments', variables.reportId]);
    136 |       },
    137 |     }
ERROR in src/hooks/useReports.ts:134:25
TS7006: Parameter 'variables' implicitly has an 'any' type.
    132 |     ({ attachmentId }) => reportService.deleteReportAttachment(attachmentId),
    133 |     {
  > 134 |       onSuccess: (data, variables) => {
        |                         ^^^^^^^^^
    135 |         queryClient.invalidateQueries(['reportAttachments', variables.reportId]);
    136 |       },
    137 |     }
ERROR in src/hooks/useReports.ts:135:39
TS2559: Type 'any[]' has no properties in common with type 'InvalidateQueryFilters<unknown, Error, unknown, readonly unknown[]>'.
    133 |     {
    134 |       onSuccess: (data, variables) => {
  > 135 |         queryClient.invalidateQueries(['reportAttachments', variables.reportId]);
        |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    136 |       },
    137 |     }
    138 |   );
ERROR in src/integration-tests/CautionCardWorkflow.test.tsx:271:27
TS2345: Argument of type 'HTMLElement | undefined' is not assignable to parameter of type 'Element'.
  Type 'undefined' is not assignable to type 'Element'.
    269 |     window.confirm = jest.fn(() => true);
    270 |     const deleteButtons = screen.getAllByRole('button', { name: /delete/i });
  > 271 |     await userEvent.click(deleteButtons[0]);
        |                           ^^^^^^^^^^^^^^^^
    272 |
    273 |     // 4. Verify original card is removed
    274 |     rerender(
ERROR in src/integration-tests/PatientReportWorkflow.test.tsx:235:27
TS2345: Argument of type 'HTMLElement | undefined' is not assignable to parameter of type 'Element'.
  Type 'undefined' is not assignable to type 'Element'.
    233 |     window.confirm = jest.fn(() => true);
    234 |     const deleteButtons = screen.getAllByRole('button', { name: /delete/i });
  > 235 |     await userEvent.click(deleteButtons[0]);
        |                           ^^^^^^^^^^^^^^^^
    236 |
    237 |     // 4. Verify original report is removed
    238 |     rerender(
ERROR in src/pages/CautionCardsPage.tsx:7:5
TS2305: Module '"../hooks/useCautionCards"' has no exported member 'useLinkCardToPatient'.
     5 |     useOrphanedCautionCards, 
     6 |     useDeleteCautionCard, 
  >  7 |     useLinkCardToPatient,
       |     ^^^^^^^^^^^^^^^^^^^^
     8 |     useReviewCautionCard
     9 | } from '../hooks/useCautionCards';
    10 | import { useProcessCautionCard } from '../hooks/useCautionCards'; // Separate hook for upload
ERROR in src/pages/CautionCardsPage.tsx:14:88
TS2307: Cannot find module '@mui/icons-material' or its corresponding type declarations.
    12 | import { AuthContext } from '../context/AuthContext'; // For delete/link user context
    13 | import { Box, Button, Card, CardContent, Typography, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, IconButton, Chip } from '@mui/material';
  > 14 | import { Delete as DeleteIcon, Link as LinkIcon, CheckCircle as CheckCircleIcon } from '@mui/icons-material';
       |                                                                                        ^^^^^^^^^^^^^^^^^^^^^
    15 | import { Pagination } from '../components/common/Pagination';
    16 | import { LoadingSpinner } from '../components/common/LoadingSpinner';
    17 | import { ErrorMessage } from '../components/common/ErrorMessage';
ERROR in src/pages/CautionCardsPage.tsx:15:10
TS2440: Import declaration conflicts with local declaration of 'Pagination'.
    13 | import { Box, Button, Card, CardContent, Typography, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, IconButton, Chip } from '@mui/material';
    14 | import { Delete as DeleteIcon, Link as LinkIcon, CheckCircle as CheckCircleIcon } from '@mui/icons-material';
  > 15 | import { Pagination } from '../components/common/Pagination';
       |          ^^^^^^^^^^
    16 | import { LoadingSpinner } from '../components/common/LoadingSpinner';
    17 | import { ErrorMessage } from '../components/common/ErrorMessage';
    18 | import { LinkCardModal } from '../components/caution-cards/LinkCardModal';
ERROR in src/pages/CautionCardsPage.tsx:17:30
TS2307: Cannot find module '../components/common/ErrorMessage' or its corresponding type declarations.
    15 | import { Pagination } from '../components/common/Pagination';
    16 | import { LoadingSpinner } from '../components/common/LoadingSpinner';
  > 17 | import { ErrorMessage } from '../components/common/ErrorMessage';
       |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    18 | import { LinkCardModal } from '../components/caution-cards/LinkCardModal';
    19 | import { formatDate } from '../utils/dateUtils';
    20 | // Import or define Pagination, FilterBar, UploadModal, LinkModal later
ERROR in src/pages/CautionCardsPage.tsx:50:44
TS4111: Property 'view' comes from an index signature, so it must be accessed with ['view'].
    48 |                     id="viewOrphaned" 
    49 |                     type="checkbox" 
  > 50 |                     checked={currentFilter.view === 'orphaned'}
       |                                            ^^^^
    51 |                     onChange={handleViewOrphaned} 
    52 |                     className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
    53 |                 />
ERROR in src/pages/CautionCardsPage.tsx:71:84
TS2345: Argument of type 'File | undefined' is not assignable to parameter of type 'File'.
  Type 'undefined' is not assignable to type 'File'.
    69 |                 <h3 className="text-xl font-semibold mb-4">Upload Caution Card</h3>
    70 |                 <p className="text-sm text-gray-600 mb-4">Select file for OCR processing.</p>
  > 71 |                 <input type="file" onChange={(e) => e.target.files && handleUpload(e.target.files[0])} />
       |                                                                                    ^^^^^^^^^^^^^^^^^
    72 |                 {processMutation.isLoading && <p>Processing...</p>}
    73 |                  {processMutation.isError && <p className="text-red-500">Error: {(processMutation.error as Error).message}</p>}
    74 |                 <button onClick={onClose} className="btn-secondary mt-4">Close</button>
ERROR in src/pages/CautionCardsPage.tsx:72:34
TS2339: Property 'isLoading' does not exist on type 'UseMutationResult<ProcessCardResponse, Error, File, unknown>'.
  Property 'isLoading' does not exist on type 'Override<MutationObserverIdleResult<ProcessCardResponse, Error, File, unknown>, { mutate: UseMutateFunction<ProcessCardResponse, Error, File, unknown>; }> & { ...; }'.
    70 |                 <p className="text-sm text-gray-600 mb-4">Select file for OCR processing.</p>
    71 |                 <input type="file" onChange={(e) => e.target.files && handleUpload(e.target.files[0])} />
  > 72 |                 {processMutation.isLoading && <p>Processing...</p>}
       |                                  ^^^^^^^^^
    73 |                  {processMutation.isError && <p className="text-red-500">Error: {(processMutation.error as Error).message}</p>}
    74 |                 <button onClick={onClose} className="btn-secondary mt-4">Close</button>
    75 |             </div>
ERROR in src/pages/CautionCardsPage.tsx:82:13
TS2339: Property 'user' does not exist on type 'AuthContextType | null'.
    80 | // Link to Patient Modal Placeholder (Implement fully later)
    81 | const LinkCardToPatientModal = ({ isOpen, onClose, cardId }: { isOpen: boolean; onClose: () => void; cardId: string | number | null }) => {
  > 82 |     const { user } = useContext(AuthContext);
       |             ^^^^
    83 |     const linkMutation = useLinkCardToPatient();
    84 |     const [selectedPatientId, setSelectedPatientId] = useState<string | number | null>(null);
    85 |     // TODO: Implement Patient Search Input
ERROR in src/pages/CautionCardsPage.tsx:115:13
TS2339: Property 'user' does not exist on type 'AuthContextType | null'.
    113 |     const [filters, setFilters] = useState<Record<string, any>>({ view: 'all' }); // Default view
    114 |     const itemsPerPage = 15;
  > 115 |     const { user } = useContext(AuthContext);
        |             ^^^^
    116 |     
    117 |     // Choose hook based on filter
    118 |     const isOrphanedView = filters.view === 'orphaned';
ERROR in src/pages/CautionCardsPage.tsx:118:36
TS4111: Property 'view' comes from an index signature, so it must be accessed with ['view'].
    116 |     
    117 |     // Choose hook based on filter
  > 118 |     const isOrphanedView = filters.view === 'orphaned';
        |                                    ^^^^
    119 |     const allCardsQuery = useCautionCards({ page: page, limit: itemsPerPage, ...filters }, !isOrphanedView); // Enable only if not orphaned view
    120 |     const orphanedCardsQuery = useOrphanedCautionCards(isOrphanedView); // Enable only if orphaned view
    121 |     
ERROR in src/pages/CautionCardsPage.tsx:119:43
TS2345: Argument of type '{ page: number; limit: number; }' is not assignable to parameter of type 'number'.
    117 |     // Choose hook based on filter
    118 |     const isOrphanedView = filters.view === 'orphaned';
  > 119 |     const allCardsQuery = useCautionCards({ page: page, limit: itemsPerPage, ...filters }, !isOrphanedView); // Enable only if not orphaned view
        |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    120 |     const orphanedCardsQuery = useOrphanedCautionCards(isOrphanedView); // Enable only if orphaned view
    121 |     
    122 |     // Determine which data/state to use
ERROR in src/pages/CautionCardsPage.tsx:120:56
TS2345: Argument of type 'boolean' is not assignable to parameter of type 'number'.
    118 |     const isOrphanedView = filters.view === 'orphaned';
    119 |     const allCardsQuery = useCautionCards({ page: page, limit: itemsPerPage, ...filters }, !isOrphanedView); // Enable only if not orphaned view
  > 120 |     const orphanedCardsQuery = useOrphanedCautionCards(isOrphanedView); // Enable only if orphaned view
        |                                                        ^^^^^^^^^^^^^^
    121 |     
    122 |     // Determine which data/state to use
    123 |     const queryResult = isOrphanedView ? orphanedCardsQuery : allCardsQuery;
ERROR in src/pages/CautionCardsPage.tsx:164:13
TS2304: Cannot find name 'linkCardMutation'.
    162 |     const handleLinkConfirm = (patientId: string) => {
    163 |         if (cardToLink) {
  > 164 |             linkCardMutation.mutate({ cardId: cardToLink, patientId }, {
        |             ^^^^^^^^^^^^^^^^
    165 |                 onSuccess: () => {
    166 |                     setShowLinkModal(false);
    167 |                     setCardToLink(null);
ERROR in src/pages/CautionCardsPage.tsx:175:37
TS2345: Argument of type '{ cardId: string; }' is not assignable to parameter of type 'ReviewCardParams'.
  Object literal may only specify known properties, and 'cardId' does not exist in type 'ReviewCardParams'.
    173 |
    174 |     const handleReviewClick = (cardId: string) => {
  > 175 |         reviewCardMutation.mutate({ cardId }, {
        |                                     ^^^^^^
    176 |             onSuccess: () => refetch()
    177 |         });
    178 |     };
ERROR in src/pages/CautionCardsPage.tsx:181:60
TS2304: Cannot find name 'PaginatedCardsResponse'.
    179 |
    180 |     // Data extraction (handles both paginated and simple array responses)
  > 181 |     const cards = isOrphanedView ? (data || []) : (data as PaginatedCardsResponse)?.data || [];
        |                                                            ^^^^^^^^^^^^^^^^^^^^^^
    182 |     const totalItems = isOrphanedView ? cards.length : (data as PaginatedCardsResponse)?.total || 0;
    183 |     const totalPages = isOrphanedView ? 1 : Math.ceil(totalItems / itemsPerPage);
    184 |
ERROR in src/pages/CautionCardsPage.tsx:182:65
TS2304: Cannot find name 'PaginatedCardsResponse'.
    180 |     // Data extraction (handles both paginated and simple array responses)
    181 |     const cards = isOrphanedView ? (data || []) : (data as PaginatedCardsResponse)?.data || [];
  > 182 |     const totalItems = isOrphanedView ? cards.length : (data as PaginatedCardsResponse)?.total || 0;
        |                                                                 ^^^^^^^^^^^^^^^^^^^^^^
    183 |     const totalPages = isOrphanedView ? 1 : Math.ceil(totalItems / itemsPerPage);
    184 |
    185 |     if (error) {
ERROR in src/pages/CautionCardsPage.tsx:210:45
TS7006: Parameter 'card' implicitly has an 'any' type.
    208 |                             </TableHead>
    209 |                             <TableBody>
  > 210 |                                 {cards.map((card) => (
        |                                             ^^^^
    211 |                                     <TableRow key={card.id}>
    212 |                                         <TableCell>{card.file_name || card.id}</TableCell>
    213 |                                         <TableCell>{card.blood_type || 'N/A'}</TableCell>
ERROR in src/pages/CautionCardsPage.tsx:232:95
TS2339: Property 'isLoading' does not exist on type 'UseMutationResult<CautionCard, Error, ReviewCardParams, unknown>'.
  Property 'isLoading' does not exist on type 'Override<MutationObserverIdleResult<CautionCard, Error, ReviewCardParams, unknown>, { mutate: UseMutateFunction<CautionCard, Error, ReviewCardParams, unknown>; }> & { ...; }'.
    230 |                                             <IconButton
    231 |                                                 onClick={() => handleReviewClick(card.id)}
  > 232 |                                                 disabled={card.reviewed || reviewCardMutation.isLoading}
        |                                                                                               ^^^^^^^^^
    233 |                                                 title="Mark as reviewed"
    234 |                                             >
    235 |                                                 <CheckCircleIcon />
ERROR in src/pages/CautionCardsPage.tsx:240:63
TS2304: Cannot find name 'linkCardMutation'.
    238 |                                                 <IconButton
    239 |                                                     onClick={() => openLinkConfirmation(card.id)}
  > 240 |                                                     disabled={linkCardMutation.isLoading}
        |                                                               ^^^^^^^^^^^^^^^^
    241 |                                                     title="Link to patient"
    242 |                                                 >
    243 |                                                     <LinkIcon />
ERROR in src/pages/CautionCardsPage.tsx:248:78
TS2339: Property 'isLoading' does not exist on type 'UseMutationResult<void, Error, DeleteCardParams, unknown>'.
  Property 'isLoading' does not exist on type 'Override<MutationObserverIdleResult<void, Error, DeleteCardParams, unknown>, { mutate: UseMutateFunction<void, Error, DeleteCardParams, unknown>; }> & { ...; }'.
    246 |                                             <IconButton
    247 |                                                 onClick={() => openDeleteConfirmation(card.id)}
  > 248 |                                                 disabled={deleteCardMutation.isLoading && deleteCardMutation.variables?.id === card.id}
        |                                                                              ^^^^^^^^^
    249 |                                                 title="Delete card"
    250 |                                             >
    251 |                                                 <DeleteIcon />
ERROR in src/pages/CautionCardsPage.tsx:260:22
TS2304: Cannot find name 'cardsData'.
    258 |                     </TableContainer>
    259 |
  > 260 |                     {cardsData && (
        |                      ^^^^^^^^^
    261 |                         <Box sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}>
    262 |                             <Pagination
    263 |                                 currentPage={page}
ERROR in src/pages/CautionCardsPage.tsx:274:17
TS2322: Type '{ isOpen: boolean; onClose: () => void; onConfirm: () => void; title: string; message: string; confirmButtonText: string; isLoading: any; }' is not assignable to type 'IntrinsicAttributes & ConfirmationModalProps'.
  Property 'onClose' does not exist on type 'IntrinsicAttributes & ConfirmationModalProps'.
    272 |             <ConfirmationModal
    273 |                 isOpen={showDeleteModal}
  > 274 |                 onClose={closeDeleteConfirmation}
        |                 ^^^^^^^
    275 |                 onConfirm={confirmDelete}
    276 |                 title="Delete Caution Card"
    277 |                 message="Are you sure you want to delete this caution card? This action cannot be undone."
ERROR in src/pages/CautionCardsPage.tsx:279:47
TS2339: Property 'isLoading' does not exist on type 'UseMutationResult<void, Error, DeleteCardParams, unknown>'.
  Property 'isLoading' does not exist on type 'Override<MutationObserverIdleResult<void, Error, DeleteCardParams, unknown>, { mutate: UseMutateFunction<void, Error, DeleteCardParams, unknown>; }> & { ...; }'.
    277 |                 message="Are you sure you want to delete this caution card? This action cannot be undone."
    278 |                 confirmButtonText="Delete"
  > 279 |                 isLoading={deleteCardMutation.isLoading}
        |                                               ^^^^^^^^^
    280 |             />
    281 |
    282 |             <LinkCardModal
ERROR in src/pages/CautionCardsPage.tsx:286:28
TS2304: Cannot find name 'linkCardMutation'.
    284 |                 onClose={() => setShowLinkModal(false)}
    285 |                 onConfirm={handleLinkConfirm}
  > 286 |                 isLoading={linkCardMutation.isLoading}
        |                            ^^^^^^^^^^^^^^^^
    287 |             />
    288 |         </Box>
    289 |     );
ERROR in src/pages/LoginPage.tsx:27:24
TS2345: Argument of type 'LoginCredentials' is not assignable to parameter of type '{ email: string; password: string; }'.
  Property 'email' is missing in type 'LoginCredentials' but required in type '{ email: string; password: string; }'.
    25 |     setStatus({ loginError: null }); // Clear previous errors
    26 |     try {
  > 27 |       await auth.login(values);
       |                        ^^^^^^
    28 |       navigate(from, { replace: true }); // Redirect to original destination
    29 |     } catch (error: any) {
    30 |       console.error("Login failed:", error);
ERROR in src/pages/PatientDetailPage.tsx:14:78
TS2307: Cannot find module '@mui/icons-material' or its corresponding type declarations.
    12 |     IconButton
    13 | } from '@mui/material';
  > 14 | import { Edit as EditIcon, Delete as DeleteIcon, Upload as UploadIcon } from '@mui/icons-material';
       |                                                                              ^^^^^^^^^^^^^^^^^^^^^
    15 | import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
    16 | import { Patient } from '../types/Patient';
    17 | import { DataField } from '../components/DataField';
ERROR in src/pages/PatientDetailPage.tsx:18:35
TS2306: File 'I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/components/ConfirmationModal.tsx' is not a module.
    16 | import { Patient } from '../types/Patient';
    17 | import { DataField } from '../components/DataField';
  > 18 | import { ConfirmationModal } from '../components/ConfirmationModal';
       |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    19 | import { ReportUploadModal } from '../components/reports/ReportUploadModal';
    20 | import { PatientReportsList } from '../components/patients/PatientReportsList';
    21 | import { PatientCautionCardList } from '../components/patients/PatientCautionCardList';
ERROR in src/pages/PatientDetailPage.tsx:19:10
TS2614: Module '"../components/reports/ReportUploadModal"' has no exported member 'ReportUploadModal'. Did you mean to use 'import ReportUploadModal from "../components/reports/ReportUploadModal"' instead?
    17 | import { DataField } from '../components/DataField';
    18 | import { ConfirmationModal } from '../components/ConfirmationModal';
  > 19 | import { ReportUploadModal } from '../components/reports/ReportUploadModal';
       |          ^^^^^^^^^^^^^^^^^
    20 | import { PatientReportsList } from '../components/patients/PatientReportsList';
    21 | import { PatientCautionCardList } from '../components/patients/PatientCautionCardList';
    22 | import { ErrorMessage } from '../components/common/ErrorMessage';
ERROR in src/pages/PatientDetailPage.tsx:22:30
TS2307: Cannot find module '../components/common/ErrorMessage' or its corresponding type declarations.
    20 | import { PatientReportsList } from '../components/patients/PatientReportsList';
    21 | import { PatientCautionCardList } from '../components/patients/PatientCautionCardList';
  > 22 | import { ErrorMessage } from '../components/common/ErrorMessage';
       |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    23 | import { showToast } from '../utils/toast';
    24 | import { deletePatient, getPatient } from '../api/patients';
    25 | import { withErrorBoundary } from '../components/common/withErrorBoundary';
ERROR in src/pages/PatientDetailPage.tsx:23:27
TS2307: Cannot find module '../utils/toast' or its corresponding type declarations.
    21 | import { PatientCautionCardList } from '../components/patients/PatientCautionCardList';
    22 | import { ErrorMessage } from '../components/common/ErrorMessage';
  > 23 | import { showToast } from '../utils/toast';
       |                           ^^^^^^^^^^^^^^^^
    24 | import { deletePatient, getPatient } from '../api/patients';
    25 | import { withErrorBoundary } from '../components/common/withErrorBoundary';
    26 |
ERROR in src/pages/PatientDetailPage.tsx:24:43
TS2307: Cannot find module '../api/patients' or its corresponding type declarations.
    22 | import { ErrorMessage } from '../components/common/ErrorMessage';
    23 | import { showToast } from '../utils/toast';
  > 24 | import { deletePatient, getPatient } from '../api/patients';
       |                                           ^^^^^^^^^^^^^^^^^
    25 | import { withErrorBoundary } from '../components/common/withErrorBoundary';
    26 |
    27 | const PatientDetailPageContent: React.FC = () => {
ERROR in src/pages/PatientDetailPage.tsx:109:25
TS2769: No overload matches this call.
  Overload 1 of 2, '(props: { component: ElementType<any, keyof IntrinsicElements>; } & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<...>): Element | null', gave the following error.
    Property 'component' is missing in type '{ children: Element[]; item: true; xs: number; md: number; }' but required in type '{ component: ElementType<any, keyof IntrinsicElements>; }'.
  Overload 2 of 2, '(props: DefaultComponentProps<GridTypeMap<{}, "div">>): Element | null', gave the following error.
    Type '{ children: Element[]; item: true; xs: number; md: number; }' is not assignable to type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, StandardSystemKeys | ... 1 more ... | keyof GridBaseProps>'.
      Property 'item' does not exist on type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, StandardSystemKeys | ... 1 more ... | keyof GridBaseProps>'.
    107 |                     </Typography>
    108 |                     <Grid container spacing={3}>
  > 109 |                         <Grid item xs={12} md={6}>
        |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
    110 |                             <DataField label="First Name" value={patient.demographics.firstName} />
    111 |                             <DataField label="Last Name" value={patient.demographics.lastName} />
    112 |                             <DataField label="MRN" value={patient.identification.mrn} />
ERROR in src/pages/PatientDetailPage.tsx:113:87
TS2339: Property 'bloodType' does not exist on type 'BloodProfile'.
    111 |                             <DataField label="Last Name" value={patient.demographics.lastName} />
    112 |                             <DataField label="MRN" value={patient.identification.mrn} />
  > 113 |                             <DataField label="Blood Type" value={patient.bloodProfile.bloodType} />
        |                                                                                       ^^^^^^^^^
    114 |                         </Grid>
    115 |                         <Grid item xs={12} md={6}>
    116 |                             <DataField label="Date of Birth" value={patient.demographics.dateOfBirth} />
ERROR in src/pages/PatientDetailPage.tsx:115:25
TS2769: No overload matches this call.
  Overload 1 of 2, '(props: { component: ElementType<any, keyof IntrinsicElements>; } & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<...>): Element | null', gave the following error.
    Property 'component' is missing in type '{ children: Element[]; item: true; xs: number; md: number; }' but required in type '{ component: ElementType<any, keyof IntrinsicElements>; }'.
  Overload 2 of 2, '(props: DefaultComponentProps<GridTypeMap<{}, "div">>): Element | null', gave the following error.
    Type '{ children: Element[]; item: true; xs: number; md: number; }' is not assignable to type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, StandardSystemKeys | ... 1 more ... | keyof GridBaseProps>'.
      Property 'item' does not exist on type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, StandardSystemKeys | ... 1 more ... | keyof GridBaseProps>'.
    113 |                             <DataField label="Blood Type" value={patient.bloodProfile.bloodType} />
    114 |                         </Grid>
  > 115 |                         <Grid item xs={12} md={6}>
        |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
    116 |                             <DataField label="Date of Birth" value={patient.demographics.dateOfBirth} />
    117 |                             <DataField label="Gender" value={patient.demographics.gender} />
    118 |                             <DataField label="Contact" value={patient.demographics.contactNumber} />
ERROR in src/pages/PatientDetailPage.tsx:122:29
TS2769: No overload matches this call.
  Overload 1 of 2, '(props: { component: ElementType<any, keyof IntrinsicElements>; } & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<...>): Element | null', gave the following error.
    Property 'component' is missing in type '{ children: Element[]; item: true; xs: number; }' but required in type '{ component: ElementType<any, keyof IntrinsicElements>; }'.
  Overload 2 of 2, '(props: DefaultComponentProps<GridTypeMap<{}, "div">>): Element | null', gave the following error.
    Type '{ children: Element[]; item: true; xs: number; }' is not assignable to type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, StandardSystemKeys | ... 1 more ... | keyof GridBaseProps>'.
      Property 'item' does not exist on type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, StandardSystemKeys | ... 1 more ... | keyof GridBaseProps>'.
    120 |                         </Grid>
    121 |                         {patient.notes && patient.notes.length > 0 && (
  > 122 |                             <Grid item xs={12}>
        |                             ^^^^^^^^^^^^^^^^^^^
    123 |                                 <Divider sx={{ my: 2 }} />
    124 |                                 <Typography variant="subtitle2" color="text.secondary" gutterBottom>
    125 |                                     Notes
ERROR in src/pages/PatientFormPage.tsx:36:58
TS2459: Module '"../hooks/usePatients"' declares 'UpdatePatientRequest' locally, but it is not exported.
    34 | } from '../types/Patient';
    35 | import { AuthContext } from '../context/AuthContext';
  > 36 | import { usePatient, useCreatePatient, useUpdatePatient, UpdatePatientRequest } from '../hooks/usePatients';
       |                                                          ^^^^^^^^^^^^^^^^^^^^
    37 | import { usePatientCautionCards } from '../hooks/useCautionCards';
    38 | import { PhenotypeInputGrid } from '../components/PhenotypeInputGrid';
    39 | import { PhenotypeDisplay } from '../components/PhenotypeDisplay';
ERROR in src/pages/PatientFormPage.tsx:65:13
TS2559: Type 'string' has no properties in common with type 'RhPhenotype'.
    63 |         antibodies: [],
    64 |         phenotype: {
  > 65 |             rh: 'Unknown',
       |             ^^
    66 |             kell: 'Unknown',
    67 |             duffy: 'Unknown',
    68 |             kidd: 'Unknown',
ERROR in src/pages/PatientFormPage.tsx:66:13
TS2559: Type 'string' has no properties in common with type 'KellPhenotype'.
    64 |         phenotype: {
    65 |             rh: 'Unknown',
  > 66 |             kell: 'Unknown',
       |             ^^^^
    67 |             duffy: 'Unknown',
    68 |             kidd: 'Unknown',
    69 |             mns: 'Unknown'
ERROR in src/pages/PatientFormPage.tsx:67:13
TS2559: Type 'string' has no properties in common with type 'DuffyPhenotype'.
    65 |             rh: 'Unknown',
    66 |             kell: 'Unknown',
  > 67 |             duffy: 'Unknown',
       |             ^^^^^
    68 |             kidd: 'Unknown',
    69 |             mns: 'Unknown'
    70 |         }
ERROR in src/pages/PatientFormPage.tsx:68:13
TS2559: Type 'string' has no properties in common with type 'KiddPhenotype'.
    66 |             kell: 'Unknown',
    67 |             duffy: 'Unknown',
  > 68 |             kidd: 'Unknown',
       |             ^^^^
    69 |             mns: 'Unknown'
    70 |         }
    71 |     },
ERROR in src/pages/PatientFormPage.tsx:69:13
TS2559: Type 'string' has no properties in common with type 'MNSPhenotype'.
    67 |             duffy: 'Unknown',
    68 |             kidd: 'Unknown',
  > 69 |             mns: 'Unknown'
       |             ^^^
    70 |         }
    71 |     },
    72 |     medicalHistory: {
ERROR in src/pages/PatientFormPage.tsx:176:28
TS2790: The operand of a 'delete' operator must be optional.
    174 |
    175 |                 if (!canEditAdvancedFields && finalCreatePayload.bloodProfile) {
  > 176 |                     delete finalCreatePayload.bloodProfile.phenotype;
        |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    177 |                     delete finalCreatePayload.bloodProfile.antibodies;
    178 |                 }
    179 |
ERROR in src/pages/PatientFormPage.tsx:177:28
TS2790: The operand of a 'delete' operator must be optional.
    175 |                 if (!canEditAdvancedFields && finalCreatePayload.bloodProfile) {
    176 |                     delete finalCreatePayload.bloodProfile.phenotype;
  > 177 |                     delete finalCreatePayload.bloodProfile.antibodies;
        |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    178 |                 }
    179 |
    180 |                 const newPatient = await createPatientMutation.mutateAsync(finalCreatePayload);
ERROR in src/pages/PatientFormPage.tsx:227:37
TS2769: No overload matches this call.
  Overload 1 of 2, '(props: { component: ElementType<any, keyof IntrinsicElements>; } & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<...>): Element | null', gave the following error.
    Property 'component' is missing in type '{ children: Element; item: true; xs: number; sm: number; }' but required in type '{ component: ElementType<any, keyof IntrinsicElements>; }'.
  Overload 2 of 2, '(props: DefaultComponentProps<GridTypeMap<{}, "div">>): Element | null', gave the following error.
    Type '{ children: Element; item: true; xs: number; sm: number; }' is not assignable to type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, StandardSystemKeys | ... 1 more ... | keyof GridBaseProps>'.
      Property 'item' does not exist on type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, StandardSystemKeys | ... 1 more ... | keyof GridBaseProps>'.
    225 |                                 <Typography variant="h6" gutterBottom>Basic Information</Typography>
    226 |                                 <Grid container spacing={2}>
  > 227 |                                     <Grid item xs={12} sm={6}>
        |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    228 |                                         <Field
    229 |                                             as={TextField}
    230 |                                             fullWidth
ERROR in src/pages/PatientFormPage.tsx:233:74
TS2339: Property 'lastName' does not exist on type 'boolean'.
    231 |                                             name="demographics.lastName"
    232 |                                             label="Last Name"
  > 233 |                                             error={touched.demographics?.lastName && !!errors.demographics?.lastName}
        |                                                                          ^^^^^^^^
    234 |                                             helperText={touched.demographics?.lastName && errors.demographics?.lastName}
    235 |                                             required
    236 |                                         />
ERROR in src/pages/PatientFormPage.tsx:233:109
TS2339: Property 'lastName' does not exist on type 'string'.
    231 |                                             name="demographics.lastName"
    232 |                                             label="Last Name"
  > 233 |                                             error={touched.demographics?.lastName && !!errors.demographics?.lastName}
        |                                                                                                             ^^^^^^^^
    234 |                                             helperText={touched.demographics?.lastName && errors.demographics?.lastName}
    235 |                                             required
    236 |                                         />
ERROR in src/pages/PatientFormPage.tsx:234:79
TS2339: Property 'lastName' does not exist on type 'boolean'.
    232 |                                             label="Last Name"
    233 |                                             error={touched.demographics?.lastName && !!errors.demographics?.lastName}
  > 234 |                                             helperText={touched.demographics?.lastName && errors.demographics?.lastName}
        |                                                                               ^^^^^^^^
    235 |                                             required
    236 |                                         />
    237 |                                     </Grid>
ERROR in src/pages/PatientFormPage.tsx:234:112
TS2339: Property 'lastName' does not exist on type 'string'.
    232 |                                             label="Last Name"
    233 |                                             error={touched.demographics?.lastName && !!errors.demographics?.lastName}
  > 234 |                                             helperText={touched.demographics?.lastName && errors.demographics?.lastName}
        |                                                                                                                ^^^^^^^^
    235 |                                             required
    236 |                                         />
    237 |                                     </Grid>
ERROR in src/pages/PatientFormPage.tsx:238:37
TS2769: No overload matches this call.
  Overload 1 of 2, '(props: { component: ElementType<any, keyof IntrinsicElements>; } & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<...>): Element | null', gave the following error.
    Property 'component' is missing in type '{ children: Element; item: true; xs: number; sm: number; }' but required in type '{ component: ElementType<any, keyof IntrinsicElements>; }'.
  Overload 2 of 2, '(props: DefaultComponentProps<GridTypeMap<{}, "div">>): Element | null', gave the following error.
    Type '{ children: Element; item: true; xs: number; sm: number; }' is not assignable to type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, StandardSystemKeys | ... 1 more ... | keyof GridBaseProps>'.
      Property 'item' does not exist on type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, StandardSystemKeys | ... 1 more ... | keyof GridBaseProps>'.
    236 |                                         />
    237 |                                     </Grid>
  > 238 |                                     <Grid item xs={12} sm={6}>
        |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    239 |                                         <Field
    240 |                                             as={TextField}
    241 |                                             fullWidth
ERROR in src/pages/PatientFormPage.tsx:244:74
TS2339: Property 'firstName' does not exist on type 'boolean'.
    242 |                                             name="demographics.firstName"
    243 |                                             label="First Name"
  > 244 |                                             error={touched.demographics?.firstName && !!errors.demographics?.firstName}
        |                                                                          ^^^^^^^^^
    245 |                                             helperText={touched.demographics?.firstName && errors.demographics?.firstName}
    246 |                                             required
    247 |                                         />
ERROR in src/pages/PatientFormPage.tsx:244:110
TS2339: Property 'firstName' does not exist on type 'string'.
    242 |                                             name="demographics.firstName"
    243 |                                             label="First Name"
  > 244 |                                             error={touched.demographics?.firstName && !!errors.demographics?.firstName}
        |                                                                                                              ^^^^^^^^^
    245 |                                             helperText={touched.demographics?.firstName && errors.demographics?.firstName}
    246 |                                             required
    247 |                                         />
ERROR in src/pages/PatientFormPage.tsx:245:79
TS2339: Property 'firstName' does not exist on type 'boolean'.
    243 |                                             label="First Name"
    244 |                                             error={touched.demographics?.firstName && !!errors.demographics?.firstName}
  > 245 |                                             helperText={touched.demographics?.firstName && errors.demographics?.firstName}
        |                                                                               ^^^^^^^^^
    246 |                                             required
    247 |                                         />
    248 |                                     </Grid>
ERROR in src/pages/PatientFormPage.tsx:245:113
TS2339: Property 'firstName' does not exist on type 'string'.
    243 |                                             label="First Name"
    244 |                                             error={touched.demographics?.firstName && !!errors.demographics?.firstName}
  > 245 |                                             helperText={touched.demographics?.firstName && errors.demographics?.firstName}
        |                                                                                                                 ^^^^^^^^^
    246 |                                             required
    247 |                                         />
    248 |                                     </Grid>
ERROR in src/pages/PatientFormPage.tsx:249:37
TS2769: No overload matches this call.
  Overload 1 of 2, '(props: { component: ElementType<any, keyof IntrinsicElements>; } & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<...>): Element | null', gave the following error.
    Property 'component' is missing in type '{ children: Element; item: true; xs: number; sm: number; }' but required in type '{ component: ElementType<any, keyof IntrinsicElements>; }'.
  Overload 2 of 2, '(props: DefaultComponentProps<GridTypeMap<{}, "div">>): Element | null', gave the following error.
    Type '{ children: Element; item: true; xs: number; sm: number; }' is not assignable to type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, StandardSystemKeys | ... 1 more ... | keyof GridBaseProps>'.
      Property 'item' does not exist on type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, StandardSystemKeys | ... 1 more ... | keyof GridBaseProps>'.
    247 |                                         />
    248 |                                     </Grid>
  > 249 |                                     <Grid item xs={12} sm={6}>
        |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    250 |                                         <Field
    251 |                                             as={TextField}
    252 |                                             fullWidth
ERROR in src/pages/PatientFormPage.tsx:255:76
TS2339: Property 'mrn' does not exist on type 'boolean'.
    253 |                                             name="identification.mrn"
    254 |                                             label="Medical Record Number"
  > 255 |                                             error={touched.identification?.mrn && !!errors.identification?.mrn}
        |                                                                            ^^^
    256 |                                             helperText={touched.identification?.mrn && errors.identification?.mrn}
    257 |                                             required
    258 |                                         />
ERROR in src/pages/PatientFormPage.tsx:255:108
TS2339: Property 'mrn' does not exist on type 'string'.
    253 |                                             name="identification.mrn"
    254 |                                             label="Medical Record Number"
  > 255 |                                             error={touched.identification?.mrn && !!errors.identification?.mrn}
        |                                                                                                            ^^^
    256 |                                             helperText={touched.identification?.mrn && errors.identification?.mrn}
    257 |                                             required
    258 |                                         />
ERROR in src/pages/PatientFormPage.tsx:256:81
TS2339: Property 'mrn' does not exist on type 'boolean'.
    254 |                                             label="Medical Record Number"
    255 |                                             error={touched.identification?.mrn && !!errors.identification?.mrn}
  > 256 |                                             helperText={touched.identification?.mrn && errors.identification?.mrn}
        |                                                                                 ^^^
    257 |                                             required
    258 |                                         />
    259 |                                     </Grid>
ERROR in src/pages/PatientFormPage.tsx:256:111
TS2339: Property 'mrn' does not exist on type 'string'.
    254 |                                             label="Medical Record Number"
    255 |                                             error={touched.identification?.mrn && !!errors.identification?.mrn}
  > 256 |                                             helperText={touched.identification?.mrn && errors.identification?.mrn}
        |                                                                                                               ^^^
    257 |                                             required
    258 |                                         />
    259 |                                     </Grid>
ERROR in src/pages/PatientFormPage.tsx:260:37
TS2769: No overload matches this call.
  Overload 1 of 2, '(props: { component: ElementType<any, keyof IntrinsicElements>; } & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<...>): Element | null', gave the following error.
    Property 'component' is missing in type '{ children: Element; item: true; xs: number; sm: number; }' but required in type '{ component: ElementType<any, keyof IntrinsicElements>; }'.
  Overload 2 of 2, '(props: DefaultComponentProps<GridTypeMap<{}, "div">>): Element | null', gave the following error.
    Type '{ children: Element; item: true; xs: number; sm: number; }' is not assignable to type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, StandardSystemKeys | ... 1 more ... | keyof GridBaseProps>'.
      Property 'item' does not exist on type 'IntrinsicAttributes & GridBaseProps & { sx?: SxProps<Theme>; } & SystemProps<Theme> & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & { ...; }, StandardSystemKeys | ... 1 more ... | keyof GridBaseProps>'.
    258 |                                         />
    259 |                                     </Grid>
  > 260 |                                     <Grid item xs={12} sm={6}>
        |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    261 |                                         <FormControl fullWidth error={touched.bloodProfile?.bloodType && !!errors.bloodProfile?.bloodType}>
    262 |                                             <InputLabel id="blood-type-label">Blood Type</InputLabel>
    263 |                                             <Field
ERROR in src/pages/PatientFormPage.tsx:261:93
TS2339: Property 'bloodType' does not exist on type 'boolean'.
    259 |                                     </Grid>
    260 |                                     <Grid item xs={12} sm={6}>
  > 261 |                                         <FormControl fullWidth error={touched.bloodProfile?.bloodType && !!errors.bloodProfile?.bloodType}>
        |                                                                                             ^^^^^^^^^
    262 |                                             <InputLabel id="blood-type-label">Blood Type</InputLabel>
    263 |                                             <Field
    264 |                                                 as={Select}
ERROR in src/pages/PatientFormPage.tsx:261:129
TS2339: Property 'bloodType' does not exist on type 'string'.
    259 |                                     </Grid>
    260 |                                     <Grid item xs={12} sm={6}>
  > 261 |                                         <FormControl fullWidth error={touched.bloodProfile?.bloodType && !!errors.bloodProfile?.bloodType}>
        |                                                                                                                                 ^^^^^^^^^
    262 |                                             <InputLabel id="blood-type-label">Blood Type</InputLabel>
    263 |                                             <Field
    264 |                                                 as={Select}
ERROR in src/pages/PatientFormPage.tsx:273:68
TS2339: Property 'bloodType' does not exist on type 'boolean'.
    271 |                                                 ))}
    272 |                                             </Field>
  > 273 |                                             {touched.bloodProfile?.bloodType && errors.bloodProfile?.bloodType && (
        |                                                                    ^^^^^^^^^
    274 |                                                 <FormHelperText>{errors.bloodProfile.bloodType}</FormHelperText>
    275 |                                             )}
    276 |                                         </FormControl>
ERROR in src/pages/PatientFormPage.tsx:273:102
TS2339: Property 'bloodType' does not exist on type 'string'.
    271 |                                                 ))}
    272 |                                             </Field>
  > 273 |                                             {touched.bloodProfile?.bloodType && errors.bloodProfile?.bloodType && (
        |                                                                                                      ^^^^^^^^^
    274 |                                                 <FormHelperText>{errors.bloodProfile.bloodType}</FormHelperText>
    275 |                                             )}
    276 |                                         </FormControl>
ERROR in src/pages/PatientFormPage.tsx:274:86
TS2339: Property 'bloodType' does not exist on type 'string'.
    272 |                                             </Field>
    273 |                                             {touched.bloodProfile?.bloodType && errors.bloodProfile?.bloodType && (
  > 274 |                                                 <FormHelperText>{errors.bloodProfile.bloodType}</FormHelperText>
        |                                                                                      ^^^^^^^^^
    275 |                                             )}
    276 |                                         </FormControl>
    277 |                                     </Grid>
ERROR in src/pages/PatientFormPage.tsx:287:41
TS2412: Type 'BloodPhenotype | undefined' is not assignable to type 'BloodPhenotype | undefined' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the type of the target.
    285 |                                 {canEditAdvancedFields ? (
    286 |                                     <PhenotypeInputGrid
  > 287 |                                         value={values.bloodProfile?.phenotype}
        |                                         ^^^^^
    288 |                                         onChange={(val: BloodPhenotype) => setFieldValue('bloodProfile.phenotype', val)}
    289 |                                     />
    290 |                                 ) : (
ERROR in src/pages/PatientFormPage.tsx:292:59
TS2412: Type 'BloodPhenotype | undefined' is not assignable to type 'BloodPhenotype | undefined' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the type of the target.
    290 |                                 ) : (
    291 |                                     <>
  > 292 |                                         <PhenotypeDisplay phenotypeData={values.bloodProfile?.phenotype} />
        |                                                           ^^^^^^^^^^^^^
    293 |                                         <Typography variant="caption" color="text.secondary" sx={{ mt: 1, display: 'block' }}>
    294 |                                             Phenotype information is managed via the linked Caution Card.
    295 |                                         </Typography>
ERROR in src/pages/PatientFormPage.tsx:311:42
TS2375: Type '{ antibodies: string[] | undefined; }' is not assignable to type 'AntibodyDisplayProps' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
  Types of property 'antibodies' are incompatible.
    Type 'string[] | undefined' is not assignable to type 'string[]'.
      Type 'undefined' is not assignable to type 'string[]'.
    309 |                                 ) : (
    310 |                                     <>
  > 311 |                                         <AntibodyDisplay antibodies={values.bloodProfile?.antibodies} />
        |                                          ^^^^^^^^^^^^^^^
    312 |                                         <Typography variant="caption" color="text.secondary" sx={{ mt: 1, display: 'block' }}>
    313 |                                             Antibody information is managed via the linked Caution Card.
    314 |                                         </Typography>
ERROR in src/pages/PatientsPage.tsx:102:10
TS2375: Type '{ patients: Patient[]; onDelete: (patientId: string | number) => void; isDeleting: any; deletingId: string | number | undefined; }' is not assignable to type 'VirtualizedPatientListProps' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
  Types of property 'deletingId' are incompatible.
    Type 'string | number | undefined' is not assignable to type 'string | number'.
      Type 'undefined' is not assignable to type 'string | number'.
    100 |       
    101 |       {!isLoading && patients.length > 0 && (
  > 102 |         <VirtualizedPatientList
        |          ^^^^^^^^^^^^^^^^^^^^^^
    103 |           patients={patients}
    104 |           onDelete={handleDeleteClick}
    105 |           isDeleting={deletePatientMutation.isLoading}
ERROR in src/pages/PatientsPage.tsx:105:45
TS2339: Property 'isLoading' does not exist on type 'UseMutationResult<void, Error, string | number, MutationContext>'.
  Property 'isLoading' does not exist on type 'Override<MutationObserverIdleResult<void, Error, string | number, MutationContext>, { mutate: UseMutateFunction<void, Error, string | number, MutationContext>; }> & { ...; }'.
    103 |           patients={patients}
    104 |           onDelete={handleDeleteClick}
  > 105 |           isDeleting={deletePatientMutation.isLoading}
        |                                             ^^^^^^^^^
    106 |           deletingId={patientToDelete || undefined}
    107 |         />
    108 |       )}
ERROR in src/pages/PatientsPage.tsx:122:9
TS2322: Type '{ currentPage: number; totalPages: number; onPageChange: (page: number) => void; className: string; }' is not assignable to type 'IntrinsicAttributes & PaginationProps'.
  Property 'className' does not exist on type 'IntrinsicAttributes & PaginationProps'.
    120 |         totalPages={totalPages}
    121 |         onPageChange={handlePageChange}
  > 122 |         className="mt-4"
        |         ^^^^^^^^^
    123 |       />
    124 |       
    125 |       <ConfirmationModal
ERROR in src/pages/PatientsPage.tsx:130:45
TS2339: Property 'isLoading' does not exist on type 'UseMutationResult<void, Error, string | number, MutationContext>'.
  Property 'isLoading' does not exist on type 'Override<MutationObserverIdleResult<void, Error, string | number, MutationContext>, { mutate: UseMutateFunction<void, Error, string | number, MutationContext>; }> & { ...; }'.
    128 |         message={`Are you sure you want to delete this patient${patientToDelete ? ` (ID: ${patientToDelete})` : ''}? This action cannot be undone.`}
    129 |         confirmText="Delete"
  > 130 |         isConfirming={deletePatientMutation.isLoading}
        |                                             ^^^^^^^^^
    131 |         onConfirm={handleDeleteConfirm}
    132 |         onCancel={handleDeleteCancel}
    133 |       />
ERROR in src/pages/PatientsPage.tsx:141:7
TS2412: Type 'string | null | undefined' is not assignable to type 'string | undefined' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the type of the target.
    139 |   const handleError = (error: Error, errorInfo: React.ErrorInfo) => {
    140 |     errorReportingService.logError(error, {
  > 141 |       componentStack: errorInfo.componentStack
        |       ^^^^^^^^^^^^^^
    142 |     });
    143 |   };
    144 |
ERROR in src/pages/ReportsPage.tsx:5:62
TS2307: Cannot find module '@mui/icons-material' or its corresponding type declarations.
    3 | import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
    4 | import { Box, Button, Typography, CircularProgress, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@mui/material';
  > 5 | import { Delete as DeleteIcon, Visibility as ViewIcon } from '@mui/icons-material';
      |                                                              ^^^^^^^^^^^^^^^^^^^^^
    6 | import { getReports, deleteReport, Report } from '../api/reports'; // Assuming API functions exist
    7 | import { Pagination } from '../components/Pagination';
    8 | import { ConfirmationModal } from '../components/ConfirmationModal';
ERROR in src/pages/ReportsPage.tsx:6:50
TS2307: Cannot find module '../api/reports' or its corresponding type declarations.
    4 | import { Box, Button, Typography, CircularProgress, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@mui/material';
    5 | import { Delete as DeleteIcon, Visibility as ViewIcon } from '@mui/icons-material';
  > 6 | import { getReports, deleteReport, Report } from '../api/reports'; // Assuming API functions exist
      |                                                  ^^^^^^^^^^^^^^^^
    7 | import { Pagination } from '../components/Pagination';
    8 | import { ConfirmationModal } from '../components/ConfirmationModal';
    9 | import { ReportFilters, ReportFilterControls } from '../components/reports/ReportFilterControls';
ERROR in src/pages/ReportsPage.tsx:8:35
TS2306: File 'I:/PatientDatabaseV2/frontend-storybook/patient-ui/src/components/ConfirmationModal.tsx' is not a module.
     6 | import { getReports, deleteReport, Report } from '../api/reports'; // Assuming API functions exist
     7 | import { Pagination } from '../components/Pagination';
  >  8 | import { ConfirmationModal } from '../components/ConfirmationModal';
       |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     9 | import { ReportFilters, ReportFilterControls } from '../components/reports/ReportFilterControls';
    10 | import { ErrorMessage } from '../components/common/ErrorMessage';
    11 | import { showToast } from '../utils/toast';
ERROR in src/pages/ReportsPage.tsx:9:53
TS2307: Cannot find module '../components/reports/ReportFilterControls' or its corresponding type declarations.
     7 | import { Pagination } from '../components/Pagination';
     8 | import { ConfirmationModal } from '../components/ConfirmationModal';
  >  9 | import { ReportFilters, ReportFilterControls } from '../components/reports/ReportFilterControls';
       |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    10 | import { ErrorMessage } from '../components/common/ErrorMessage';
    11 | import { showToast } from '../utils/toast';
    12 | import { withErrorBoundary } from '../components/common/withErrorBoundary';
ERROR in src/pages/ReportsPage.tsx:10:30
TS2307: Cannot find module '../components/common/ErrorMessage' or its corresponding type declarations.
     8 | import { ConfirmationModal } from '../components/ConfirmationModal';
     9 | import { ReportFilters, ReportFilterControls } from '../components/reports/ReportFilterControls';
  > 10 | import { ErrorMessage } from '../components/common/ErrorMessage';
       |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    11 | import { showToast } from '../utils/toast';
    12 | import { withErrorBoundary } from '../components/common/withErrorBoundary';
    13 |
ERROR in src/pages/ReportsPage.tsx:11:27
TS2307: Cannot find module '../utils/toast' or its corresponding type declarations.
     9 | import { ReportFilters, ReportFilterControls } from '../components/reports/ReportFilterControls';
    10 | import { ErrorMessage } from '../components/common/ErrorMessage';
  > 11 | import { showToast } from '../utils/toast';
       |                           ^^^^^^^^^^^^^^^^
    12 | import { withErrorBoundary } from '../components/common/withErrorBoundary';
    13 |
    14 | const ITEMS_PER_PAGE = 10;
ERROR in src/pages/ReportsPage.tsx:25:9
TS2769: No overload matches this call.
  Overload 1 of 3, '(options: DefinedInitialDataOptions<unknown, Error, unknown, any[]>, queryClient?: QueryClient | undefined): DefinedUseQueryResult<unknown, Error>', gave the following error.
    Argument of type '{ queryKey: any[]; queryFn: () => any; keepPreviousData: boolean; }' is not assignable to parameter of type 'DefinedInitialDataOptions<unknown, Error, unknown, any[]>'.
      Object literal may only specify known properties, and 'keepPreviousData' does not exist in type 'DefinedInitialDataOptions<unknown, Error, unknown, any[]>'.
  Overload 2 of 3, '(options: UndefinedInitialDataOptions<any, Error, any, any[]>, queryClient?: QueryClient | undefined): UseQueryResult<any, Error>', gave the following error.
    Argument of type '{ queryKey: any[]; queryFn: () => any; keepPreviousData: boolean; }' is not assignable to parameter of type 'UndefinedInitialDataOptions<any, Error, any, any[]>'.
      Object literal may only specify known properties, and 'keepPreviousData' does not exist in type 'UndefinedInitialDataOptions<any, Error, any, any[]>'.
  Overload 3 of 3, '(options: UseQueryOptions<any, Error, any, any[]>, queryClient?: QueryClient | undefined): UseQueryResult<any, Error>', gave the following error.
    Argument of type '{ queryKey: any[]; queryFn: () => any; keepPreviousData: boolean; }' is not assignable to parameter of type 'UseQueryOptions<any, Error, any, any[]>'.
      Object literal may only specify known properties, and 'keepPreviousData' does not exist in type 'UseQueryOptions<any, Error, any, any[]>'.
    23 |         queryKey: ['reports', currentPage, filters],
    24 |         queryFn: () => getReports({ page: currentPage, limit: ITEMS_PER_PAGE, ...filters }),
  > 25 |         keepPreviousData: true, // Useful for pagination
       |         ^^^^^^^^^^^^^^^^^^^^^^
    26 |     });
    27 |
    28 |     const deleteReportMutation = useMutation<void, Error, string | number>({
ERROR in src/pages/ReportsPage.tsx:60:38
TS2339: Property 'data' does not exist on type '{}'.
    58 |     };
    59 |
  > 60 |     const reports = reportsResponse?.data || [];
       |                                      ^^^^
    61 |     const totalItems = reportsResponse?.total || 0;
    62 |     const totalPages = Math.ceil(totalItems / ITEMS_PER_PAGE);
    63 |
ERROR in src/pages/ReportsPage.tsx:61:41
TS2339: Property 'total' does not exist on type '{}'.
    59 |
    60 |     const reports = reportsResponse?.data || [];
  > 61 |     const totalItems = reportsResponse?.total || 0;
       |                                         ^^^^^
    62 |     const totalPages = Math.ceil(totalItems / ITEMS_PER_PAGE);
    63 |
    64 |     if (error) {
ERROR in src/pages/ReportsPage.tsx:127:29
TS2322: Type '{ currentPage: number; totalPages: number; onPageChange: (page: number) => void; className: string; sx: { mt: number; display: string; justifyContent: string; }; }' is not assignable to type 'IntrinsicAttributes & PaginationProps'.
  Property 'sx' does not exist on type 'IntrinsicAttributes & PaginationProps'.
    125 |                             onPageChange={handlePageChange}
    126 |                             className="mt-4" // Using class name for potential Tailwind styling
  > 127 |                             sx={{ mt: 2, display: 'flex', justifyContent: 'center' }} // Added MUI styling
        |                             ^^
    128 |                         />
    129 |                     )}
    130 |                 </>
ERROR in src/stories/caution-cards/CautionCardBatch.stories.tsx:3:44
TS2307: Cannot find module '../../utils/mockData' or its corresponding type declarations.
    1 | import { Meta, StoryObj } from '@storybook/react';
    2 | import { CautionCardBatch } from '../../components/caution-cards/CautionCardBatch';
  > 3 | import { mockCards as baseMockCards } from '../../utils/mockData'; // Assuming mockData provides valid CautionCards now
      |                                            ^^^^^^^^^^^^^^^^^^^^^^
    4 | import { CautionCard } from '../../types/cautionCard';
    5 |
    6 | // Ensure mock data conforms to CautionCard type
ERROR in src/stories/caution-cards/CautionCardBatch.stories.tsx:7:65
TS7006: Parameter 'card' implicitly has an 'any' type.
     5 |
     6 | // Ensure mock data conforms to CautionCard type
  >  7 | const mockCards: CautionCard[] = baseMockCards.slice(0, 3).map((card, index) => ({
       |                                                                 ^^^^
     8 |   ...card,
     9 |   id: index + 1, // Ensure unique ID
    10 |   // Add any missing required fields if baseMockCards is incomplete
ERROR in src/stories/caution-cards/CautionCardBatch.stories.tsx:7:71
TS7006: Parameter 'index' implicitly has an 'any' type.
     5 |
     6 | // Ensure mock data conforms to CautionCard type
  >  7 | const mockCards: CautionCard[] = baseMockCards.slice(0, 3).map((card, index) => ({
       |                                                                       ^^^^^
     8 |   ...card,
     9 |   id: index + 1, // Ensure unique ID
    10 |   // Add any missing required fields if baseMockCards is incomplete
ERROR in src/stories/caution-cards/CautionCardBatch.stories.tsx:34:5
TS2322: Type '{ selectedCards: { control: "object"; }; currentUser: { control: "text"; }; onCancel: { action: string; }; onSuccess: { action: string; }; onError: { action: string; }; }' is not assignable to type 'Partial<ArgTypes<CautionCardBatchProps>>'.
  Object literal may only specify known properties, and 'onError' does not exist in type 'Partial<ArgTypes<CautionCardBatchProps>>'.
    32 |     onCancel: { action: 'cancelled' },
    33 |     onSuccess: { action: 'batchSuccess' },
  > 34 |     onError: { action: 'batchError' },
       |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    35 |   },
    36 | };
    37 |
ERROR in src/stories/caution-cards/CautionCardBatch.stories.tsx:47:5
TS2322: Type '{ selectedCards: CautionCard[]; currentUser: string; onCancel: () => void; onSuccess: () => void; onError: (error: any) => void; }' is not assignable to type 'Partial<CautionCardBatchProps>'.
  Object literal may only specify known properties, and 'onError' does not exist in type 'Partial<CautionCardBatchProps>'.
    45 |     onCancel: () => console.log('Cancel clicked'),
    46 |     onSuccess: () => console.log('Batch operation successful'),
  > 47 |     onError: (error) => console.error('Batch error:', error),
       |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    48 |   },
    49 | };
    50 |
ERROR in src/stories/caution-cards/CautionCardBatch.stories.tsx:47:15
TS7006: Parameter 'error' implicitly has an 'any' type.
    45 |     onCancel: () => console.log('Cancel clicked'),
    46 |     onSuccess: () => console.log('Batch operation successful'),
  > 47 |     onError: (error) => console.error('Batch error:', error),
       |               ^^^^^
    48 |   },
    49 | };
    50 |
ERROR in src/stories/caution-cards/CautionCardBatch.stories.tsx:53:21
TS2322: Type 'CautionCard | undefined' is not assignable to type 'CautionCard'.
  Type 'undefined' is not assignable to type 'CautionCard'.
    51 | export const SingleCard: Story = {
    52 |   args: {
  > 53 |     selectedCards: [mockCards[0]],
       |                     ^^^^^^^^^^^^
    54 |     currentUser: 'john.doe',
    55 |     onCancel: () => console.log('Cancel clicked'),
    56 |     onSuccess: () => console.log('Batch operation successful'),
ERROR in src/stories/caution-cards/CautionCardBatch.stories.tsx:57:15
TS7006: Parameter 'error' implicitly has an 'any' type.
    55 |     onCancel: () => console.log('Cancel clicked'),
    56 |     onSuccess: () => console.log('Batch operation successful'),
  > 57 |     onError: (error) => console.error('Batch error:', error),
       |               ^^^^^
    58 |   },
    59 | };
    60 |
ERROR in src/stories/caution-cards/CautionCardBatch.stories.tsx:70:5
TS2322: Type '{ selectedCards: CautionCard[]; currentUser: string; onCancel: () => void; onSuccess: () => void; onError: (error: any) => void; }' is not assignable to type 'Partial<CautionCardBatchProps>'.
  Object literal may only specify known properties, and 'onError' does not exist in type 'Partial<CautionCardBatchProps>'.
    68 |     onCancel: () => console.log('Cancel clicked'),
    69 |     onSuccess: () => console.log('Batch operation successful'),
  > 70 |     onError: (error) => console.error('Batch error:', error),
       |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    71 |   },
    72 | };
    73 |
ERROR in src/stories/caution-cards/CautionCardBatch.stories.tsx:70:15
TS7006: Parameter 'error' implicitly has an 'any' type.
    68 |     onCancel: () => console.log('Cancel clicked'),
    69 |     onSuccess: () => console.log('Batch operation successful'),
  > 70 |     onError: (error) => console.error('Batch error:', error),
       |               ^^^^^
    71 |   },
    72 | };
    73 |
ERROR in src/stories/caution-cards/CautionCardBatch.stories.tsx:80:5
TS2322: Type '{ selectedCards: never[]; currentUser: string; onCancel: () => void; onSuccess: () => void; onError: (error: any) => void; }' is not assignable to type 'Partial<CautionCardBatchProps>'.
  Object literal may only specify known properties, and 'onError' does not exist in type 'Partial<CautionCardBatchProps>'.
    78 |     onCancel: () => console.log('Cancel clicked'),
    79 |     onSuccess: () => console.log('Should not succeed with empty selection'),
  > 80 |     onError: (error) => console.error('Batch error:', error),
       |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    81 |   },
    82 | }; 
ERROR in src/stories/caution-cards/CautionCardBatch.stories.tsx:80:15
TS7006: Parameter 'error' implicitly has an 'any' type.
    78 |     onCancel: () => console.log('Cancel clicked'),
    79 |     onSuccess: () => console.log('Should not succeed with empty selection'),
  > 80 |     onError: (error) => console.error('Batch error:', error),
       |               ^^^^^
    81 |   },
    82 | }; 
ERROR in src/stories/caution-cards/CautionCardReview.stories.tsx:3:42
TS2307: Cannot find module '../../utils/mockData' or its corresponding type declarations.
    1 | import { Meta, StoryObj } from '@storybook/react';
    2 | import { CautionCardReview } from '../../components/caution-cards/CautionCardReview';
  > 3 | import { mockCard as baseMockCard } from '../../utils/mockData';
      |                                          ^^^^^^^^^^^^^^^^^^^^^^
    4 | import { CautionCard } from '../../types/cautionCard';
    5 |
    6 | // Ensure mock data conforms to CautionCard type
ERROR in src/stories/caution-cards/CautionCardReview.stories.tsx:33:9
TS2322: Type '{ card: { control: "object"; }; currentUser: { control: "text"; }; onCancel: { action: string; }; onSuccess: { action: string; }; onError: { action: string; }; }' is not assignable to type 'Partial<ArgTypes<CautionCardReviewProps>>'.
  Object literal may only specify known properties, and 'onError' does not exist in type 'Partial<ArgTypes<CautionCardReviewProps>>'.
    31 |         onCancel: { action: 'cancelled' },
    32 |         onSuccess: { action: 'reviewSuccess' },
  > 33 |         onError: { action: 'reviewError' },
       |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    34 |     },
    35 | };
    36 |
ERROR in src/stories/caution-cards/CautionCardReview.stories.tsx:45:9
TS2322: Type '(reviewedCard: any) => void' is not assignable to type '() => void'.
    43 |         currentUser: 'john.doe',
    44 |         onCancel: () => console.log('Cancel clicked'),
  > 45 |         onSuccess: (reviewedCard) => console.log('Review successful', reviewedCard),
       |         ^^^^^^^^^
    46 |         onError: (error) => console.error('Review error:', error),
    47 |     },
    48 | };
ERROR in src/stories/caution-cards/CautionCardReview.stories.tsx:45:21
TS7006: Parameter 'reviewedCard' implicitly has an 'any' type.
    43 |         currentUser: 'john.doe',
    44 |         onCancel: () => console.log('Cancel clicked'),
  > 45 |         onSuccess: (reviewedCard) => console.log('Review successful', reviewedCard),
       |                     ^^^^^^^^^^^^
    46 |         onError: (error) => console.error('Review error:', error),
    47 |     },
    48 | };
ERROR in src/stories/caution-cards/CautionCardReview.stories.tsx:46:19
TS7006: Parameter 'error' implicitly has an 'any' type.
    44 |         onCancel: () => console.log('Cancel clicked'),
    45 |         onSuccess: (reviewedCard) => console.log('Review successful', reviewedCard),
  > 46 |         onError: (error) => console.error('Review error:', error),
       |                   ^^^^^
    47 |     },
    48 | };
    49 |
ERROR in src/stories/caution-cards/CautionCardReview.stories.tsx:55:9
TS2322: Type '(reviewedCard: any) => void' is not assignable to type '() => void'.
    53 |         currentUser: 'john.doe',
    54 |         onCancel: () => console.log('Cancel clicked'),
  > 55 |         onSuccess: (reviewedCard) => console.log('Review successful', reviewedCard),
       |         ^^^^^^^^^
    56 |         onError: (error) => console.error('Review error:', error),
    57 |     },
    58 | };
ERROR in src/stories/caution-cards/CautionCardReview.stories.tsx:55:21
TS7006: Parameter 'reviewedCard' implicitly has an 'any' type.
    53 |         currentUser: 'john.doe',
    54 |         onCancel: () => console.log('Cancel clicked'),
  > 55 |         onSuccess: (reviewedCard) => console.log('Review successful', reviewedCard),
       |                     ^^^^^^^^^^^^
    56 |         onError: (error) => console.error('Review error:', error),
    57 |     },
    58 | };
ERROR in src/stories/caution-cards/CautionCardReview.stories.tsx:56:19
TS7006: Parameter 'error' implicitly has an 'any' type.
    54 |         onCancel: () => console.log('Cancel clicked'),
    55 |         onSuccess: (reviewedCard) => console.log('Review successful', reviewedCard),
  > 56 |         onError: (error) => console.error('Review error:', error),
       |                   ^^^^^
    57 |     },
    58 | };
    59 |
ERROR in src/stories/caution-cards/CautionCardReview.stories.tsx:71:9
TS2322: Type '(reviewedCard: any) => void' is not assignable to type '() => void'.
    69 |         currentUser: 'jane.doe',
    70 |         onCancel: () => console.log('Cancel clicked'),
  > 71 |         onSuccess: (reviewedCard) => console.log('Review successful', reviewedCard),
       |         ^^^^^^^^^
    72 |         onError: (error) => console.error('Review error:', error),
    73 |     },
    74 | };
ERROR in src/stories/caution-cards/CautionCardReview.stories.tsx:71:21
TS7006: Parameter 'reviewedCard' implicitly has an 'any' type.
    69 |         currentUser: 'jane.doe',
    70 |         onCancel: () => console.log('Cancel clicked'),
  > 71 |         onSuccess: (reviewedCard) => console.log('Review successful', reviewedCard),
       |                     ^^^^^^^^^^^^
    72 |         onError: (error) => console.error('Review error:', error),
    73 |     },
    74 | };
ERROR in src/stories/caution-cards/CautionCardReview.stories.tsx:72:19
TS7006: Parameter 'error' implicitly has an 'any' type.
    70 |         onCancel: () => console.log('Cancel clicked'),
    71 |         onSuccess: (reviewedCard) => console.log('Review successful', reviewedCard),
  > 72 |         onError: (error) => console.error('Review error:', error),
       |                   ^^^^^
    73 |     },
    74 | };
    75 |
ERROR in src/stories/caution-cards/CautionCardStats.stories.tsx:23:7
TS2322: Type '"pending" | "reviewed" | undefined' is not assignable to type '"pending" | "reviewed"'.
  Type 'undefined' is not assignable to type '"pending" | "reviewed"'.
    21 |       ocr_text: `OCR text for card ${i + 1}`,
    22 |       metadata: { source: 'bulk_upload' },
  > 23 |       status: statuses[i % statuses.length],
       |       ^^^^^^
    24 |       patient_id: i % 10 === 0 ? null : (100 + i % 10), // Some orphaned
    25 |       created_at: new Date(Date.now() - i * 1000 * 60 * 60).toISOString(),
    26 |       updated_at: new Date().toISOString(),
ERROR in src/stories/caution-cards/CautionCardStats.stories.tsx:24:7
TS2322: Type 'number | null' is not assignable to type 'number'.
  Type 'null' is not assignable to type 'number'.
    22 |       metadata: { source: 'bulk_upload' },
    23 |       status: statuses[i % statuses.length],
  > 24 |       patient_id: i % 10 === 0 ? null : (100 + i % 10), // Some orphaned
       |       ^^^^^^^^^^
    25 |       created_at: new Date(Date.now() - i * 1000 * 60 * 60).toISOString(),
    26 |       updated_at: new Date().toISOString(),
    27 |     });
ERROR in src/stories/caution-cards/OrphanedCautionCards.stories.tsx:2:38
TS2307: Cannot find module '../../components/caution-cards/OrphanedCautionCards' or its corresponding type declarations.
    1 | import { Meta, StoryObj } from '@storybook/react';
  > 2 | import { OrphanedCautionCards } from '../../components/caution-cards/OrphanedCautionCards';
      |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    3 | import { mockOrphanedCards as baseMockCards } from '../../utils/mockData';
    4 | import { CautionCard } from '../../types/cautionCard';
    5 |
ERROR in src/stories/caution-cards/OrphanedCautionCards.stories.tsx:3:52
TS2307: Cannot find module '../../utils/mockData' or its corresponding type declarations.
    1 | import { Meta, StoryObj } from '@storybook/react';
    2 | import { OrphanedCautionCards } from '../../components/caution-cards/OrphanedCautionCards';
  > 3 | import { mockOrphanedCards as baseMockCards } from '../../utils/mockData';
      |                                                    ^^^^^^^^^^^^^^^^^^^^^^
    4 | import { CautionCard } from '../../types/cautionCard';
    5 |
    6 | // Ensure mock data conforms to CautionCard type
ERROR in src/stories/caution-cards/OrphanedCautionCards.stories.tsx:8:13
TS7006: Parameter 'card' implicitly has an 'any' type.
     6 | // Ensure mock data conforms to CautionCard type
     7 | const mockOrphanedCards: CautionCard[] = baseMockCards
  >  8 |     .filter(card => !card.patient_id) // Filter for orphaned
       |             ^^^^
     9 |     .map((card, index) => ({
    10 |         ...card,
    11 |         id: card.id || 1000 + index, // Ensure unique ID
ERROR in src/stories/caution-cards/OrphanedCautionCards.stories.tsx:9:11
TS7006: Parameter 'card' implicitly has an 'any' type.
     7 | const mockOrphanedCards: CautionCard[] = baseMockCards
     8 |     .filter(card => !card.patient_id) // Filter for orphaned
  >  9 |     .map((card, index) => ({
       |           ^^^^
    10 |         ...card,
    11 |         id: card.id || 1000 + index, // Ensure unique ID
    12 |         file_name: card.file_name || `Orphaned_Doc_${index + 1}.pdf`,
ERROR in src/stories/caution-cards/OrphanedCautionCards.stories.tsx:9:17
TS7006: Parameter 'index' implicitly has an 'any' type.
     7 | const mockOrphanedCards: CautionCard[] = baseMockCards
     8 |     .filter(card => !card.patient_id) // Filter for orphaned
  >  9 |     .map((card, index) => ({
       |                 ^^^^^
    10 |         ...card,
    11 |         id: card.id || 1000 + index, // Ensure unique ID
    12 |         file_name: card.file_name || `Orphaned_Doc_${index + 1}.pdf`,
ERROR in src/stories/CautionCard.stories.tsx:4:29
TS2307: Cannot find module '../../components/caution-cards/CautionCard' or its corresponding type declarations.
    2 | import { Meta, StoryObj } from '@storybook/react';
    3 | import { Box } from '@mui/material';
  > 4 | import { CautionCard } from '../../components/caution-cards/CautionCard';
      |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    5 | import { CautionCard as CautionCardType } from '../../types/cautionCard';
    6 | import { mockCard as baseMockCard } from '../../utils/mockData';
    7 |
ERROR in src/stories/CautionCard.stories.tsx:5:48
TS2307: Cannot find module '../../types/cautionCard' or its corresponding type declarations.
    3 | import { Box } from '@mui/material';
    4 | import { CautionCard } from '../../components/caution-cards/CautionCard';
  > 5 | import { CautionCard as CautionCardType } from '../../types/cautionCard';
      |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^
    6 | import { mockCard as baseMockCard } from '../../utils/mockData';
    7 |
    8 | // Correctly typed and complete mock card
ERROR in src/stories/CautionCard.stories.tsx:6:42
TS2307: Cannot find module '../../utils/mockData' or its corresponding type declarations.
    4 | import { CautionCard } from '../../components/caution-cards/CautionCard';
    5 | import { CautionCard as CautionCardType } from '../../types/cautionCard';
  > 6 | import { mockCard as baseMockCard } from '../../utils/mockData';
      |                                          ^^^^^^^^^^^^^^^^^^^^^^
    7 |
    8 | // Correctly typed and complete mock card
    9 | const mockCard: CautionCardType = {
ERROR in src/stories/OrphanedCautionCards.stories.tsx:73:5
TS2322: Type '(cardId: number, reviewedBy: string) => Promise<{ success: true; message: string; card: { status: string; reviewed_by: string; reviewed_date: string; id?: number; file_name?: string; file_path?: string; file_size?: number; ... 7 more ...; updated_at?: string; }; }>' is not assignable to type '(cardId: number, reviewedBy: string) => Promise<{ success: boolean; message: string; card: CautionCard; }>'.
  Type 'Promise<{ success: true; message: string; card: { status: string; reviewed_by: string; reviewed_date: string; id?: number; file_name?: string; file_path?: string; file_size?: number; file_type?: string; blood_type?: string; ... 5 more ...; updated_at?: string; }; }>' is not assignable to type 'Promise<{ success: boolean; message: string; card: CautionCard; }>'.
    Type '{ success: true; message: string; card: { status: string; reviewed_by: string; reviewed_date: string; id?: number; file_name?: string; file_path?: string; file_size?: number; file_type?: string; blood_type?: string; ... 5 more ...; updated_at?: string; }; }' is not assignable to type '{ success: boolean; message: string; card: CautionCard; }'.
      Types of property 'card' are incompatible.
        Type '{ status: string; reviewed_by: string; reviewed_date: string; id?: number; file_name?: string; file_path?: string; file_size?: number; file_type?: string; blood_type?: string; antibodies?: string[]; transfusion_requirements?: string[]; ocr_text?: string; metadata?: {}; created_at?: string; updated_at?: string; }' is not assignable to type 'CautionCard'.
          Property 'id' is optional in type '{ status: string; reviewed_by: string; reviewed_date: string; id?: number; file_name?: string; file_path?: string; file_size?: number; file_type?: string; blood_type?: string; antibodies?: string[]; transfusion_requirements?: string[]; ocr_text?: string; metadata?: {}; created_at?: string; updated_at?: string; }' but required in type 'CautionCard'.
    71 |   args: {
    72 |     cards: mockOrphanedCards,
  > 73 |     onReview: async (cardId: number, reviewedBy: string) => {
       |     ^^^^^^^^
    74 |       console.log('Reviewing card:', { cardId, reviewedBy });
    75 |       await new Promise(resolve => setTimeout(resolve, 500));
    76 |       return {
ERROR in src/stories/OrphanedCautionCards.stories.tsx:94:5
TS2322: Type '(cardId: number, patientId: number) => Promise<{ success: true; message: string; card: { patient_id: number; id?: number; file_name?: string; file_path?: string; file_size?: number; file_type?: string; blood_type?: string; ... 6 more ...; updated_at?: string; }; }>' is not assignable to type '(cardId: number, patientId: number) => Promise<{ success: boolean; message: string; card: CautionCard; }>'.
  Type 'Promise<{ success: true; message: string; card: { patient_id: number; id?: number; file_name?: string; file_path?: string; file_size?: number; file_type?: string; blood_type?: string; antibodies?: string[]; transfusion_requirements?: string[]; ... 4 more ...; updated_at?: string; }; }>' is not assignable to type 'Promise<{ success: boolean; message: string; card: CautionCard; }>'.
    Type '{ success: true; message: string; card: { patient_id: number; id?: number; file_name?: string; file_path?: string; file_size?: number; file_type?: string; blood_type?: string; antibodies?: string[]; transfusion_requirements?: string[]; ... 4 more ...; updated_at?: string; }; }' is not assignable to type '{ success: boolean; message: string; card: CautionCard; }'.
      Types of property 'card' are incompatible.
        Type '{ patient_id: number; id?: number; file_name?: string; file_path?: string; file_size?: number; file_type?: string; blood_type?: string; antibodies?: string[]; transfusion_requirements?: string[]; ocr_text?: string; metadata?: {}; status?: string; created_at?: string; updated_at?: string; }' is not assignable to type 'CautionCard'.
          Property 'id' is optional in type '{ patient_id: number; id?: number; file_name?: string; file_path?: string; file_size?: number; file_type?: string; blood_type?: string; antibodies?: string[]; transfusion_requirements?: string[]; ocr_text?: string; metadata?: {}; status?: string; created_at?: string; updated_at?: string; }' but required in type 'CautionCard'.
    92 |   args: {
    93 |     cards: mockOrphanedCards,
  > 94 |     onLink: async (cardId: number, patientId: number) => {
       |     ^^^^^^
    95 |       console.log('Linking card to patient:', { cardId, patientId });
    96 |       await new Promise(resolve => setTimeout(resolve, 500));
    97 |       return {
ERROR in src/stories/Page.tsx:15:8
TS2375: Type '{ user: User | undefined; onLogin: () => void; onLogout: () => void; onCreateAccount: () => void; }' is not assignable to type 'HeaderProps' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
  Types of property 'user' are incompatible.
    Type 'User | undefined' is not assignable to type 'User'.
      Type 'undefined' is not assignable to type 'User'.
    13 |   return (
    14 |     <article>
  > 15 |       <Header
       |        ^^^^^^
    16 |         user={user}
    17 |         onLogin={() => setUser({ name: 'Jane Doe' })}
    18 |         onLogout={() => setUser(undefined)}
ERROR in src/stories/PatientCard.stories.tsx:2:25
TS2307: Cannot find module '../../components/patients/PatientCard' or its corresponding type declarations.
    1 | import { Meta, StoryObj } from '@storybook/react';
  > 2 | import PatientCard from '../../components/patients/PatientCard'; // Assuming default export
      |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    3 | import { Patient, Demographics, MedicalHistory, BloodProfile } from '../../types/Patient';
    4 |
    5 | // Helper to create a valid Patient object
ERROR in src/stories/PatientCard.stories.tsx:3:69
TS2307: Cannot find module '../../types/Patient' or its corresponding type declarations.
    1 | import { Meta, StoryObj } from '@storybook/react';
    2 | import PatientCard from '../../components/patients/PatientCard'; // Assuming default export
  > 3 | import { Patient, Demographics, MedicalHistory, BloodProfile } from '../../types/Patient';
      |                                                                     ^^^^^^^^^^^^^^^^^^^^^
    4 |
    5 | // Helper to create a valid Patient object
    6 | const createMockPatient = (overrides: Partial<Patient> = {}): Patient => {
ERROR in src/stories/PatientCard.stories.tsx:66:20
TS7006: Parameter 'id' implicitly has an 'any' type.
    64 |     args: {
    65 |         patient: mockPatient,
  > 66 |         onSelect: (id) => console.log(`Patient selected: ${id}`),
       |                    ^^
    67 |     },
    68 | };
    69 |
ERROR in src/stories/PatientCard.stories.tsx:76:20
TS7006: Parameter 'id' implicitly has an 'any' type.
    74 |             medicalHistory: { allergies: [], conditions: [], medications: [], procedures: [], surgeries: [] },
    75 |         }),
  > 76 |         onSelect: (id) => console.log(`Patient selected: ${id}`),
       |                    ^^
    77 |     },
    78 | };
    79 |
ERROR in src/stories/PatientCard.stories.tsx:89:20
TS7006: Parameter 'id' implicitly has an 'any' type.
    87 |             },
    88 |         }),
  > 89 |         onSelect: (id) => console.log(`Patient selected: ${id}`),
       |                    ^^
    90 |     },
    91 | };
    92 |
ERROR in src/stories/PatientManagement.stories.tsx:2:35
TS2307: Cannot find module '../../components/patients/PatientManagement' or its corresponding type declarations.
    1 | import { Meta, StoryObj } from '@storybook/react';
  > 2 | import { PatientManagement } from '../../components/patients/PatientManagement';
      |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    3 | import { Patient, Demographics, MedicalHistory, BloodProfile } from '../../types/Patient';
    4 |
    5 | // Helper to create a valid Patient object (can be shared or redefined)
ERROR in src/stories/PatientManagement.stories.tsx:3:69
TS2307: Cannot find module '../../types/Patient' or its corresponding type declarations.
    1 | import { Meta, StoryObj } from '@storybook/react';
    2 | import { PatientManagement } from '../../components/patients/PatientManagement';
  > 3 | import { Patient, Demographics, MedicalHistory, BloodProfile } from '../../types/Patient';
      |                                                                     ^^^^^^^^^^^^^^^^^^^^^
    4 |
    5 | // Helper to create a valid Patient object (can be shared or redefined)
    6 | const createMockPatient = (overrides: Partial<Patient> = {}): Patient => {
ERROR in src/stories/PatientManagement.stories.tsx:107:25
TS7006: Parameter 'id' implicitly has an 'any' type.
    105 |         error: null,
    106 |         onAddPatient: () => console.log('Add Patient clicked'),
  > 107 |         onEditPatient: (id) => console.log(`Edit Patient clicked: ${id}`),
        |                         ^^
    108 |         onDeletePatient: (id) => console.log(`Delete Patient clicked: ${id}`),
    109 |     },
    110 | };
ERROR in src/stories/PatientManagement.stories.tsx:108:27
TS7006: Parameter 'id' implicitly has an 'any' type.
    106 |         onAddPatient: () => console.log('Add Patient clicked'),
    107 |         onEditPatient: (id) => console.log(`Edit Patient clicked: ${id}`),
  > 108 |         onDeletePatient: (id) => console.log(`Delete Patient clicked: ${id}`),
        |                           ^^
    109 |     },
    110 | };
    111 |
ERROR in src/stories/PatientManagement.stories.tsx:132:25
TS7006: Parameter 'id' implicitly has an 'any' type.
    130 |         error: null,
    131 |         onAddPatient: () => console.log('Add Patient clicked'),
  > 132 |         onEditPatient: (id) => console.log(`Edit Patient clicked: ${id}`),
        |                         ^^
    133 |         onDeletePatient: (id) => console.log(`Delete Patient clicked: ${id}`),
    134 |     },
    135 | }; 
ERROR in src/stories/PatientManagement.stories.tsx:133:27
TS7006: Parameter 'id' implicitly has an 'any' type.
    131 |         onAddPatient: () => console.log('Add Patient clicked'),
    132 |         onEditPatient: (id) => console.log(`Edit Patient clicked: ${id}`),
  > 133 |         onDeletePatient: (id) => console.log(`Delete Patient clicked: ${id}`),
        |                           ^^
    134 |     },
    135 | }; 
ERROR in src/stories/PatientPages.stories.tsx:11:31
TS2307: Cannot find module '../../context/ToastContext' or its corresponding type declarations.
     9 | import { within, waitFor, expect } from '@storybook/test';
    10 | import { Patient, Demographics, MedicalHistory, BloodProfile } from '../types/Patient';
  > 11 | import { ToastProvider } from '../../context/ToastContext';
       |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    12 |
    13 | // Create a mock QueryClient for the stories
    14 | const mockQueryClient = new QueryClient({
ERROR in src/stories/PatientPages.stories.tsx:55:9
TS2375: Type '{ abo?: string; rh?: string; phenotype: BloodPhenotype | BloodPhenotype; antibodies: string[]; restrictions?: string[]; requirements?: TransfusionRequirements; bloodType: string; }' is not assignable to type 'BloodProfile' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
  Property 'abo' is optional in type '{ abo?: string; rh?: string; phenotype: BloodPhenotype | BloodPhenotype; antibodies: string[]; restrictions?: string[]; requirements?: TransfusionRequirements; bloodType: string; }' but required in type 'BloodProfile'.
    53 |         },
    54 |         demographics: { ...baseDemographics, ...overrides.demographics },
  > 55 |         bloodProfile: { ...baseBloodProfile, ...overrides.bloodProfile },
       |         ^^^^^^^^^^^^
    56 |         medicalHistory: { ...baseMedicalHistory, ...overrides.medicalHistory },
    57 |         comments: overrides.comments || [],
    58 |         notes: overrides.notes || [],
ERROR in src/stories/PatientPages.stories.tsx:70:34
TS2739: Type '{ firstName: string; lastName: string; gender: "F"; }' is missing the following properties from type 'Demographics': dateOfBirth, contactNumber, email
    68 | const mockPatients = [
    69 |     createMockPatient({ id: '1' }),
  > 70 |     createMockPatient({ id: '2', demographics: { firstName: 'Jane', lastName: 'Smith', gender: 'F' } }),
       |                                  ^^^^^^^^^^^^
    71 |     createMockPatient({ id: '3', demographics: { firstName: 'Alice', lastName: 'Jones' } }),
    72 | ];
    73 |
ERROR in src/stories/PatientPages.stories.tsx:71:34
TS2739: Type '{ firstName: string; lastName: string; }' is missing the following properties from type 'Demographics': dateOfBirth, gender, contactNumber, email
    69 |     createMockPatient({ id: '1' }),
    70 |     createMockPatient({ id: '2', demographics: { firstName: 'Jane', lastName: 'Smith', gender: 'F' } }),
  > 71 |     createMockPatient({ id: '3', demographics: { firstName: 'Alice', lastName: 'Jones' } }),
       |                                  ^^^^^^^^^^^^
    72 | ];
    73 |
    74 | // Create handlers
ERROR in src/stories/PatientPages.stories.tsx:102:60
TS4111: Property 'id' comes from an index signature, so it must be accessed with ['id'].
    100 |   }),
    101 |   http.get('/api/patients/:id', ({ params }) => {
  > 102 |     const patient = mockPatients.find(p => p.id === params.id);
        |                                                            ^^
    103 |     if (patient) {
    104 |       return HttpResponse.json(patient);
    105 |     }
ERROR in src/stories/PatientPages.stories.tsx:125:70
TS4111: Property 'id' comes from an index signature, so it must be accessed with ['id'].
    123 |   }),
    124 |   http.put('/api/patients/:id', async ({ request, params }) => {
  > 125 |     const patientIndex = mockPatients.findIndex(p => p.id === params.id);
        |                                                                      ^^
    126 |     if (patientIndex === -1) {
    127 |          return HttpResponse.json({ message: 'Patient not found' }, { status: 404 });
    128 |     }
ERROR in src/stories/PatientPages.stories.tsx:130:5
TS2375: Type '{ updatedAt: string; id?: string; identification?: PatientIdentification; demographics?: Demographics; bloodProfile?: BloodProfile; ... 7 more ...; specialProcedures?: string[]; }' is not assignable to type 'Patient' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
  Property 'id' is optional in type '{ updatedAt: string; id?: string; identification?: PatientIdentification; demographics?: Demographics; bloodProfile?: BloodProfile; ... 7 more ...; specialProcedures?: string[]; }' but required in type 'Patient'.
    128 |     }
    129 |     const data = await request.json() as Partial<Patient>;
  > 130 |     mockPatients[patientIndex] = { ...mockPatients[patientIndex], ...data, updatedAt: new Date().toISOString() };
        |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    131 |     return HttpResponse.json(mockPatients[patientIndex]);
    132 |   }),
    133 |   http.delete('/api/patients/:id', ({ params }) => {
ERROR in src/stories/PatientPages.stories.tsx:135:70
TS4111: Property 'id' comes from an index signature, so it must be accessed with ['id'].
    133 |   http.delete('/api/patients/:id', ({ params }) => {
    134 |     const initialLength = mockPatients.length;
  > 135 |     const updatedPatients = mockPatients.filter(p => p.id !== params.id);
        |                                                                      ^^
    136 |     if (updatedPatients.length === initialLength) {
    137 |          return HttpResponse.json({ message: 'Patient not found' }, { status: 404 });
    138 |     }
ERROR in src/stories/PatientPages.stories.tsx:141:52
TS4111: Property 'id' comes from an index signature, so it must be accessed with ['id'].
    139 |     // Normally you'd update the original array, but for story isolation, maybe not?
    140 |     // mockPatients = updatedPatients; // Be careful with this in Storybook
  > 141 |     console.log('Simulated delete for ID:', params.id);
        |                                                    ^^
    142 |     return HttpResponse.json({ message: 'Patient deleted successfully' });
    143 |   }),
    144 | ];
ERROR in src/stories/PatientSearch.stories.tsx:2:31
TS2307: Cannot find module '../../components/patients/PatientSearch' or its corresponding type declarations.
    1 | import { Meta, StoryObj } from '@storybook/react';
  > 2 | import { PatientSearch } from '../../components/patients/PatientSearch';
      |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    3 | import { Patient, Demographics, MedicalHistory, BloodProfile } from '../../types/Patient';
    4 |
    5 | // Helper to create a valid Patient object
ERROR in src/stories/PatientSearch.stories.tsx:3:69
TS2307: Cannot find module '../../types/Patient' or its corresponding type declarations.
    1 | import { Meta, StoryObj } from '@storybook/react';
    2 | import { PatientSearch } from '../../components/patients/PatientSearch';
  > 3 | import { Patient, Demographics, MedicalHistory, BloodProfile } from '../../types/Patient';
      |                                                                     ^^^^^^^^^^^^^^^^^^^^^
    4 |
    5 | // Helper to create a valid Patient object
    6 | const createMockPatient = (overrides: Partial<Patient> = {}): Patient => {
ERROR in src/stories/PatientSearch.stories.tsx:81:27
TS7006: Parameter 'patient' implicitly has an 'any' type.
    79 |             );
    80 |         },
  > 81 |         onSelectPatient: (patient) => console.log('Patient selected:', patient),
       |                           ^^^^^^^
    82 |     },
    83 | };
    84 |
ERROR in src/stories/PatientSearch.stories.tsx:99:27
TS7006: Parameter 'patient' implicitly has an 'any' type.
     97 |             return [];
     98 |         },
  >  99 |         onSelectPatient: (patient) => console.log('Patient selected:', patient),
        |                           ^^^^^^^
    100 |     },
    101 | };
    102 |
ERROR in src/stories/PatientSearch.stories.tsx:110:27
TS7006: Parameter 'patient' implicitly has an 'any' type.
    108 |             throw new Error('Simulated search API error');
    109 |         },
  > 110 |         onSelectPatient: (patient) => console.log('Patient selected:', patient),
        |                           ^^^^^^^
    111 |     },
    112 | }; 
ERROR in src/types/patient.ts:1:10
TS2440: Import declaration conflicts with local declaration of 'BloodProfile'.
  > 1 | import { BloodProfile } from './blood';
      |          ^^^^^^^^^^^^
    2 |
    3 | export type RhPhenotype = 'D+' | 'D-' | 'Unknown';
    4 | export type KellPhenotype = 'K+' | 'K-' | 'Unknown';
ERROR in src/types/Patient.ts:1:10
TS2440: Import declaration conflicts with local declaration of 'BloodProfile'.
  > 1 | import { BloodProfile } from './blood';
      |          ^^^^^^^^^^^^
    2 |
    3 | export type RhPhenotype = 'D+' | 'D-' | 'Unknown';
    4 | export type KellPhenotype = 'K+' | 'K-' | 'Unknown';